[{"title":"搭建Hexo主题","url":"/2021/05/17/搭建Hexo博客(二)/","content":"\n> 安装Git后，我们需要Git输入命令，来安装一些服务。不使用cmd安装，以免报错\n\n### 安装Git\n\n> 什么是[Git](https://git-scm.com)？Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们将本地搭建好的网站，使用Git工具同步到Github上\n\n[Git下载地址](https://git-scm.com/download/win)\n\n![](https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517081113.png)\n\n> 在window桌面右键菜单栏，点击Git Bash Here，这是接下来需要的工具\n\n![](https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517081245.png)\n\n### 安装Node.js\n\n> Hexo基于Node.js，Node.js下载地址https://nodejs.org/en/download/，注意安装Node.js会包含环境变量及npm的安装，安装后，在命名行CMD输入node -v，判断是否安装成功\n\n![](https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517081912.png)\n\n通过两个命令，判断node和npm是否安装成功，安装成功会得到版本号信息\n\n\n\n### 使用npm命令安装Hexo(Git安装)\n\n`npm install -g hexo-cli `\n\n### 耐心等待安装后，准备初始化博客\n\n> 选择一个路径，创建博客文件夹，用于存放博客的。进入博客文件夹\n\n![](https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517082803.png)\n\n<div style=text-align:center;font-size:20px>\n  我创建了AlovelyYou文件夹，右键打开Git Bash，输入命令<cmd>hexo init</cmd>\n  <br>使用命令hexo s 本地访问网站，输入临时网站localhost:4000，如下图所示\n</div>\n\n![](https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517083415.png)\n\n### 配置username和useremail信息，本地绑定github\n\n> git config --global user.name \"你的GitHub用户名\"\n> git config --global user.email \"你的GitHub注册邮箱\"\n\n### 生成ssh密钥文件：\n\n> ssh-keygen -t rsa -C \"你的GitHub注册邮箱\"\n\n然后直接三个回车即可，默认不需要设置密码。在c盘用户管理员文件夹找到.ssh，打开id_rsa.push密钥，将全部内容复制下来\n\n> $ ssh -T git@github.com # 注意邮箱地址不用改\n\n因为我已经搭建了博客，不演示输入命令的结果了。按照文字说明即可\n\n\n\n### 进入Github设置ssh密钥\n\n![](https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517090803.png)\n\n![](https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517091154.png)\n\n输入命令ssh git@github.com，结果所下图所示说明成功啦\n\n![](https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517091358.png)\n\n### 配置hexo文件_config.yml\n\n![](https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517091801.png)\n\n我们将本地博客和GitHub关联起来，打开配置文件，在最后一页\n\n![](https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517092021.png)\n\n如果你的仓库分支是master，在branch填master，我默认是main，如果你的默认是master，请修改\n\n保存文件配置，现在安装Git部署插件，将本地部署到github\n\n> npm install hexo-deployer-git --save\n\n`hexo c` && `hexo g` &&`hexo d`\n\n通过这三条命令，你可以将本地博客部署到Github上，在输入命名时，你可以跟我一样通过&&符合连接三个命令，你也可以单独执行\n\n<div style=\"text-align:right;\">{% btn '/2021/05/17/搭建Hexo博客(三)/',搭建Hexo博客(三),far fa-hand-point-right,outline green larger %}\n</div>\n\n\n\n\n\n\n","tags":["Hexo"],"categories":["Blog"]},{"title":"Butterfly主题","url":"/2021/05/17/搭建Hexo博客(三)/","content":"\n### 搭建[Butterfly](https://butterfly.js.org/posts/21cfbf15/)主题\n\n> 我自己搭建博客主题就是butterfly，也遇到了很多困惑。目前基本解决了。如果你不喜欢这个主题可以去百度搜索其他Hexo主题。接下来，我会写一些搭建butterfly主题的教程，搭建者需要配合[官方文档](https://butterfly.js.org/posts/21cfbf15/)。单纯依靠官方文档搭建是可以的，我也是如此。\n\n\n\n### Git安装Butterfly主题\n\n在你的博客根目录右键打开Git Bash\n\n```powershell\ngit clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly\n```\n\n### 应用主题\n\n修改站点配置文件`_config.yml`，把主题更改`butterfly`\n\n```yaml\ntheme: butterfly\n```\n\n### 安装插件\n\n如果你没有pug以及stylus的渲染器，请下载安装：\n\n```powershell\nnpm install hexo-renderer-pug hexo-renderer-stylus --save\n```\n\n### 主题配置文件复制\n\n把主题文件夹中的`_config.yml`复制到Hexo根目录下，听说重新命名`_config.butterfly.yml`\n\n以后只需要在`_config.butterfly.yml`进行配置就行\n\nHexo会自动合并主题中的`_config.yml`和`_config.butterfly.yml`里的配置，如果存在同名配置，会使用\n\n`_config.butterfly.yml`的配置，其优先度较高。\n\n![](https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517110551.png)\n\n### 小结：butterfly主题基本样式ok\n\n> 以上是一些简单的搭建操作，使用Hexo命令部署到Github上，已经会有一个基本的主题样式，\n\n> 后续我将结合文档，写留言板、说说、在线聊天等功能博客。在此之前请完善butterfly主题基本样式，如果有问题请留言\n\n\n\n\n\n<div style=\"text-align:center;\">\n  {% btn '/2021/05/17/搭建Hexo博客(三)/',留言板,far fa-hand-point-right,outline green larger %}\n  {% btn '/2021/05/17/搭建Hexo博客(三)/',说说,far fa-hand-point-right,outline blue larger %}\n  {% btn '/2021/05/17/搭建Hexo博客(三)/',在线聊天,far fa-hand-point-right,outline red larger %}\n</div>\n\n","tags":["Butterfly"],"categories":["Blog"]},{"title":"Vue框架学习之旅","url":"/2021/05/17/Vue框架(一)/","content":"\n### Vue.js是什么\n\nVue（读音/vju:/，类似view）是一套用于构建用户界面的渐进式框架。以前学习JQuery编程叫命令式编程，学习vue编程，叫声明式编程。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用\n\n### 前端三大框架之一\n\nVue框架：作者[尤雨溪](https://www.jianshu.com/p/3092b382ee80)，创建了全世界三大前端框架之一，领先于React和Angular\n\n2013年，在Google工作的尤雨溪，收到Angular的启发，开发了一款轻量框架，最初命名Seed\n\n设计思想：是一种“渐进式框架”，淡化框架本省的主张，降低框架作为工具的复杂度，从而降低对使用者的要求\n\n### 起步\n\n> 官方指南假设你已了解关于 HTML、CSS 和 JavaScript 的中级知识。如果你刚开始学习前端开发，将框架作为你的第一步可能不是最好的主意——掌握好基础知识再来吧！之前有其它框架的使用经验会有帮助，但这不是必需的。\n\n尝试Vue.js最简单的方法是使用hello world例子，引用vue文件\n\n```html\n<!-- 开发环境版本，包含了有帮助的命令行警告，利于初学者 --> \n\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n\n<!-- 生产环境版本，优化了尺寸和速度 --> \n\n<script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n\n```\n\nVue.js的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进DOM的系统：\n\n```html\n<div id=\"app\">\n  {{message}}\n</div>\n```\n\n```js\nconst app = new Vue({\n  el:'#app'\n  data:{\n  \t//存放数据\n  \tmessage: 'Hello Vue'\n\t}\n  methods:{\n    //写方法                \n  }\n  computed:{\n    //属性方法，有缓存\n  }\n\tcomponents:{\n\t\t//声明子组件\n\t}\n})\n```\n\n\n\n> 以上一个简单的Vue实例，写了基本的Vue语法，{{message}}使用的是Mustach语法，用来显示Vue实例的数据，但是容器需要捆绑id，接下来我会一步步记录Vue的学习笔记\n\n\n\n<div style=\"text-align:right;\">\n  {% btn '',Vue框架基础,far fa-hand-point-right,outline green larger %}\n</div>\n\n","tags":["Vue入门"],"categories":["Vue"]},{"title":"搭建Github博客","url":"/2021/05/16/搭建Hexo博客(一)/","content":"\n\n\n> 搭建Github博客，首先创建账号，用户名使用一个喜欢的，不要随意创建\n\n# 搭建github博客\n\n* ### 创建[Github账号](https://github.com/join?)\n\n![Github注册页面](https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516202937.png)\n\n> 选择一个好听、好记的用户名，博客以用户名为域名的，使用字母+数组组合\n\n> 创建好github账号，验证Email，这是重要的\n\n![](https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516204745.png)\n\n![](https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516205631.png)\n\n进入Your repositiories 创建创库，仓库名字 username.github.io，以后进入博客名字就是这个\n\n![](https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516211900.png)\n\n![](https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516212649.png)\n\n![](https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516213223.png)\n\n> 这时候你的基本博客搭建好了，接下搭建Hexo博客主题，美化自己的博客\n\n![Butterfly样式](https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516215941.png)\n\n###### 这是我们后续将会搭建的主题\n\n<div style=\"text-align:right;\">\n  {% btn '/2021/05/17/搭建Hexo博客(二)/',搭建Hexo博客(二),far fa-hand-point-right,outline green larger %}\n</div>\n\n\n\n\n\n","tags":["Github"],"categories":["Blog"]},{"title":"Vue插槽Slot","url":"/2021/05/13/Vue_slot/","content":"\n> 大纲：了解插槽Slot的基本使用、学习新概念具名，通过给slot添加值name，指定修改内容、理解插槽作用域：父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。\n\n# 插槽slot\n\n##### 插槽slot的基本使用\n\n* 加强扩展性：在模板添加`<slot></slot>`，当需要给模板新添加内容时，可以在子组件中添加\n\n```html\n<template id=\"cpn\">\n\t<div>\n\t\t<h2>我是子组件</h2>\n\t\t<slot></slot>\n\t</div>\n</template>\n\n<!--使用模板时需要添加button-->\n<cpn>\n\t<button>\n    按钮\n  </button>\n</cpn>\n<!--这新增的标签会放到插槽位置上，如果有多个标签同样一起放入-->\n```\n\n* 添加默认值：如果模板在很多地方都需要这个标签，但是小部分不需要，可以给插槽添加默认值\n\n```html\n<template id=\"cpn\">\n\t<div>\n\t\t<h2>我是子组件</h2>\n\t\t<slot>\n      <!--默认含有按钮-->\n      <!--如果不需要按钮，可以新增替换-->\n      <button>按钮</button>\n    </slot>\n\t</div>\n</template>\n```\n\n\n\n* ##### 具名插槽\n\n  > 给`slot`插槽添加`name`值，当创建模板的时候，会存在多个插槽，当需要改变特定插槽的值，可以指定它的name\n\n  ```html\n  <template id=\"cpn\">\n  \t<div>\n  \t\t<slot name=\"left\"><span>左边</span></slot>\n  \t\t<slot name=\"center\"><span>中间</span></slot>\n  \t\t<slot name=\"right\"><span>右边</span></slot>\n      <slot><span>不需要指定name，被替换</span></slot>\n  \t</div>\n  </template>\n  <cpn>\n    <!--指定了name=\"left\"，替换默认值为button-->\n  \t<button slot=\"left\">button</button>\n    \n    <!--没有指定slot=\"name\"的都替换-->\n    <a href=\"#\">link</a>\n  </cpn>\n  ```\n\n  ------\n\n  * 使用`v-slot`绑定name\n\n  ```html\n  <!--template模板，header和footer指定了name属性-->\n  <div class=\"container\">\n    <header>\n      <slot name=\"header\"></slot>\n    </header>\n    <main>\n      <slot></slot>\n    </main>\n    <footer>\n      <slot name=\"footer\"></slot>\n    </footer>\n  </div>\n  \n  <!--使用模板-->\n  <!--通过template标签 用v-slot绑定特定插槽，能添加很多新标签-->\n  <base-layout>\n    <template v-slot:header>\n      <h1>Here might be a page title</h1>\n      <span>...</span>\n    </template>\n  \n    <p>A paragraph for the main content.</p>\n    <p>And another one.</p>\n  \n    <template v-slot:footer>\n      <p>Here's some contact info</p>\n    </template>\n  </base-layout>\n  ```\n\n  [官方示例](https://cn.vuejs.org/v2/guide/components-slots.html)\n\n* ##### 编译作用域\n\n  > 父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。\n\n  ```html\n  <div id=\"app\">\n    <!--使用模板时,模板cpn相当div，使用的数据都是vue实例的，而不是模板组件数据-->\n    <cpn v-for=\"item in items\" v-show:\"isShow\"></cpn>\n  </div>\n  ```\n\n  \n\n* ##### 作用域插槽\n\n  * 使用`slot`作用域插槽\n\n  > 父组件替换插槽的标签，但是内容由子组件提供\n  >\n  > * 因此我们需要从子组件获取到数据\n  > * 但是因为作用域拿到的数据是vue实例data，因此我们需要子组件传过去\n\n  ```html\n  <div id=\"app\">\n  \t<cpn></cpn>\n  \t<cpn>\n  \t\t<template slot-scope=\"slot\">\n  \t\t\t<span v-for=\"item in slot.aanguage\">{{item}}</span>\n  \t\t</template>\n  \t</cpn>\n  </div>\n  \t\t\n  <template id=\"cpn\">\n  \t<div>\n  \t\t<slot :aanguage=\"pLanguage\">\n  \t\t\t<ul>\n  \t\t\t\t<li v-for=\"item in pLanguage\">{{item}}</li>\n  \t\t\t</ul>\n  \t\t</slot>\n  \t</div>\n  </template>\n  <script src=\"js/vue.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n  <script type=\"text/javascript\">\n  \tconst app = new Vue({\n  \t\tel:'#app',\n  \t\tdata:{\n  \t\t\tmessage:'你好啊'\n  \t\t},\n  \t\tmethods:{\n  \t\t\n  \t\t},\n  \t\tcomponents:{\n  \t\t\tcpn:{\n  \t\t\t\ttemplate:'#cpn',\n  \t\t\t\tdata(){\n  \t\t\t\t\treturn{\n  \t\t\t\t\t\tpLanguage:['Javascript','C++','C#','Python','Php']\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t})\n  </script>\n  ```\n\n  PS：绑定子组件数据的名字不能使用大写，因为驼峰标识。无法识别\n\n  `<slot :aanguage=\"pLanguage\">`\n\n  `<template slot-scope=\"slot\">`\n\n  `\t\t<span v-for=\"item in slot.aanguage\">{{item}}</span>`\n\n  ","tags":["Vue插槽Slot"],"categories":["Vue"]}]