<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git 版本控制</title>
      <link href="2021/10/16/git/"/>
      <url>2021/10/16/git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript进阶面向对象ES6</title>
      <link href="2021/10/12/Object_oriented_ES6/"/>
      <url>2021/10/12/Object_oriented_ES6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="JavaScript-面向对象编程"><a href="#JavaScript-面向对象编程" class="headerlink" title="JavaScript 面向对象编程"></a>JavaScript 面向对象编程</h2><blockquote><p>面向对象编程的特性：封装性、继承性、多态性</p><p>面向过程编程的优点：性能比面向对象高，适合跟硬件联系的东西；缺点：没有面向对象易维护、易复用、易扩展</p></blockquote><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span>()</span>&#123;</span><br><span class="line">  <span class="comment">// 构造函数，默认生成</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 声明其它函数</span></span><br><span class="line">  <span class="function"><span class="title">sum</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">var</span> first = <span class="keyword">new</span> Star();</span><br></pre></td></tr></table></figure><ol><li>通过 class 关键字创建类，类名我们还是习惯性定义首字母大写</li><li>类里面有一个 constructor 函数，可以接受传递过来的参数，同时返回实例对象</li><li>constructor 函数只要 new 生成实例时，就会自动调用这个函数，如果我们不写这个函数，类也会自动生成这个函数</li><li>生成实例 new 不能省略</li><li>最后注意语法规范，创建类 类名后面不要加小括号，生成实例 类名后面加小括号，构造函数不需要加function</li></ol><h3 id="this-指向问题"><a href="#this-指向问题" class="headerlink" title="this 指向问题"></a>this 指向问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 谁调用方法，this就指向谁</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.x = x</span><br><span class="line">    <span class="built_in">this</span>.x = y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.x,<span class="built_in">this</span>.y)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fa1 = <span class="keyword">new</span> Father();</span><br><span class="line">fa1.sum()<span class="comment">// 那么sum函数里面的this指向fa1，指向对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.x = x</span><br><span class="line">    <span class="built_in">this</span>.y = y</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取按钮DOM节点</span></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">this</span>.btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>.btn.onclick = <span class="built_in">this</span>.sum() <span class="comment">// 这样给按钮点击事件绑定 sum 函数，那么调用sum函数就不是对象，而是按钮</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时this = btn</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何获取对象的this =&gt; 定义全局 that 变量，保存 this</span></span><br><span class="line"><span class="keyword">var</span> that = <span class="built_in">this</span></span><br></pre></td></tr></table></figure><h3 id="类继承-extends-和-super-关键字"><a href="#类继承-extends-和-super-关键字" class="headerlink" title="类继承 extends 和 super 关键字"></a>类继承 extends 和 super 关键字</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.x = x</span><br><span class="line">    <span class="built_in">this</span>.x = y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.x,<span class="built_in">this</span>.y)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写子类继承父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 使用父类通过 supter关键词</span></span><br><span class="line">    <span class="built_in">super</span>(x,y)<span class="comment">//调用了父类的构思函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son1 = <span class="keyword">new</span> Son();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>) 调用父类构造函数 <span class="built_in">super</span> 关键字</span><br><span class="line"><span class="built_in">super</span>()</span><br><span class="line">(<span class="number">2</span>) 调用父类方法</span><br><span class="line">son1.sum()</span><br><span class="line">(<span class="number">3</span>) 如果子类有该方法，父类也有该方法，会调用哪一个</span><br><span class="line">就近原则，使用子类方法</span><br></pre></td></tr></table></figure><p><strong>重点</strong></p><ol><li>在 ES6 中类没有变量提示，所有必须先定义类，才能通过类实例化对象</li><li>类里面的共有属性和方法一定要加 this 使用</li><li>类里面的this指向问题</li><li>constructor 里面的this指向实例对象，方法里面的this指向这个方法的调用者</li></ol><h3 id="类编程思想"><a href="#类编程思想" class="headerlink" title="类编程思想"></a>类编程思想</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1) 时刻需要注意类的this指向，谁调用了该方法，谁就是this指向的对象</span></span><br><span class="line"><span class="comment">//-  如果类的方法由按钮调用，那么对象就是 button，需要注意构造函数就是对象才能调用的</span></span><br></pre></td></tr></table></figure><p><strong>添加 标签</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newli =</span><br><span class="line">      <span class="string">&#x27;&lt;li class=&quot;show&quot;&gt;&lt;span&gt;新选项卡&lt;/span&gt;&lt;span class=&quot;icon&quot;&gt;&amp;#10006;&lt;/span&gt;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">that.lis[<span class="number">0</span>].parentNode.insertAdjacentHTML(<span class="string">&quot;beforeend&quot;</span>, newli);</span><br></pre></td></tr></table></figure><blockquote><p><strong><code>insertAdjacentHTML()</code></strong> 方法将指定的文本解析为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element"><code>Element</code></a> 元素，并将结果节点插入到DOM树中的指定位置。它不会重新解析它正在使用的元素，因此它不会破坏元素内的现有元素。这避免了额外的序列化步骤，使其比直接使用innerHTML操作更快</p><p>语法：<code>element.insertAdjacentHTML(position, text);</code></p></blockquote><p><strong>position：</strong>一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DOMString"><code>DOMString</code></a>，表示插入内容相对于元素的位置，并且必须是以下字符串之一：</p><ul><li><code>&#39;beforebegin&#39;</code>：元素自身的前面。</li><li><code>&#39;afterbegin&#39;</code>：插入元素内部的第一个子节点之前。</li><li><code>&#39;beforeend&#39;</code>：插入元素内部的最后一个子节点之后。</li><li><code>&#39;afterend&#39;</code>：元素自身的后面。</li></ul><h2 id="构造函数和原型"><a href="#构造函数和原型" class="headerlink" title="构造函数和原型"></a>构造函数和原型</h2><blockquote><p>ES6以前通过构造函数生成对象。构造函数是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与new一起使用。</p><p>创建对象可以通过三种方式：</p><ul><li>对象字面量</li><li>new Object()</li><li>利用构造函数创建对象</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1) 利用 new Object() 创建</span></span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) 利用字面量创建</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (1) 构造函数创建对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname,age</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.uname = uname;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname,age</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.uname = uname;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// uname、age、sing 都是通过 this 添加的，是实例成员。只能通过实例化对象调用</span></span><br><span class="line"><span class="built_in">this</span>.uname、<span class="built_in">this</span>.age、<span class="built_in">this</span>.sing()</span><br><span class="line"></span><br><span class="line">Star.username = <span class="string">&#x27;simplelife&#x27;</span>; <span class="comment">// 直接在构造函数本身添加</span></span><br><span class="line"><span class="comment">// username 是静态成员，只能通过构造函数调用。对象调用是underfined</span></span><br></pre></td></tr></table></figure><h3 id="构造函数的问题"><a href="#构造函数的问题" class="headerlink" title="构造函数的问题"></a>构造函数的问题</h3><blockquote><p>构造函数很好用，但是存在浪费内存的问题。当实例化很多对象，如果构造函数有函数，每一个实例化对象都需要开辟新的内存空间，去创建函数。</p></blockquote><p><strong>构造函数原型 prototype</strong></p><p>原型是一个对象，我们也称 prototype 为原型对象</p><p>构造函数通过原型分配的函数是所有对象所共享的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不需要将函数写在构造函数里面，而是写在原型上去共享</span></span><br><span class="line">Star.prototype.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Simplelife&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对象原型 <code>__proto__</code></strong></p><p>对象身上系统自动添加 <code>__proto__</code> 对象，指向我构造函数原型对象 <code>prototype</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj1.__proto__ === Star.prototype); <span class="comment">//logs true 完全等价</span></span><br><span class="line"><span class="comment">// 查找方法规则</span></span><br><span class="line"><span class="comment">// 首先查找构造函数是否有该方法</span></span><br><span class="line"><span class="comment">// 其次去 __proto__ 构造原型查找该方法</span></span><br></pre></td></tr></table></figure><p><strong>修改原型对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在给原型对象添加函数时，假如添加很多函数，可以如下写</span></span><br><span class="line">Star.prototype = &#123;</span><br><span class="line">  <span class="attr">sing</span>: <span class="function"><span class="keyword">function</span></span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;sing&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">  <span class="attr">movice</span>: <span class="function"><span class="keyword">function</span></span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;movice&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样给原型添加函数方法会直接覆盖以前的原型，因为给原型赋值的是一个对象。如果这样我们必须手动的利用 <code>constructor</code> 指向原来的构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Star.prototype = &#123;</span><br><span class="line"><span class="attr">constructor</span>: Star</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数、实例、原型对象三者之间的关系"><a href="#构造函数、实例、原型对象三者之间的关系" class="headerlink" title="构造函数、实例、原型对象三者之间的关系"></a>构造函数、实例、原型对象三者之间的关系</h3><blockquote><p>Star构造函数有一个原型对象 prototype 指向了 原型对象 prototype</p><p>原型对象 prototype  的属性 constructor 又指向了 Star 构造函数，因此如果赋值prototype为对象，就没有 construtor指向 Start</p><p>实例化对象通过 <code>__proto__</code> 指向 prototype 完全等价</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20211013191000.png"></p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><blockquote><p>Star 原型对象也有 <code>__proto__ </code>指向的是 Object 原型对象的 prototype</p><p>Object 原型对象指向的是 null</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20211013193721.png"></p><p>PS：原型链对象成员查找规则(就近原则)，当对象实例没有向上级 原型对象 prototype 找，直到最顶层</p><h3 id="扩展内置对象"><a href="#扩展内置对象" class="headerlink" title="扩展内置对象"></a>扩展内置对象</h3><p>可以通过原型对象，对原来的内置对象进行扩展自定义的方法 。 比如给数组增加自定义求偶数和的功能</p><p>PS：数组和字符串内置对象不能给原型对象覆盖操作 Array.prototype = {} , 只能是 Array.prototype.xxx = function(){} 的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="built_in">this</span>.length; i++)&#123;</span><br><span class="line">    sum += <span class="built_in">this</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义方法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] =&gt; <span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">arr1.sum(); <span class="comment">// logs 6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote><p>ES6之前并没有给我们提供 extends 继承。我们通过构造函数+原型对象模拟实现继承，被称为组合继承</p></blockquote><h3 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作用</span></span><br><span class="line">改变函数 <span class="built_in">this</span> 指向，可以呼叫函数</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法 </span></span><br><span class="line">call(thisArg, arg1, ... , argN)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// 指向的是 window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;simplelife&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">sum.call() <span class="comment">// 默认不传值等价于 sum();  呼叫该函数</span></span><br><span class="line">sum.call(obj) <span class="comment">// 传入第一个值是 obj，表示 this 指向obj，改变了函数内部this指向</span></span><br><span class="line">sum.call(obj,a,b) <span class="comment">// 后面传入都是参数</span></span><br></pre></td></tr></table></figure><h3 id="借用父构造函数-继承属性"><a href="#借用父构造函数-继承属性" class="headerlink" title="借用父构造函数 继承属性"></a>借用父构造函数 继承属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">uname,age</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.uname = uname;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">uname,age</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 父构造函数有属性赋值操作，直接使用 call 去调用。因为父构造函数 this 是指向父构造函数的实例对象</span></span><br><span class="line">  <span class="comment">// 因此需要使用 call 去更改为 Son</span></span><br><span class="line">  Father.call(<span class="built_in">this</span>,uname,age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son(<span class="string">&#x27;Simplelife&#x27;</span>,age);</span><br><span class="line"><span class="built_in">console</span>.log(son)<span class="comment">// =&gt; 如下</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20211014093047.png"></p><p><strong>继承方法</strong></p><blockquote><p>(1) 构造函数一般将方法写在原型上</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">uname,age</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.uname = uname;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Father.prototype.money = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;赚钱&#x27;</span>); <span class="comment">// 父构造函数赚钱的方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">uname,age</span>)</span>&#123;</span><br><span class="line">  Father.call(<span class="built_in">this</span>,uname,age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Son.prototype = Father.prototype</span></span><br><span class="line"><span class="comment">// 这样直接赋值可以将 父构造函数的函数方法赋值给子构造函数</span></span><br><span class="line"><span class="comment">// 如果再给 Son 添加原型方法，它会追加到 Father 上</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.uname = uname;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.money = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;赚钱&#x27;</span>); <span class="comment">// 父构造函数赚钱的方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">  Father.call(<span class="built_in">this</span>, uname, age);</span><br><span class="line">&#125;</span><br><span class="line">Son.prototype = Father.prototype</span><br><span class="line">Son.prototype.exam = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;需要考试&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Son.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(Father.prototype);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20211014094931.png"></p><p>PS：可以明显看到 Son 的原型 和 Father 原型一样，连给 Son 原型添加的方法，也添加到 Father 原型上，其实它们开辟的空间地址是同一个地址，因此修改会互相影响</p><p><strong>使用父实例对象赋值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例对象开辟的空间 和 构造函数原型开辟的空间是不一样的地址</span></span><br><span class="line"><span class="comment">// 实例对象 有个 __proto__ 等价于 构造函数原型 prototype 可以找到</span></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Father();</span><br><span class="line"><span class="comment">// Son 原型被对象覆盖赋值，需要对构造函数重新指向</span></span><br><span class="line"><span class="comment">// 如上图 constructor 都是指向 Father</span></span><br><span class="line">Son.prototype.constructor = Son; <span class="comment">// 重新指向 Son</span></span><br><span class="line"><span class="comment">// 给 Son原型 添加函数方法</span></span><br><span class="line">Son.prototype.exam = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;需要考试&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20211014095704.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20211014100052.png"></p><h3 id="类的本质"><a href="#类的本质" class="headerlink" title="类的本质"></a>类的本质</h3><blockquote><p>类是本质就是函数function，ES6通过 类 实现面向对象编程。ES6 类 和 ES5 构造函数是一样的，只是另一种写法（语法糖）</p><p>类所有的方法都定义在 原型对象 上，和E6操作是一样的，只是 ES6 可以直接写在类里面</p></blockquote><h2 id="ES5-中新增的方法"><a href="#ES5-中新增的方法" class="headerlink" title="ES5 中新增的方法"></a>ES5 中新增的方法</h2><h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><p>迭代(遍历)方法：<code>forEach()、map()、filter()、some()、every()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1) forEach</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">element,index,array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// element 当前元素</span></span><br><span class="line">  <span class="comment">// index 当前索引</span></span><br><span class="line">  <span class="comment">// 数组本身</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (2) filter</span></span><br><span class="line"><span class="comment">// 作用：创建一个新的数组，将新数组中的元素是通过检查指定数组中符合条件的所有元素</span></span><br><span class="line"><span class="comment">// 主要用于筛选数组，注意返回的是一个新数组</span></span><br><span class="line">arr.filter(<span class="function">(<span class="params">currentValue,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> currentValue &gt;= <span class="number">20</span>; <span class="comment">// 返回条件，得到符合条件的新数组</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> newArr = arr.filter…………</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (3) some</span></span><br><span class="line"><span class="comment">// 作用检查数组是否有某元素，有就终止循环，返回true。</span></span><br><span class="line"><span class="comment">// 返回值是布尔值 boolean, 传入的参数都是一样的</span></span><br><span class="line">arr.some(<span class="function">(<span class="params">currentValue,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> currentValue === <span class="string">&quot;simplelife&quot;</span>; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (4) map</span></span><br><span class="line"><span class="comment">// map 方法会给原数组中的每个元素都按顺序调用一次  callback 函数。callback 每次执行后的返回值（包括 </span></span><br><span class="line"><span class="comment">// undefined）组合起来形成一个新数组。 callback 函数只会在有值的索引上被调用；那些从来没被赋过值或者使用 </span></span><br><span class="line"><span class="comment">// delete 删除的索引则不会被调用。</span></span><br><span class="line"><span class="keyword">var</span> new_array = arr.map(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">currentValue[, index[, array]]</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 返回是新数组</span></span><br><span class="line">&#125;[, thisArg])</span><br><span class="line"><span class="comment">// 传入 this 是给回调函数 callback 使用的</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (5) every() </span></span><br><span class="line"><span class="comment">// 方法测试一个数组内的&lt;所有&gt;元素是否都能通过某个指定函数的测试。它返回一个布尔值。</span></span><br><span class="line"><span class="keyword">const</span> isBelowThreshold = <span class="function">(<span class="params">currentValue</span>) =&gt;</span> currentValue &lt; <span class="number">40</span>;</span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">30</span>, <span class="number">39</span>, <span class="number">29</span>, <span class="number">10</span>, <span class="number">13</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array1.every(isBelowThreshold));</span><br><span class="line"><span class="comment">// 输入结果: true</span></span><br><span class="line"><span class="comment">// 如果存在某元素不满足条件，会返回false.</span></span><br><span class="line"><span class="comment">// 查找到不满足条件的直接退出循环，返回 false 和 方法 some 是一样的</span></span><br></pre></td></tr></table></figure><p><strong>forEach 和 som 的区别</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当查询元素唯一标识选择 some 方法更高效</span></span><br><span class="line">forEach 遍历数组，会一直执行下去</span><br><span class="line">some 得到满足条件的，可以输入 <span class="keyword">return</span> <span class="literal">true</span>; 终止迭代</span><br><span class="line">arr.some(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(value === <span class="string">&#x27;simplelife&#x27;</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="comment">// 终止迭代</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><p><strong>1.trim()</strong></p><p>去除字符串两侧的空格。常用于 input 输入框去除空格</p><h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h3><p><strong>1.<code>Object.defineProperty(obj,prop,descriptor)</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义对象中新属性或修改原有的属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">&#x27;prop&#x27;</span>,descriptor); <span class="comment">// 三个参数必须传入</span></span><br><span class="line">obj: 目标对象</span><br><span class="line"><span class="attr">prop</span>: 需要定义或修改的属性名字(属性都需要用引号括起来)</span><br><span class="line"><span class="attr">descriptor</span>: 目标属性所拥有的特性</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 里面可以写四个值</span></span><br><span class="line">  <span class="attr">value</span>: 设置属性值,</span><br><span class="line">  <span class="attr">writable</span>: 值是否可以重写. <span class="literal">true</span> | <span class="literal">false</span> 默认 <span class="literal">false</span> 不允许重写</span><br><span class="line">  <span class="attr">enumerable</span>: 目标属性是否可以被枚举</span><br><span class="line">  <span class="attr">configurable</span>: 目标属性是否可以被删除或者修改特性</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> number = <span class="number">18</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// (1)defineProperty高级属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// 当有人修改对象的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span></span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> number</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 将number的值和对象obj的age建立联系，number修改后</span></span><br><span class="line"><span class="comment">// 如果有人在访问obj.age，就调用get方法，返回最新的number值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) set</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// 当有人修改obj的age属性，set函数(setter)就会被调用，且会收到修改的具体值</span></span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;有人修改了age属性，且值是&#x27;</span>,value); <span class="comment">// 最后结果是不会被修改，因为age值一直是 number 值</span></span><br><span class="line">    <span class="comment">// 修改number的值，此时 age 值被修改了</span></span><br><span class="line">    number = value </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>2.Object.keys()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于获取对象自身所有的属性</span></span><br><span class="line"><span class="built_in">Object</span>.keys(obj)</span><br><span class="line"><span class="comment">// 返回：一个由属性名组成的数组</span></span><br></pre></td></tr></table></figure><hr><h2 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h2><h3 id="函数的定义和调用"><a href="#函数的定义和调用" class="headerlink" title="函数的定义和调用"></a>函数的定义和调用</h3><p><strong>定义函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1) 函数定义方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义函数 (命名函数)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="comment">// 函数表达式（匿名函数）</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="comment">// 利用 new Function(&#x27;参数1&#x27;,&#x27;参数2&#x27;,&#x27;函数体&#x27;)</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;console.log(a+b)&#x27;</span>)</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">// logs 3</span></span><br><span class="line"><span class="comment">// 传入的参数 a,b 和 函数体都必须使用 引号&#x27;&#x27; 括起来</span></span><br><span class="line"><span class="comment">// Function 里面的参数都必须是字符串格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数也属于对象 fn 也有 __proto__</span></span><br><span class="line"><span class="built_in">console</span>.log(fn <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">//logs true</span></span><br></pre></td></tr></table></figure><p><strong>调用六种函数的方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (2) 调用</span></span><br><span class="line"><span class="number">1.</span> 普通函数</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;simplelife&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn(); | fn.call()</span><br><span class="line"><span class="number">2.</span> 对象的方法</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">getName</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;simplelife&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.getName();</span><br><span class="line"><span class="number">3.</span> 构造函数</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">new</span> Star();</span><br><span class="line"><span class="number">4.</span> 绑定事件函数</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="comment">// 点击调用</span></span><br><span class="line"><span class="number">5.</span> 定时器函数</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">1000</span>) <span class="comment">// 1s 调用一次</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">1000</span>) <span class="comment">// 1s后执行</span></span><br><span class="line"><span class="number">6.</span> 立即执行函数</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;simplelife&#x27;</span>) <span class="comment">// 不需要调用，立即执行</span></span><br><span class="line">&#125;)()</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;()) <span class="comment">// 另一种写法</span></span><br></pre></td></tr></table></figure><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20211014163454.png"></p><p><strong>改变函数内部 this 指向</strong></p><p>js专门提供了一些函数方法来帮我们更优雅处理函数内部 this 的指向问题，常用的 bind()、call()、apply()</p><ul><li>call(thisArg)  方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。</li></ul><blockquote><p><strong>注意：</strong>该方法的语法和作用与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"><code>apply()</code></a> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是<strong>一个参数列表</strong>，而 <code>apply()</code> 方法接受的是<strong>一个包含多个参数的数组</strong>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法： <span class="keyword">function</span>.call(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><p><code>call()</code> 提供新的 <strong>this</strong> 值给当前调用的函数/方法。你可以使用 <code>call</code> 来实现继承：写一个方法，然后让另外一个新的对象来继承它（而不是在新对象中再写一次这个方法）。</p><p><strong>使用 <code>call</code> 方法调用父构造函数</strong></p><p>在一个子构造函数中，你可以通过调用父构造函数的 <code>call</code> 方法来实现继承，类似于 <code>Java</code> 中的写法。下例中，使用 <code>Food</code> 和 <code>Toy </code>构造函数创建的对象实例都会拥有在 <code>Product</code> 构造函数中添加的 <code>name</code> 属性和 <code>price</code> 属性,但 <code>category</code> 属性是在各自的构造函数中定义的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Food</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">  Product.call(<span class="built_in">this</span>, name, price);</span><br><span class="line">  <span class="built_in">this</span>.category = <span class="string">&#x27;food&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Toy</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">  Product.call(<span class="built_in">this</span>, name, price);</span><br><span class="line">  <span class="built_in">this</span>.category = <span class="string">&#x27;toy&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cheese = <span class="keyword">new</span> Food(<span class="string">&#x27;feta&#x27;</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> Toy(<span class="string">&#x27;robot&#x27;</span>, <span class="number">40</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong><code>apply()</code></strong> 方法调用一个具有给定<code>this</code>值的函数，以及以一个数组（或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects">类数组对象</a>）的形式提供的参数。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法：func.apply(thisArg, [argsArray])</span><br><span class="line"><span class="comment">// apply 内部会将 数组解构</span></span><br></pre></td></tr></table></figure><p><code>apply</code> 与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call"><code>call()</code></a> 非常相似，不同之处在于提供参数的方式。<code>apply</code> 使用参数数组而不是一组参数列表。<code>apply</code> 可以使用数组字面量（array literal），如 <code>fun.apply(this, [&#39;eat&#39;, &#39;bananas&#39;])</code>，或数组对象， 如 <code>fun.apply(this, new Array(&#39;eat&#39;, &#39;bananas&#39;))</code>。</p><ol start="3"><li><code>bind() </code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">function</span>.bind(thisArg[, arg1[, arg2[, ...]]])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line"><span class="comment">// 返回一个原函数的拷贝，并拥有指定的 this 值和初始参数。</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#%E9%85%8D%E5%90%88_settimeout">配合 <code>setTimeout</code></a></p><p>在默认情况下，使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout"><code>window.setTimeout()</code></a> 时，<code>this</code> 关键字会指向 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window"><code>window</code></a> （或 <code>global</code>）对象。当类的方法中需要 <code>this</code> 指向类的实例时，你可能需要显式地把 <code>this</code> 绑定到回调函数，就不会丢失该实例的引用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// 没有做处理，打印的this 是window对象</span></span><br><span class="line">&#125;,<span class="number">200</span>)</span><br><span class="line"><span class="comment">// 绑定</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// 此时 this 是传入的 this</span></span><br><span class="line">&#125;.bind(<span class="built_in">this</span>),<span class="number">200</span>) </span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><blockquote><p><strong>区别点：</strong></p><ol><li>call 和 apply 会调用函数，并且改变函数内部this指向</li><li>call 和 apply 传递的参数不一样，call 传递参数 aru1,aru2……，apply 必须数组形式[arag]</li><li>bind 不会调用函数，可以改变函数内部 this 指向</li></ol><p><strong>主要应用场景：</strong></p><ol><li>call 经常做继承，去使用父构造函数的成员</li><li>apply 经常跟数组有关系。比如借助于数学对象实现数组最大值和最小值</li><li>bind 不调用函数，但是还想改变 this 指向。比如改变定时器内部的 this 指向</li></ol></blockquote><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><blockquote><p>js 除了提供正常模式外，还提供了严格模式（strict mode）。ES5的严格模式是采用最有限制性js变体的一种方式，即在严格的条件下运行js代码</p><ol><li>消除了js语法的一些不合理、不严谨之处、减少了一些怪异的行为</li><li>提高编译器效率，增加运行速度</li><li>禁用了在 ECAMScript 的未来版本中可能定义的语法，为未来新版本的js做好铺垫。比如不能使用 class、enum、export、super、为变量名</li></ol><p>严格模式可以应用到整个脚本或个别函数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// (1) 为脚本开启严格模式</span><br><span class="line">// 在所有语句之前放一个特定语句</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">  &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 立即执行函数</span></span></span><br><span class="line"><span class="javascript"><span class="meta">    &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  &#125;())</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// (2) 为个别函数添加严格模式</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="meta">    &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 以下函数都是普通模式</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>严格模式的变化</strong></p><ol><li>变量必须声明，不能是直接赋值<code>num = 10</code> 正常模式不会报错可以打印 num 值。但严格模式下必须 <code>var num = 10 </code>必须声明</li><li>严禁删除已经声明好了的变量</li><li>全局作用域中函数中的 this 是 undefined。正常模式是 window</li><li>构造函数不加new 调用，this会报错。this指向的是 undefined</li><li>定时器没有变化，还是指向 window 对象</li></ol><p><strong>函数变化</strong></p><ol><li><p>不允许有重名参数</p></li><li><p>严格模式禁止了不在脚本或者函数层面上的函数声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; &#125; <span class="comment">// !!! 语法错误</span></span><br><span class="line">  f();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123; &#125; <span class="comment">// !!! 语法错误</span></span><br><span class="line">  f2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 合法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">eit</span>(<span class="params"></span>) </span>&#123; &#125; <span class="comment">// 同样合法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><blockquote><p>高阶函数是对其它函数进行操作的函数，它接收函数作为参数（回调函数）或将函数作为返回值输出</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高阶函数运用案例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b,callback</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a+b);</span><br><span class="line">  callback &amp;&amp; callback();</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我是回调函数&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;返回的函数&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f1 = fn(); <span class="comment">// 接收</span></span><br><span class="line"><span class="built_in">console</span>.log(f1)</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><blockquote><p>什么是闭包（closure）：闭包指有权访问另外一个函数作用域中变量的函数</p><p>作用：延伸了变量的作用范围</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包就是就是函数，在全局如何使用局部变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正常情况全局无法得到局部的变量，现在让函数 fn 返回 fun函数</span></span><br><span class="line"><span class="keyword">return</span> fun</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = fn(); <span class="comment">// 得到了 fun函数</span></span><br><span class="line">f(); <span class="comment">// 使用了局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接 return function()&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思考题</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1)</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;The Window&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;My Object&#x27;</span>,</span><br><span class="line">  <span class="attr">getNameFunc</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()()) <span class="comment">//logs what &#x27;The Window&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// (2)</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;The Window&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;My Object&#x27;</span>,</span><br><span class="line">  <span class="attr">getNameFunc</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> that.name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()()) <span class="comment">//logs what &#x27;My Object&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">object.getNameFunc()() =&gt; 等同于 立即执行函数</span><br><span class="line"><span class="keyword">var</span> f = object.getNameFunc()</span><br><span class="line">f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.name </span><br><span class="line">    &#125;</span><br><span class="line">f() <span class="comment">// 立即执行函数 this 指向 window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (2)</span></span><br><span class="line">形成了一个闭包，有使用局部变量 that</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><blockquote><p>如果一个函数在内部可以调用其本身，那么这个函数就是递归函数。</p><p>递归里面必须加退出条件，不然死循环就会栈溢出</p></blockquote><p><strong>案例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用递归函数求斐波那契数列（兔子序列）1、1、2、3、5、8、13、21</span></span><br><span class="line"><span class="comment">// 用户输入 序列 ，求出当前值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fb</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n === <span class="number">1</span> || n === <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fb(n-<span class="number">1</span>) + fb(n-<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fb(<span class="number">6</span>)) <span class="comment">//logs 8</span></span><br></pre></td></tr></table></figure><p><strong>浅拷贝 和 深拷贝</strong></p><ul><li>浅拷贝只是拷贝一层，更深层次对象级别的只拷贝引用</li><li>深拷贝拷贝多层，每一级别的数据都会拷贝</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">  <span class="attr">msg</span>:&#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line"><span class="comment">// k 是属性名 obj[k] 属性值</span></span><br><span class="line">  o[k] = obj[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o)</span><br><span class="line"><span class="comment">// 浅拷贝无法深层拷贝</span></span><br><span class="line"><span class="comment">// 只是会拷贝深层地址 比如打印 o 对象，会有 age 属性</span></span><br><span class="line"><span class="comment">// 在 o 对象上更改 age 属性，同样也会更改打牌 obj 对象，因为是同一个地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>ES6 新增浅拷贝语法糖</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(obj,targetObject)</span><br><span class="line"><span class="comment">// targetObject：需要拷贝的对象</span></span><br><span class="line"><span class="comment">// obj： 拷贝到这个对象里面</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 深拷贝 函数封装</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">  <span class="attr">msg</span>:&#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">color</span>: [<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;red&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">newobj,oldobj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> oldobj)&#123;</span><br><span class="line">    <span class="comment">// 判断我们的属性值属于哪种数据类型</span></span><br><span class="line">    <span class="comment">// 1. 获取属性值 oldobj[k]</span></span><br><span class="line">    <span class="keyword">var</span> item = oldobj[k];</span><br><span class="line">    <span class="comment">// 2. 判断这个值是否是数组</span></span><br><span class="line">    <span class="keyword">if</span>(item <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">newobj[k] = [];</span><br><span class="line">      deepCopy(newobj[k],item);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(item <span class="keyword">instanceof</span> <span class="built_in">Object</span>)&#123;</span><br><span class="line"><span class="comment">// 3. 判断这个值是否是对象</span></span><br><span class="line">      newobj[k] = &#123;&#125;;</span><br><span class="line">      deepCopy(newobj[k],item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 4. 属于简单数据类型</span></span><br><span class="line">      newobj[k] = item;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之所以先判断是否是 数组，因为 数组也属于对象</span></span><br><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">//logs true</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="正则表达式概述"><a href="#正则表达式概述" class="headerlink" title="正则表达式概述"></a>正则表达式概述</h3><blockquote><p>正则表达式是用于匹配字符串中字符组合的模式。在JavaScript中，正则表达式也是对象</p><p>通常用来检索、替换那些符合某个模式的文本，例如表单验证、还用于过滤页面内容中的敏感词</p><p>特点：灵活性、逻辑性和功能性非常的强</p><p>​             极为简单的控制复杂的字符串</p></blockquote><h3 id="正则表达式在-JavaScript中的使用"><a href="#正则表达式在-JavaScript中的使用" class="headerlink" title="正则表达式在 JavaScript中的使用"></a>正则表达式在 JavaScript中的使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建正则表达式</span></span><br><span class="line"><span class="comment">// (1) 通过调用 RegExp 对象的构造函数创建</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/表达式/</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) 通过字面量创建</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/123/</span>;</span><br></pre></td></tr></table></figure><p><strong>测试正则表达式 test</strong></p><p>test() 正则对象方法，用于检测字符串是否符合该规则，该对象会返回 true 或 false，其参数是测试字符串</p><h3 id="正则表达式的特殊字符"><a href="#正则表达式的特殊字符" class="headerlink" title="正则表达式的特殊字符"></a>正则表达式的特殊字符</h3><blockquote><p>一个正则表达式可以由简单的字符构成，比如 /abc/，也可以是简单和特殊字符的组成，比如/ab*c/。其中特殊字符也被称为元字符，在正则表达式中是具有特殊意义的专用符号，如 ^、$、+等</p></blockquote><p><strong>边界符 ^ $</strong></p><p><code>^</code>  表示匹配行首的文本(以谁开始)</p><p><code>$</code>  表示匹配行尾的文本(以谁结束)</p><p>如果两者边界符出现，表示必须是精度匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^simplelife$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;simplelife&#x27;</span>)); <span class="comment">//logs true</span></span><br><span class="line"><span class="comment">// 表示必须只能是字符串 &#x27;simplelife&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>字符类</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符类：[] 表示有一些列字符可供选择，只要匹配其中一个就可以了</span></span><br><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/[abc]/</span>; <span class="comment">// 三选一 只能是其中一个</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&#x27;a&#x27;</span>)) <span class="comment">//logs true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&#x27;c&#x27;</span>)) <span class="comment">//logs true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&#x27;abc&#x27;</span>)) <span class="comment">//只能匹配一个 abc 返回就是 false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方括号符 [-]</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-z]$/</span> <span class="comment">//小写a到z 任何一个字母都行 返回 true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符组合</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z]$/</span> <span class="comment">// 26个英文字母都行</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z0-9_-]$/</span>  <span class="comment">//可以使用数组 下划线 横杠-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取反字符 如果中括号中存在 ^ 表示取反</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[^a-zA-Z0-9_-]$/</span>  <span class="comment">//表示不允许使用这些</span></span><br></pre></td></tr></table></figure><p><strong>量词符</strong></p><p>量词符同于设定某个模式出现的次数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// * 号 相当于 &gt;= 0 可以出现0次或则很多次</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a*$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;&#x27;</span>)) <span class="comment">//logs true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;a&#x27;</span>)) <span class="comment">//logs true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aa&#x27;</span>)) <span class="comment">//logs true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// + 号 相当于 &gt;= 1 可以出现 1 次或者很多次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ? 号 相当于 1 || 0  可以出现 1 次或者 0 次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;3&#125; 号 重复三次</span></span><br><span class="line"><span class="comment">// &#123;3,&#125; &gt;= 3 重复三次或以上</span></span><br><span class="line"><span class="comment">// &#123;3,16&#125; 大于等于3 并且 小于等于16</span></span><br></pre></td></tr></table></figure><p><strong>总结 中括号 大括号 小括号</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^abc&#123;3&#125;$/</span> <span class="comment">// 它只是让c重复三次 abccc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小括号 表示优先级</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(abc)&#123;3&#125;$/</span> <span class="comment">//表示重复 abc 3次 abcabcabc</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 大括号 量词符 里面表示重复次数</span><br><span class="line"><span class="number">2.</span> 中括号 字符集合 匹配方括号中的任意字符</span><br><span class="line"><span class="number">3.</span> 小括号 表示优先级</span><br><span class="line"><span class="number">4.</span> 或者号 | 就一个这个符号 表示或者</span><br></pre></td></tr></table></figure><p><strong>预定义类</strong></p><p>预定义类指的是某些常用模式的简写方式</p><table><thead><tr><th>预定义类</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配0-9之间的任一数字，相当于<code>[0-9]</code></td></tr><tr><td>\D</td><td>匹配所有0-9以外的字符，相当于 <code>[^0-9]</code></td></tr><tr><td>\w</td><td>匹配任意的字母、数字、下划线，相当于 <code>[^A-Za-z0-9_</code></td></tr><tr><td>\W</td><td>\w 取反</td></tr><tr><td>\s</td><td>匹配空格（包括换行符、制表符、空格符等）</td></tr><tr><td>\S</td><td>匹配非空格字符</td></tr></tbody></table><blockquote><p>常用正则表达式（测试正则匹配）：<a href="https://c.runoob.com/front-end/854/">https://c.runoob.com/front-end/854/</a></p></blockquote><p>​    </p><h3 id="正则表达式中的替换"><a href="#正则表达式中的替换" class="headerlink" title="正则表达式中的替换"></a>正则表达式中的替换</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 替换 replace</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy和red&#x27;</span></span><br><span class="line"><span class="keyword">var</span> newstr = str.replace(<span class="string">&#x27;andy&#x27;</span>,<span class="string">&#x27;baby&#x27;</span>) <span class="comment">// 将 andy 替换 baby</span></span><br><span class="line"><span class="built_in">console</span>.log(newstr) <span class="comment">// baby和red</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加入正则表达式</span></span><br><span class="line"><span class="keyword">var</span> newstr = str.replace(<span class="regexp">/andy/</span>,<span class="string">&#x27;bady&#x27;</span>) <span class="comment">//结果一样</span></span><br></pre></td></tr></table></figure><p>PS：上面这种替换方式之后替换一次</p><p><strong>正则表达式参数</strong></p><p><code>/表达式/[switch]</code></p><p>switch 按照什么样的模式来匹配，有三种值</p><ul><li>g：全局匹配</li><li>i:  忽略大小写</li><li>gi：全局匹配 + 忽略大小写   </li></ul><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p> <strong>1.箭头函数</strong></p><p>箭头函数不绑定 this 关键字，箭头函数中的 this，指向的是 函数定义位置的上下文 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;箭头函数&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line"><span class="attr">say</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.age); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果为 undefined 未定义</span></span><br><span class="line"><span class="comment">// 对象没有作用域，箭头函数this指向全局 在全局下没有 age </span></span><br></pre></td></tr></table></figure><p><strong>2.伪数组转化成真正的数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>) <span class="comment">// 获取所有的div 得到伪数组</span></span><br><span class="line"><span class="comment">// 使用扩展运算符 ... 将divs转化成 newarr 数组</span></span><br><span class="line"><span class="keyword">var</span> newarr = [...divs]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用数组内置方法转化</span></span><br><span class="line"><span class="keyword">var</span> ary = <span class="built_in">Array</span>.from(divs)</span><br><span class="line"><span class="comment">// 同样可以将为伪数组转化为数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.from 还有第二个参数是函数</span></span><br><span class="line"><span class="keyword">var</span> ary = <span class="built_in">Array</span>.from(divs,<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 代码体 item是当前元素</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>3.Array的扩展方法</strong></p><p> <code>find()</code> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 <code>undefined</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.find(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 符合条件的返回</span></span><br><span class="line"><span class="keyword">return</span> item == <span class="string">&#x27;simplelife&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ary = [&#123;</span><br><span class="line">  <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">  <span class="attr">id</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> target = ary.find(<span class="function">(<span class="params">item,index</span>)=&gt;</span> item.id == index)</span><br></pre></td></tr></table></figure><p><code>findIndex()</code>方法返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong>。若没有找到对应元素则返回-1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="keyword">const</span> isLargeNumber = <span class="function">(<span class="params">element</span>) =&gt;</span> element &gt; <span class="number">13</span>;</span><br><span class="line"><span class="built_in">console</span>.log(array1.findIndex(isLargeNumber));</span><br></pre></td></tr></table></figure><p><code>includes()</code> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 <code>true</code>，否则返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array1.includes(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="keyword">const</span> pets = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;bat&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(pets.includes(<span class="string">&#x27;cat&#x27;</span>));</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(pets.includes(<span class="string">&#x27;at&#x27;</span>));</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><strong>4.模板字符串</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板字符串可以解析变量 </span></span><br><span class="line"><span class="comment">// 在模板字符串中可以调用函数，显示函数返回值</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;siplelife&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">`你是谁：<span class="subst">$&#123;str&#125;</span>`</span>; <span class="comment">//logs &#x27;你是谁：simplelife&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;simplelife&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">`你是谁：<span class="subst">$&#123;fn()&#125;</span>`</span>; <span class="comment">// logs 同上</span></span><br></pre></td></tr></table></figure><p><strong>5.String 的扩展方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1) startsWith() 表示参数字符串是否在原字符串的开头，返回布尔值</span></span><br><span class="line"><span class="comment">// (2) endsWith() 表示参数字符串是否在原字符串的结尾，返回布尔值</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// repeat() 方法</span></span><br><span class="line"><span class="comment">// 表示将原字符串重复 n 次，返回一个新字符串</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.repeat(<span class="number">3</span>) <span class="comment">// &#x27;xxx&#x27;</span></span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>.repeat(<span class="number">1</span>) <span class="comment">// &#x27;hellohello&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>6.Set 数据结构</strong></p><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set 本身是一个构造函数，用来生成 Set 数据结构</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="built_in">console</span>.log(s.size) <span class="comment">//logs 0 表示是一个空的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(s1.size)  <span class="comment">//logs 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 Set 可以做数组去重，因为 Set 不能存储重复的值</span></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [...s1] <span class="comment">// 使用扩展运算符，转换成数组类型</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">// 打印 s1 的结果</span></span><br><span class="line"><span class="function"><span class="title">Set</span>(<span class="params"><span class="number">3</span></span>)</span> &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line">[[Entries]]</span><br><span class="line"><span class="number">0</span>: <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="number">1</span>: <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="number">2</span>: <span class="string">&quot;c&quot;</span></span><br><span class="line"><span class="attr">size</span>: <span class="number">3</span></span><br><span class="line">[[Prototype]]: <span class="built_in">Set</span></span><br></pre></td></tr></table></figure><blockquote><p>实例方法</p><ul><li>add(value)：添加某一个值，返回 Set 结构本身</li><li>delete(value)：删除个值，返回boolean值</li><li>has(value)：返回一个布尔值，表示该值是否为Set成员</li><li>clear()：清除所有成员，没有返回值</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="comment">// Set结构的实例与数组一样，也拥有 forEach 方法，用于对每个成员执行某种操作，没有返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line">s.forEach(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> JS </category>
          
          <category> DOM操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES6进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript DOM 操作</title>
      <link href="2021/09/21/Js_Dom/"/>
      <url>2021/09/21/Js_Dom/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="DOM事件基础"><a href="#DOM事件基础" class="headerlink" title="DOM事件基础"></a>DOM事件基础</h2><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><p><strong>1.获取元素对象的方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.获取 ID</span></span><br><span class="line"><span class="built_in">document</span>.getElementById()</span><br><span class="line"><span class="comment">// 2.获取标签名 ul li</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName() <span class="comment">// 返回是伪数组</span></span><br><span class="line"><span class="comment">// 3.H5新增获取类名</span></span><br><span class="line"><span class="built_in">document</span>.getElementByClassName() <span class="comment">// 伪数组存储方式</span></span><br><span class="line"><span class="comment">// 4.H5新增通过选择器</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&#x27;选择器&#x27;</span>) <span class="comment">// 返回第一个元素对象</span></span><br><span class="line"><span class="comment">//querySelector(&#x27;.class&#x27;) (&#x27;#id&#x27;) …………</span></span><br><span class="line"><span class="comment">// 4.1 根据选择器返回所有</span></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll() <span class="comment">//伪数组集合</span></span><br></pre></td></tr></table></figure><p><strong>2.获取特殊元素</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 body 标签</span></span><br><span class="line"><span class="keyword">var</span> eleBody = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="comment">// 获取 html 标签</span></span><br><span class="line"><span class="keyword">var</span> eleHtml = <span class="built_in">document</span>.documentElement; <span class="comment">//这是获取的规范方式</span></span><br></pre></td></tr></table></figure><h3 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h3><blockquote><p>事件是由 事件源、事件类型、事件处理程序 组成，称为事件三要素</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取事件源</span></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件类型，绑定点击</span></span><br><span class="line">btn.onclick</span><br><span class="line"></span><br><span class="line"><span class="comment">//事件处理程序</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;被点击了&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>常见鼠标事件</strong></p><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获取鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><h3 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h3><p><strong>1.改变元素内容</strong></p><p><code>innerText</code>：IE发起，非标准。去除换行和空格</p><p> <code>innerHTML</code>：能渲染 HTML 标签，保留换行和空格（W3C标准）</p><p><strong>2.表单元素的属性操作</strong></p><p><code>type、value、checked、selected、disabled</code></p><p><strong>3.样式属性操作</strong></p><ul><li><p><code>element.style</code> 行内样式操作</p></li><li><p><code>element.className</code> 类名样式操作，会更改元素的类名，会覆盖原先的类</p><p>可以设置为多个类：className = ’first currentClass‘</p></li></ul><p><strong>注意：</strong></p><ol><li>JS 里面的样式采用驼峰命名法</li><li>JS 修改 style 样式操作，产生的是行内样式，css 权重比较高</li></ol><p><strong>4.自定义属性操作</strong></p><blockquote><p>自定义属性的目的：是为了保存并使用数据。有些数据可以保存到页面中而不用保存数据库中。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(div.id) <span class="comment">// 得到属性 id 值</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> id = div.getAttribute(<span class="string">&#x27;id&#x27;</span>) <span class="comment">// 同上</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>设置属性值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div.id = <span class="string">&#x27;demo2&#x27;</span></span><br><span class="line">div.setAttribute(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;demo2&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>规范</strong></p><p><code>element.属性值 = &#39;值&#39;</code>：设置内置属性</p><p><code>element.setAttribute(&#39;id&#39;,&#39;demo2&#39;)</code>：设置自定义属性</p><p><strong>移除属性</strong></p><p><code>div.removeAttribute(&#39;data-index&#39;)</code></p><p><strong>自定义属性规范</strong></p><p>H5规定自定义属性<code>data-</code>开头作为属性名并且赋值</p><p><strong>H5新增获取自定义属性的方法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">data-list-name</span>=<span class="string">&quot;simple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="javascript"><span class="comment">// dataset 是一个集合，规范的</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(div.dataset.index) <span class="comment">//logs 2</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(div.dataset[<span class="string">&#x27;index&#x27;</span>]) <span class="comment">//logs 2</span></span></span><br><span class="line"><span class="javascript">  </span></span><br><span class="line"><span class="javascript">  <span class="comment">// 获取 data-list-name 自定义属性</span></span></span><br><span class="line"><span class="javascript">  div.dataset.listName <span class="comment">// 使用驼峰命名法</span></span></span><br><span class="line"><span class="javascript">  div.dataset[<span class="string">&#x27;listName&#x27;</span>] </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>dataset</code> 是 规范自定义属性的集合，<code>data-</code>开头的都存在这个集合里面</p><p><code>console.log(div.dataset.index) console.log(div.dataset[&#39;index&#39;])</code></p><hr><h3 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h3><blockquote><p>一般地，节点至少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性</p></blockquote><ul><li>元素节点 nodeType = 1</li><li>属性节点 nodeType = 1</li><li>文本节点 nodeType = 1（文本节点包含文字、空格、换行等）</li></ul><p><strong>父节点 和 子节点操作</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;erweima&quot;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 1. 父节点 parentNode</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> erweima = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.erweima&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 正常获取父节点</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 通过节点获取</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> box = erweima.parentNode <span class="comment">// 获取的是最近的父级，得不到返回空</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 获取子节点 是一个集合</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> lis = ul.childNodes </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>获取子节点集合包含 元素节点 文本节点 等等。需要专为处理才能获取元素节点，因此不推荐使用 childNodes 获取子节点</p><p><cst>通过非标准方法 : children</cst></p><p>ul.children 获取是就是子节点元素，虽然不标准，但是得到浏览器的支持</p></blockquote><p><strong>获取第一个元素节点和最后一个元素节点</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">parentNode.firstChild <span class="comment">// 获取的是第一个节点 ，不是元素节点</span></span><br><span class="line">parentNode.lastChild</span><br><span class="line"><span class="comment">// 有兼容性问题</span></span><br><span class="line">parentNode.firstElementChild</span><br><span class="line">parentNpde.lastElementChild</span><br><span class="line"><span class="comment">// 实际开发</span></span><br><span class="line">parentNode.children[<span class="number">0</span>]</span><br><span class="line">parentNode.children[parentNode.children.length - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><strong>兄弟节点</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="comment">// 1. nextSibling 下一个兄弟节点 包含元素节点或文本节点</span></span><br><span class="line">node.nextSibling</span><br><span class="line"><span class="comment">// 2. previousSibling 获取上一个兄弟节点</span></span><br><span class="line">node.previousSibling</span><br><span class="line"><span class="comment">// 3. nextElementSibling previousElementSibling 获取兄弟元素节点</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>添加节点</strong></p><p><code>document.createElement(&#39;li&#39;)</code> 创建节点元素</p><p><code>node.appendChild(child)</code></p><p>将一个节点添加到指定父节点的子节点列表末尾。类似于 css 里面的 before伪元素</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210921233741.png"></p><p><code>node.insertBefore(child,指定元素)</code>：指定元素是指子元素的哪一个，用节点选择</p><p>将一个节点添加到指定父节点的子节点列表末尾。类似于 css 里面的 after 伪元素</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210921233944.png"></p><p><code>node.insertBefore(child,node.children[0])</code> 插入到第一个上面</p><p><strong>删除节点</strong></p><p><code>node.removeChild(node.children)</code></p><p><strong>克隆节点</strong></p><p><code>node.cloneNode()</code> 括号为空或者false 是浅拷贝，只复制标签</p><p><code>node.cloneNode(true)</code> 复制内容</p><p><strong>动态生成表格案例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">table</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">th</span>,<span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">thead</span> <span class="selector-tag">tr</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>科目<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> data = [&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">subject</span>: <span class="string">&#x27;javascript&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">score</span>: <span class="number">98</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">subject</span>: <span class="string">&#x27;javascript&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">score</span>: <span class="number">90</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;老刘&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">subject</span>: <span class="string">&#x27;javascript&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">score</span>: <span class="number">92</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;李逵&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">subject</span>: <span class="string">&#x27;javascript&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">score</span>: <span class="number">45</span></span></span><br><span class="line"><span class="javascript">      &#125;]</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取 tbody 元素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> tbody = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;tbody&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      data.forEach( <span class="function"><span class="params">obj</span> =&gt;</span> &#123; <span class="comment">// 循环 data 数组 obj 是单个对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">&#x27;tr&#x27;</span>) <span class="comment">//创建tr 对象</span></span></span><br><span class="line"><span class="javascript">        tbody.appendChild(tr) <span class="comment">// 添加到 body 里面</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123; <span class="comment">// 再次遍历对象 obj</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">&#x27;td&#x27;</span>) <span class="comment">//创建td</span></span></span><br><span class="line"><span class="javascript">          td.innerHTML = obj[i]</span></span><br><span class="line"><span class="javascript">          tr.appendChild(td) <span class="comment">// 插入到 tr里面</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 添加删除单元格</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">&#x27;td&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        td.innerHTML = <span class="string">&#x27;&lt;a href=&quot;javascript:;&quot;&gt;删除&lt;/a&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">        tr.appendChild(td)</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取所有的 a 标签</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> a = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;a&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">        a[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          tbody.removeChild(<span class="built_in">this</span>.parentNode.parentNode)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>三种创建元素方式的区别</strong></p><ul><li><code>document.write()</code> </li><li><code>element.innerHTML</code></li><li><code>document.createElement()</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210922114510.png"></p><p><br><hr></p><h2 id="事件高级"><a href="#事件高级" class="headerlink" title="事件高级"></a>事件高级</h2><h3 id="注册事件（绑定事件）"><a href="#注册事件（绑定事件）" class="headerlink" title="注册事件（绑定事件）"></a>注册事件（绑定事件）</h3><blockquote><p>给元素添加事件，称为注册事件或者绑定事件</p><p>注册事件有两种方式：传统方式和方法监听注册方式</p></blockquote><p><strong>1.方法监听注册方式</strong></p><ul><li><code>addEventListener()</code> w3c标准</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// type 类型是字符串 &#x27;click&#x27; 点击事件 不要带 on</span></span><br></pre></td></tr></table></figure><h3 id="删除事件（解绑事件）"><a href="#删除事件（解绑事件）" class="headerlink" title="删除事件（解绑事件）"></a>删除事件（解绑事件）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 传统解绑</span></span><br><span class="line">btn.onclick = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. removeEventListener</span></span><br><span class="line">eventTarget.removeEventListener(type,listener[,useCapture])</span><br><span class="line">btn.removeEventListener(<span class="string">&#x27;click&#x27;</span>,fn)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210922162516.png"></p><h3 id="Dom事件流"><a href="#Dom事件流" class="headerlink" title="Dom事件流"></a>Dom事件流</h3><blockquote><p>事件流描述的是从页面中接收事件的顺序</p><p>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即 DOM 事件流</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210922162936.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20211019145802.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// addEventListener 第三个参数决定是捕获阶段 还是 冒泡阶段</span></span><br><span class="line"><span class="comment">// true 表示捕获阶段从上自下 document&gt;body&gt;父级&gt;子级</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// false 表示冒泡阶段 从下往上 子级&gt;父级&gt;body&gt;document</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设</span></span><br><span class="line"><span class="comment">//&lt;div id=&quot;father&quot;&gt;</span></span><br><span class="line"><span class="comment">//  &lt;div id=&quot;son&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">//&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> son = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#son&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> father = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#father&#x27;</span>)</span><br><span class="line">son.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 捕获阶段</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1111</span>)</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line">father.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2222</span>)</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// 打印结果肯定是 2222 1111 先执行父级事件，因为绑定了事件</span></span><br><span class="line"></span><br><span class="line">son.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 冒泡阶段 false 或者省略默认是冒泡阶段</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1111</span>)</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line">father.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2222</span>)</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line"><span class="comment">// 打印结果肯定是 1111 2222 先执行子级事件再执行父级</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210922164120.png"></p><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>侦听函数有一个形参 <code>event</code> 里面有很多事件属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(event)</span><br><span class="line">&#125;</span><br><span class="line">div.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//body</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210922165436.png"></p><p><code>e.target</code> 是触发对象</p><p><code>this</code> 是绑定对象，两者有可能一样，但不完全一样</p><p><strong>阻止默认行为</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;a&#x27;</span>);  </span><br><span class="line">a.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">e.preventDefault(); <span class="comment">// 阻止 a 标签默认跳转行为</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><p>事件冒泡：开始时由最具体的元素接收，然后逐级向上传播到DOM最顶层节点</p><p>事件冒泡本身的特性，会带来坏处，也会带来好处，需要灵活处理</p><p><strong>阻止事件冒泡</strong></p><ul><li>标准写法：利用事件对象里面的 <code>stopPropagation()</code> 方法</li></ul><h3 id="事件委托（代理、委派"><a href="#事件委托（代理、委派" class="headerlink" title="事件委托（代理、委派)"></a>事件委托（代理、委派)</h3><p><cst class="red">事件委托原理：<br>不是每一个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点</cst></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 事件绑定在 ul 身上，但是可以点击 li标签</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 不需要给每一个li标签绑定点击事件</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  ul.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    e.target.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      ul.removeChild(<span class="built_in">this</span>) </span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,<span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用鼠标事件"><a href="#常用鼠标事件" class="headerlink" title="常用鼠标事件"></a>常用鼠标事件</h3><p><strong>1.禁用右键菜单</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;contextmenu&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  e.preventDefault(); <span class="comment">// 阻止默认行为</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>2.禁止选中文字</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;selectstart&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">   e.preventDefault(); <span class="comment">// 阻止默认行为</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210922173648.png"></p><p><strong>案例：跟随鼠标移动的天使</strong></p><ul><li>鼠标不断的移动，使用鼠标移动事件：<code>mouesmove</code></li><li>在页面中移动，给document注册事件</li><li>图片要移动距离，而且不占位置，使用绝对定位</li><li>核心原理：每次鼠标移动，我们都会获得最新的鼠标坐标，把这个X和Y坐标作为图片的top和left值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mouseRouser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span><br><span class="line">  <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">  img.style.position = <span class="string">&quot;absolute&quot;</span>;</span><br><span class="line">  img.style.pointerEvents = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  img.src = <span class="string">&quot;https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//angel.gif&quot;</span>;</span><br><span class="line">  body.appendChild(img);</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">&quot;mousemove&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = e.pageX;</span><br><span class="line">    <span class="keyword">var</span> y = e.pageY;</span><br><span class="line">    img.style.top = y + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    img.style.left = x + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">mouseRouser();</span><br></pre></td></tr></table></figure><h3 id="常用键盘事件"><a href="#常用键盘事件" class="headerlink" title="常用键盘事件"></a>常用键盘事件</h3><table><thead><tr><th>键盘事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onkeyup</td><td>某个键盘按键被松开时触发</td></tr><tr><td>onkeydown</td><td>某个键盘按键被按下时触发（会一直触发）</td></tr><tr><td>onkeypress</td><td>某个键盘按键被按下时触发 但是不识别功能键 比如 ctrl shift 箭头等</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210922234202.png"></p><p><strong>键盘事件对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;keyup&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(e.keyCode) <span class="comment">//获取按键的 ASCII 值</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>keyup 和 keydown 不区分大小写 a A 都是 65</p><p>keypress 事件区分大小写</p></blockquote><hr><h2 id="BOM浏览器对象模型"><a href="#BOM浏览器对象模型" class="headerlink" title="BOM浏览器对象模型"></a>BOM浏览器对象模型</h2><h3 id="BOM-概述"><a href="#BOM-概述" class="headerlink" title="BOM 概述"></a>BOM 概述</h3><blockquote><p>BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器宽口进行交互的对象，其核心对象就是 window</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210923095453.png"></p><p><code>window对象是浏览器的顶级对象</code>，它具有双重角色</p><ol><li>它是 JS 访问浏览器窗口的一个接口</li><li>它是一个全局对象，定义在全局作用域中的变量、函数都会变成 window 对象的属性和方法。在调用的时候可以省略 window，前面学习的对话框都属于 window对象方法，如 alert()、prompt()</li></ol><h3 id="window-对象的常见事件"><a href="#window-对象的常见事件" class="headerlink" title="window 对象的常见事件"></a>window 对象的常见事件</h3><p><strong>1.窗口加载事件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p><code>window.onload</code> 是窗口加载事件，当文档内容完全加载会触发该事件（包括图像、脚本文件、CSS文件等），就调用的处理函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line"><span class="comment">// DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片，flash等等</span></span><br></pre></td></tr></table></figure><p><strong>2.调整窗口大小事件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line"><span class="comment">// onrezie 是调整窗口大小加载事件，当触发时就调用的处理函数</span></span><br><span class="line"><span class="comment">// 用于响应式布局</span></span><br><span class="line"><span class="comment">// 通过window.innerWidth 获取当前屏幕宽度</span></span><br><span class="line"><span class="comment">// 以前没有CSS3时，用js做响应式布局</span></span><br></pre></td></tr></table></figure><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>window 对象给我们提供了2个非常好用的方法-定时器</p><ul><li><code>setTimeout()</code> 执行一次</li><li><code>setInterval()</code> 每隔一定时间执行一次</li></ul><p><strong>清除定时器</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.清除setTimeout</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line"><span class="built_in">clearTimeout</span>(timer) <span class="comment">// 清除定时器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.清除setInterval</span></span><br><span class="line"><span class="keyword">var</span> timer2 = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line"><span class="built_in">clearInterval</span>(timer2) <span class="comment">// 清除定时器</span></span><br></pre></td></tr></table></figure><p><strong>this指向问题</strong></p><ul><li>在全局作用域或者普通函数中this指向全局对象window（注意定时器里面的this指向window），指向的是调用者</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认定时器有一个调用者就是 window</span></span><br><span class="line"><span class="comment">// 函数也有调用者，就是window，只是 window调用者这个对象被省略了</span></span><br><span class="line"><span class="comment">// 因此 this 指向的是window</span></span><br></pre></td></tr></table></figure><ul><li>方法调用中谁调用this指向谁</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line"><span class="attr">sayHi</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个 this 指向的就是 o，o调用了函数sayhi</span></span><br></pre></td></tr></table></figure><ul><li>构造函数中 this 指向构造函数的示例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> Fun()</span><br><span class="line"><span class="comment">// 打印的this就是指向 fun 实例对象</span></span><br></pre></td></tr></table></figure><h3 id="JS-执行机制"><a href="#JS-执行机制" class="headerlink" title="JS 执行机制"></a>JS 执行机制</h3><p>JS 执行机制是单线程的</p><blockquote><p>1.先执行执行栈中的同步任务；2.异步任务（回调函数）放入任务队列中；3.一旦执行栈中所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行</p></blockquote><p><strong>1.异步任务</strong></p><p>JS异步是通过回调函数实现的</p><p>一般，异步任务有以下三种类型</p><ol><li>普通事件、click、resize等</li><li>资源加载，如load、error等</li><li>定时器，包括 setInterval、setTimeout</li></ol><p>异步任务相关回调函数添加到任务队列中（任务队列也称消息队列）</p><p><strong>2.事件循环</strong></p><p>由于主线程不断的重复获取任务、执行任务、再获取任务、再执行，所以这种机制被称为<cst>事件循环（event loop）</cst></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210923125230.png" alt="JS执行机制图"></p><h3 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h3><blockquote><p>window 对象给我们提供了一个location属性用于获取或设置窗体的URL，并且可以用于解析URL。因为这个属性返回的是一个对象，所以我们将这个属性也称为location对象</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210923162433.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210923163729.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分割获取的参数 search</span></span><br><span class="line"><span class="comment">// substr（&#x27;起始的位置&#x27;,&#x27;长度&#x27;) 默认截取全部</span></span><br><span class="line"><span class="comment">// split(&#x27;分割符&#x27;)</span></span><br><span class="line"><span class="keyword">var</span> params = location.search.substr(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> arr = params.split(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">//得到参数数组</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="navigator-对象"><a href="#navigator-对象" class="headerlink" title="navigator 对象"></a>navigator 对象</h3><p><code>navigator </code>对象包含有关浏览器的信息，它有很多属性，我们常用的就是 <code>userAgent</code>，该属性可以返回由客户端发送服务器的 <code>user-agent</code> 头部的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((navigator.userAgent.match(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;</span><br><span class="line">            <span class="built_in">window</span>.location.href = <span class="string">&quot;../H5/index.html&quot;</span>; <span class="comment">//手机</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 进入手机端的</span></span><br></pre></td></tr></table></figure><h3 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h3><p>window 对象给我们提供了一个 history 对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的URL</p><table><thead><tr><th>history对象方法</th><th>作用</th></tr></thead><tbody><tr><td>back()</td><td>后退功能</td></tr><tr><td>forward()</td><td>前进功能</td></tr><tr><td>go(参数)</td><td>前进后退功能，参数是1，前进一个页面。参数-1，后退一个页面</td></tr></tbody></table><hr><h2 id="PC网页特效"><a href="#PC网页特效" class="headerlink" title="PC网页特效"></a>PC网页特效</h2><h3 id="元素偏移量-offset-系列"><a href="#元素偏移量-offset-系列" class="headerlink" title="元素偏移量 offset 系列"></a>元素偏移量 offset 系列</h3><p>offset 翻译过来就是偏移量， 我们使用 offset 系列相关属性可以动态的得到该元素的位置（偏移）、大小等。</p><ul><li><p>获得元素距离带有定位父元素的位置 </p></li><li><p>获得元素自身的大小（宽度高度）</p></li><li><p>注意： 返回的数值都不带单位</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210927093535.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210927091850.png"></p><p><strong>案例获取盒子鼠标的坐标</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取盒子距离左侧body的距离   offsetLeft</span></span><br><span class="line"><span class="comment">// 获取鼠标距离左侧body的距离  pageX</span></span><br><span class="line">X =  pageX - offsetLeft</span><br><span class="line">Y =  pageY - offsetTop</span><br><span class="line"><span class="comment">// 无法直接得到鼠标在盒子内的坐标，但是可以用这种方式去获取到</span></span><br></pre></td></tr></table></figure><p><strong>拖拽模态框案例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取鼠标在盒子内的固定位置 event.pageX - offsetLeft 得到鼠标距离盒子左边的固定位置</span></span><br><span class="line"><span class="comment">// 使用 mousedown 按下 mouseup 弹起 mousemove 移动 这个三个事件</span></span><br><span class="line"><span class="comment">// 固定位置的获取，只需要在按下的事件时获取到</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.box&quot;</span>);</span><br><span class="line"> box.addEventListener(<span class="string">&quot;mousedown&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// （1) 一开始获取鼠标距离盒子内的距离，这是固定的</span></span><br><span class="line">  <span class="keyword">var</span> x = e.pageX - <span class="built_in">this</span>.offsetLeft</span><br><span class="line">  <span class="keyword">var</span> y = e.pageY - <span class="built_in">this</span>.offsetTop</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">&quot;mousemove&quot;</span>, move)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    box.style.left = e.pageX - x + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    box.style.top = e.pageY - y + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    <span class="built_in">console</span>.log(x,y);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">// (2) 当事件 mouseup 鼠标松开时 删除事件 mousemove</span></span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;mouseup&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.removeEventListener(<span class="string">&#x27;mousemove&#x27;</span>,move)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拖拽的图标 cursor:move;</span></span><br></pre></td></tr></table></figure><p><strong>仿京东图片放大镜案例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bigimage&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"> <span class="keyword">var</span> mask = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.mask&#x27;</span>);</span><br><span class="line"> <span class="keyword">var</span> bigimage = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.bigimage&#x27;</span>);</span><br><span class="line"> <span class="keyword">var</span> bigimg = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.bigimage img&#x27;</span>);</span><br><span class="line"><span class="comment">// 通过鼠标事件 mouseover mouseout 用来显示隐藏遮挡层 和 大图片</span></span><br><span class="line"> box.addEventListener(<span class="string">&#x27;mouseover&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   mask.style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">   bigimage.style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line"> &#125;)</span><br><span class="line"> box.addEventListener(<span class="string">&#x27;mouseout&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   mask.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">   bigimage.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="comment">// 移动mask</span></span><br><span class="line"> box.addEventListener(<span class="string">&#x27;mousemove&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> x = e.pageX - box.offsetLeft; <span class="comment">// 鼠标距离最左侧的距离 - 盒子距离父级左侧的距离，</span></span><br><span class="line">   <span class="keyword">var</span> y = e.pageY - box.offsetTop;  <span class="comment">//box的父级就是document  = 得到鼠标在盒子内的距离</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> maskX = x - mask.offsetWidth / <span class="number">2</span>; <span class="comment">// maskX，maskY 是 遮挡层在盒子内的距离</span></span><br><span class="line">   <span class="keyword">var</span> maskY = y - mask.offsetHeight / <span class="number">2</span>;</span><br><span class="line">   <span class="comment">//  最大移动间隙 box.offsetWidth - mask.offsetWidth</span></span><br><span class="line">   moveMax_X = box.offsetWidth - mask.offsetWidth;</span><br><span class="line">   moveMax_Y = box.offsetHeight - mask.offsetHeight;</span><br><span class="line">   <span class="comment">// 控制遮挡层的移动</span></span><br><span class="line">   mask.style.left = maskX&lt;=<span class="number">0</span>?maskX=<span class="number">0</span>+<span class="string">&#x27;px&#x27;</span>:maskX+<span class="string">&#x27;px&#x27;</span></span><br><span class="line">   mask.style.left = maskX&gt;=moveMax_X?maskX=moveMax_X+<span class="string">&#x27;px&#x27;</span>:maskX+<span class="string">&#x27;px&#x27;</span></span><br><span class="line">   mask.style.top = maskY&lt;=<span class="number">0</span>?maskY=<span class="number">0</span>+<span class="string">&#x27;px&#x27;</span>:maskY+<span class="string">&#x27;px&#x27;</span></span><br><span class="line">   mask.style.top = maskY&gt;=moveMax_Y?maskY=moveMax_Y+<span class="string">&#x27;px&#x27;</span>:maskY+<span class="string">&#x27;px&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 大图片移动</span></span><br><span class="line">   <span class="comment">// 大图片的间隙</span></span><br><span class="line">   <span class="comment">//  遮挡层移动距离 / 遮挡层最大移动距离 = 大图片移动距离 / 大图片最大移动距离</span></span><br><span class="line">   <span class="comment">//可以求出大图片的移动距离</span></span><br><span class="line">   <span class="comment">// maskX 遮挡层距离盒子左侧的距离      </span></span><br><span class="line">   <span class="comment">// bigMax 大图片最大的移动距离</span></span><br><span class="line">   <span class="comment">// moveMax_X 遮挡层移动最大距离</span></span><br><span class="line">   <span class="keyword">var</span> bigMax = bigimg.offsetWidth - bigimage.offsetWidth; <span class="comment">// 获取到 容器和照片的间隙</span></span><br><span class="line">   <span class="keyword">var</span> bigX = maskX * bigMax / moveMax_X; <span class="comment">// </span></span><br><span class="line">   <span class="keyword">var</span> bigY = maskY * bigMax / moveMax_Y;</span><br><span class="line">   bigimg.style.left = -bigX + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    bigimg.style.top = -bigY + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="元素可视区-client-系列"><a href="#元素可视区-client-系列" class="headerlink" title="元素可视区 client 系列"></a>元素可视区 client 系列</h3><blockquote><p>client 系列的相关属性来获取元素可视区的相关信息，通过 client 系列的相关属性可以动态的得到该元素的边框大小、元素大小等</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210928112637.png"></p><p><strong>立即执行函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.立即执行函数 不需要调用，立马能够自己执行的函数</span></span><br><span class="line"><span class="comment">// 2.写法</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)();  或者 (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同样可以传递参数</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a +b)</span><br><span class="line">&#125;)(a,b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大的好处：独立创建了一个作用域</span></span><br></pre></td></tr></table></figure><p>PS：如果有多个立即执行函数，需要用分号隔开</p><p><cst>立即执行函数 this 始终指向 Window</cst></p><h3 id="元素滚动-scroll-系列"><a href="#元素滚动-scroll-系列" class="headerlink" title="元素滚动 scroll 系列"></a>元素滚动 scroll 系列</h3><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20211014161706.png" alt="image-20210928114322672"></p><blockquote><p>scroll 得到的是内容的大小，client 是盒子的大小</p></blockquote><p><strong>scroll事件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scroll 是 是滚动条的事件，侧边栏的效果就是  通过scroll事件来确定的</span><br><span class="line">element.scrollTop 是滚动条移动，上面移除的部分高度</span><br><span class="line">获取页面移除的高度 <span class="built_in">window</span>.pageYOffset </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20211014161631.png" alt="image-20210928135604468"></p><p><strong>mouseover 和 mouseenter 进入盒子事件的区别</strong></p><blockquote><p>mouseover 进入盒子触发，进入子盒子仍然触发</p><p>mouseenter 进入该盒子触发，子盒子不触发</p><p>原因：mouseenter 不会有冒泡阶段</p><p>和 mouseenter 对应的是 mouseleave 同样没有冒泡阶段</p></blockquote><h3 id="动画函数封装"><a href="#动画函数封装" class="headerlink" title="动画函数封装"></a>动画函数封装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var obj = &#123;&#125;;</span></span><br><span class="line"><span class="comment">//obj.name = &#x27;andy&#x27;</span></span><br><span class="line"><span class="comment">// 给不同的元素指定了不同的定时器</span></span><br><span class="line"><span class="comment">// obj是一个对象，添加定时器通过 obj.timer 取名，可以添加不同的定时器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj,target</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 避免我们连续调用这个动画函数，加快定时器执行</span></span><br><span class="line">  <span class="comment">// 每次触发都会清除原先的动画定时器</span></span><br><span class="line"><span class="built_in">clearInterval</span>(obj.timer);</span><br><span class="line">  obj.timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(obj.offsetLeft &gt;= target)&#123;</span><br><span class="line">      <span class="comment">// 停止动画</span></span><br><span class="line">      <span class="built_in">clearInterval</span>(obj.timer);</span><br><span class="line">    &#125;</span><br><span class="line">    obj.style.left = obj.offsetLeft +<span class="number">1</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  &#125;,<span class="number">30</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">animate(div,<span class="number">200</span>); <span class="comment">// 调用动画</span></span><br></pre></td></tr></table></figure><p><strong>1.缓动动画效果</strong></p><p>公式：（目标值 - 现在的位置）/ 10</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取到的 步长值可能是小数，避免完整到达目标值，我们会取整</span></span><br><span class="line"><span class="comment">// 当向前走 步长值是正是数，去大点整数 使用函数 Math.ceil() 、当步长值是负值，向小值去整 Math.floor()</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj,target</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 避免我们连续调用这个动画函数，加快定时器执行</span></span><br><span class="line">  <span class="comment">// 每次触发都会清除原先的动画定时器</span></span><br><span class="line"><span class="built_in">clearInterval</span>(obj.timer);</span><br><span class="line">  obj.timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> step = (target - obj.offsetLeft) / <span class="number">10</span></span><br><span class="line">    step = step &gt; <span class="number">0</span>?<span class="built_in">Math</span>.ceil(step):<span class="built_in">Math</span>.floor(step)</span><br><span class="line"><span class="keyword">if</span>(obj.offsetLeft &gt;= target)&#123;</span><br><span class="line">      <span class="comment">// 停止动画</span></span><br><span class="line">      <span class="built_in">clearInterval</span>(obj.timer);</span><br><span class="line">    &#125;</span><br><span class="line">    obj.style.left = obj.offsetLeft + step + <span class="string">&#x27;px&#x27;</span>; <span class="comment">// step 是一个从大到小的值，如果是固定值，就是匀速动画</span></span><br><span class="line">  &#125;,<span class="number">15</span>); <span class="comment">// 15毫秒是一个标准的动画时间</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">animate(div,<span class="number">400</span>); <span class="comment">// 调用动画</span></span><br></pre></td></tr></table></figure><p><strong>2.动画函数添加回调函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给封装动画函数，添加形参 callback 回调函数</span></span><br><span class="line"><span class="comment">// 给调用时，传入函数 function()&#123;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj,target,callback</span>)</span>&#123; <span class="comment">// 省略</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 定时器清除时，调用回调函数</span></span><br><span class="line"><span class="keyword">if</span>(obj.offsetLeft &gt;= target)&#123;</span><br><span class="line"><span class="comment">// 停止动画</span></span><br><span class="line">  <span class="built_in">clearInterval</span>(obj.timer);</span><br><span class="line">  <span class="keyword">if</span>(callback)&#123; <span class="comment">// 看是否有回调函数</span></span><br><span class="line">    callback();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">animate(div,<span class="number">200</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 回调函数写内容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>3.完整的动画封装 animate.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj,target,callback</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 清除一下原先的定时器，防止叠加定时器</span></span><br><span class="line">  <span class="built_in">clearInterval</span>(obj.timer)</span><br><span class="line">  obj.timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> step = (target - obj.offsetLeft) / <span class="number">10</span></span><br><span class="line">  step = step &gt; <span class="number">0</span>?<span class="built_in">Math</span>.ceil(step):<span class="built_in">Math</span>.floor(step)</span><br><span class="line">    <span class="keyword">if</span>(obj.offsetLeft&gt;=target)&#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(obj.timer)</span><br><span class="line">      <span class="comment">//if(callback)&#123;</span></span><br><span class="line">      <span class="comment">//  callback(); // 当传入了回调函数 callback 就调用</span></span><br><span class="line">      <span class="comment">//&#125;</span></span><br><span class="line">      callback &amp;&amp; callback();</span><br><span class="line">    &#125;</span><br><span class="line">    obj.style.left = obj.offsetLeft + step + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  &#125;,<span class="number">15</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.轮播图</strong></p><ul><li>无缝滚轮连接，将第一张图片复制到最后一张，当到最后一张无动画跳到第一张，接着轮播</li><li>节流阀：</li></ul><blockquote><p>防止轮播图按钮连续点击造成播放过快。</p><p>节流阀目的：当上一个函数动画内容执行完毕，再去执行下一个函数动画，让事件无法连续触发。</p><p>核心实现思路：设置一个变量，锁住函数和解锁函数，利用动画的回调函数解锁</p></blockquote><p><strong>5.封装返回顶部动画</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">animate(<span class="built_in">window</span>,<span class="number">0</span>); <span class="comment">// 调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj,target,callback</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">clearInterval</span>(obj.timer);</span><br><span class="line">  obj.timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> step = (target - <span class="built_in">window</span>.pageYOffset) / <span class="number">10</span>;</span><br><span class="line">    step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.pageYOffset == target)&#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(obj.timer);</span><br><span class="line">      callback &amp;&amp; callback();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.scroll(<span class="number">0</span>,<span class="built_in">window</span>.pageYOffset + step);</span><br><span class="line">  &#125;,<span class="number">15</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移动端网页特效"><a href="#移动端网页特效" class="headerlink" title="移动端网页特效"></a>移动端网页特效</h3><p><strong>1. DOM触屏事件</strong></p><ul><li><code>touchstart</code> 触摸事件</li><li><code>touchmove</code> 触摸移动事件</li><li><code>touchend</code> 触摸离开事件</li></ul><p>当手机按压某块内容，先触发 <code>touchstart</code> ，如果不松手并移动就触发 <code>touchmove</code> ，松手就触发 <code>touchend</code></p><p><strong>2.触摸事件对象</strong></p><p>TouchEvent 是一类描述手指在触摸屏幕的状态变化的事件。这类事件描述一个或多个触点。</p><p><strong>常用触摸元素 targetTouches</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. touches  正在触摸屏幕手指的一个列表</span><br><span class="line">2. targetTouches  正在触摸当前 DOM 元素上的手指的一个列表</span><br><span class="line">3. changedTouches 手指状态发送了改变的列表，从无到有，从有到无的变化</span><br></pre></td></tr></table></figure><p><strong>3.移动端移动盒子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1) 触摸元素 touchstart 获取手指初始坐标，同时获得盒子原来的位置</span></span><br><span class="line"><span class="comment">// (2) 移动手指 touchmove  计算手指的滑动距离，并且移动盒子</span></span><br><span class="line"><span class="comment">// (3) 离开手指 touchend</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> startX = <span class="number">0</span>; <span class="comment">// 获取手指初始坐标</span></span><br><span class="line"><span class="keyword">var</span> startY = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;      <span class="comment">// 获得盒子原来的位置</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">0</span>;</span><br><span class="line">div.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 获取手指初始坐标</span></span><br><span class="line">  startX = e.targetTouches[<span class="number">0</span>].pageX;</span><br><span class="line">  startY = e.targetTouches[<span class="number">0</span>].pageY;</span><br><span class="line">  x = <span class="built_in">this</span>.offsetLeft;</span><br><span class="line">  y = <span class="built_in">this</span>.offsetTop;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">div.addEventListener(<span class="string">&#x27;touchmove&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 计算手指的移动距离：手指移动之后的坐标减去手指初始的坐标</span></span><br><span class="line">  <span class="keyword">var</span> moveX = e.targetTouches[<span class="number">0</span>].pageX - startX;</span><br><span class="line">  <span class="keyword">var</span> moveY = e.targetTouches[<span class="number">0</span>].pageY - startY;</span><br><span class="line">  <span class="comment">// 移动我们的盒子 盒子原来的位置 + 手指移动的距离</span></span><br><span class="line">  <span class="built_in">this</span>.style.left = x + moveX + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  <span class="built_in">this</span>.style.top = y + moveY + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  <span class="comment">// 手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动</span></span><br><span class="line">  e.preventDefault(); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>4.添加类名 classList</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;div class=&quot;one two&quot;&gt;&lt;/div&gt; 追加类名</span></span><br><span class="line">element.classList.add(<span class="string">&#x27;newClass&#x27;</span>);</span><br><span class="line"><span class="comment">// 添加后 class=&quot;one two newClass&quot;</span></span><br></pre></td></tr></table></figure><p><strong>移动类名</strong></p><p><code>element.classList.remove(&#39;one&#39;)</code></p><p><strong>切换类，有就删除，没有就添加</strong></p><p><code>element.classList.toggle(&#39;bg&#39;)</code></p><h2 id="本地存储WebStorage"><a href="#本地存储WebStorage" class="headerlink" title="本地存储WebStorage"></a>本地存储WebStorage</h2><p><strong>本地存储特性</strong></p><ol><li><p>数据存储在用户浏览器中</p></li><li><p>设置、读取方便、甚至页面刷新不丢失数据</p></li><li><p>容量较大，<code>sessionStorage 约5M</code>、<code>localStorage 约20M</code></p></li><li><p>只能存储字符串，可以将对象 <code>JSON.stringify()</code> 编码后存储</p><p>通过<code>JSON.parse()</code>解析</p></li></ol><p><strong>1.window.sessionStorage</strong></p><ul><li>生命周期为关闭浏览器</li><li>在用一个窗口下数据可以共享</li><li>以键值对的形式存储使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储数据</span></span><br><span class="line">sessionStorage.setItem(key,value)</span><br><span class="line"><span class="comment">// 获取数据</span></span><br><span class="line">sessionStorage.getItem(key)</span><br><span class="line"><span class="comment">// 移除数据</span></span><br><span class="line">sessionStorage.removeItem(key)</span><br><span class="line"><span class="comment">// 清除所有的数据</span></span><br><span class="line">sessionStorage.clear()</span><br></pre></td></tr></table></figure><p><strong>2.window.localStorage</strong></p><ul><li>生命周期永久生效，除非手动删除 否则关闭页面也会存在</li><li>可以多窗口共享（同浏览器可以共享）</li><li>以键值对的形式存储</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储数据</span></span><br><span class="line"><span class="built_in">localStorage</span>.setItem(key,value)</span><br><span class="line"><span class="comment">// 获取数据</span></span><br><span class="line"><span class="built_in">localStorage</span>.getItem(key)</span><br><span class="line"><span class="comment">// 移除数据</span></span><br><span class="line"><span class="built_in">localStorage</span>.removeItem(key)</span><br><span class="line"><span class="comment">// 清除所有的数据</span></span><br><span class="line"><span class="built_in">localStorage</span>.clear()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> JS </category>
          
          <category> DOM操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> DOM操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fira Code | 为写程序而生的字体</title>
      <link href="2021/09/19/install_fira_code/"/>
      <url>2021/09/19/install_fira_code/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>安装 Fira Code 编程字体</p></blockquote><p><strong>Github</strong>：<a href="https://github.com/tonsky/FiraCode/releases">https://github.com/tonsky/FiraCode/releases</a></p><p><strong>Gitee</strong>：<a href="https://gitee.com/lovehuating/tool/blob/master/Fira_Code_v5.2_2.zip">https://gitee.com/lovehuating/tool/blob/master/Fira_Code_v5.2_2.zip</a></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210919111021.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210919111057.png"></p><p>安装这些 <code>.ttf</code> 后缀的文件</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>打开vscode编辑器，左上角 <code>文件 &gt; 首选项 &gt; 设置</code></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210919111407.png"></p><p>点击 <code>setting.json</code> 编辑</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210919111443.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;editor.fontLigatures&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;editor.fontFamily&quot;</span>: <span class="string">&quot;&#x27;Fira Code&#x27;, Consolas, &#x27;Courier New&#x27;, monospace&quot;</span></span><br></pre></td></tr></table></figure><p>默认 <code>editor.fontLigatures</code> 是 false，改为 true</p><p>然后添加字体选择</p><p><code>&quot;editor.fontFamily&quot;: &quot;&#39;Fira Code&#39;, Consolas, &#39;Courier New&#39;, monospace&quot;</code></p><p><strong>PS：可以你设置了没有生效字体，你可以重启一下电脑，重启能解决99%的问题</strong></p>]]></content>
      
      
      <categories>
          
          <category> 仓库 </category>
          
          <category> 字体 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code </tag>
            
            <tag> 编程字体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP</title>
      <link href="2021/09/15/Http_Serve/"/>
      <url>2021/09/15/Http_Serve/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。</p><p>HTTP状态码的英文为HTTP Status Code。</p><p>下面是常见的HTTP状态码：</p><ul><li>200 - 请求成功</li><li>301 - 资源（网页等）被永久转移到其它URL</li><li>404 - 请求的资源（网页等）不存在</li><li>500 - 内部服务器错误</li></ul><h3 id="HTTP状态码分类"><a href="#HTTP状态码分类" class="headerlink" title="HTTP状态码分类"></a>HTTP状态码分类</h3><p>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型：</p><table><thead><tr><th align="left">分类</th><th align="left">分类描述</th></tr></thead><tbody><tr><td align="left">1**</td><td align="left">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td align="left">2**</td><td align="left">成功，操作被成功接收并处理</td></tr><tr><td align="left">3**</td><td align="left">重定向，需要进一步的操作以完成请求</td></tr><tr><td align="left">4**</td><td align="left">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td align="left">5**</td><td align="left">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><h3 id="HTTP状态码列表"><a href="#HTTP状态码列表" class="headerlink" title="HTTP状态码列表:"></a>HTTP状态码列表:</h3><table><thead><tr><th align="left">状态码</th><th align="left">英文名称</th><th align="left">中文描述</th></tr></thead><tbody><tr><td align="left">100</td><td align="left">Continue</td><td align="left">继续。客户端应继续其请求</td></tr><tr><td align="left">101</td><td align="left">Switching Protocols</td><td align="left">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">200</td><td align="left">OK</td><td align="left"><cst class="green">请求成功。一般用于GET与POST请求</cst></td></tr><tr><td align="left">201</td><td align="left">Created</td><td align="left">已创建。成功请求并创建了新的资源</td></tr><tr><td align="left">202</td><td align="left">Accepted</td><td align="left">已接受。已经接受请求，但未处理完成</td></tr><tr><td align="left">203</td><td align="left">Non-Authoritative Information</td><td align="left">非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td align="left">204</td><td align="left">No Content</td><td align="left">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td align="left">205</td><td align="left">Reset Content</td><td align="left">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td align="left">206</td><td align="left">Partial Content</td><td align="left">部分内容。服务器成功处理了部分GET请求</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">300</td><td align="left">Multiple Choices</td><td align="left">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td align="left">301</td><td align="left">Moved Permanently</td><td align="left">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td align="left">302</td><td align="left">Found</td><td align="left">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td align="left">303</td><td align="left">See Other</td><td align="left">查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td align="left">304</td><td align="left">Not Modified</td><td align="left">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td align="left">305</td><td align="left">Use Proxy</td><td align="left">使用代理。所请求的资源必须通过代理访问</td></tr><tr><td align="left">306</td><td align="left">Unused</td><td align="left"><b class="red">已经被废弃的HTTP状态码</b></td></tr><tr><td align="left">307</td><td align="left">Temporary Redirect</td><td align="left">临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">400</td><td align="left">Bad Request</td><td align="left">客户端请求的语法错误，服务器无法理解</td></tr><tr><td align="left">401</td><td align="left">Unauthorized</td><td align="left">请求要求用户的身份认证</td></tr><tr><td align="left">402</td><td align="left">Payment Required</td><td align="left">保留，将来使用</td></tr><tr><td align="left">403</td><td align="left">Forbidden</td><td align="left">服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td align="left">404</td><td align="left">Not Found</td><td align="left"><cst class="red">服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</cst></td></tr><tr><td align="left">405</td><td align="left">Method Not Allowed</td><td align="left">客户端请求中的方法被禁止</td></tr><tr><td align="left">406</td><td align="left">Not Acceptable</td><td align="left">服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td align="left">407</td><td align="left">Proxy Authentication Required</td><td align="left">请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td align="left">408</td><td align="left">Request Time-out</td><td align="left">服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td align="left">409</td><td align="left">Conflict</td><td align="left">服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td align="left">410</td><td align="left">Gone</td><td align="left">客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td align="left">411</td><td align="left">Length Required</td><td align="left">服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td align="left">412</td><td align="left">Precondition Failed</td><td align="left">客户端请求信息的先决条件错误</td></tr><tr><td align="left">413</td><td align="left">Request Entity Too Large</td><td align="left">由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td align="left">414</td><td align="left">Request-URI Too Large</td><td align="left">请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td align="left">415</td><td align="left">Unsupported Media Type</td><td align="left">服务器无法处理请求附带的媒体格式</td></tr><tr><td align="left">416</td><td align="left">Requested range not satisfiable</td><td align="left">客户端请求的范围无效</td></tr><tr><td align="left">417</td><td align="left">Expectation Failed</td><td align="left">服务器无法满足Expect的请求头信息</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">500</td><td align="left">Internal Server Error</td><td align="left">服务器内部错误，无法完成请求</td></tr><tr><td align="left">501</td><td align="left">Not Implemented</td><td align="left">服务器不支持请求的功能，无法完成请求</td></tr><tr><td align="left">502</td><td align="left">Bad Gateway</td><td align="left">作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td align="left">503</td><td align="left">Service Unavailable</td><td align="left">由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td align="left">504</td><td align="left">Gateway Time-out</td><td align="left">充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td align="left">505</td><td align="left">HTTP Version not supported</td><td align="left">服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table><blockquote><p><a href="https://www.runoob.com/http/http-status-codes.html">菜鸟驿站 HTTP 教程</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http </tag>
            
            <tag> 状态码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS学习笔记</title>
      <link href="2021/09/14/nodejs_note/"/>
      <url>2021/09/14/nodejs_note/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Node-js-介绍"><a href="#Node-js-介绍" class="headerlink" title="Node.js 介绍"></a>Node.js 介绍</h2><h3 id="node-js-是什么？"><a href="#node-js-是什么？" class="headerlink" title="node.js 是什么？"></a>node.js 是什么？</h3><ol><li>node.js 是一个开发平台，就像Java开发平台、.Net开发平台、PHP开发平台、Apple开发平台一样。</li></ol><ul><li>何为开发平台？有对应的编程语言、有语言运行时、有能实现特定功能的API（SDK：Software Development Kit）</li></ul><ol start="2"><li>该平台使用的编程语言是 JavaScript 语言。 </li><li>node.js 平台是基于 Chrome V8 JavaScript 引擎构建。</li><li>基于 node.js 可以开发控制台程序（命令行程序、CLI程序）、桌面应用程序（GUI）（借助 node-webkit、electron 等框架实现）、Web 应用程序（网站）</li></ol><p>PHP开发技术栈: LAMP - Linux Apache MySQL PHP</p><p>node.js 全栈开发技术栈: MEAN - MongoDB Express Angular Node.js</p><h3 id="node-js-有哪些特点？"><a href="#node-js-有哪些特点？" class="headerlink" title="node.js 有哪些特点？"></a>node.js 有哪些特点？</h3><ol><li>事件驱动(当事件被触发时，执行传递过去的回调函数)</li><li>非阻塞 I/O 模型（当执行I/O操作时，不会阻塞线程）</li><li>单线程</li><li>拥有世界最大的开源库生态系统 —— npm。</li></ol><h3 id="node-js-网站"><a href="#node-js-网站" class="headerlink" title="node.js 网站"></a>node.js 网站</h3><ol><li><a href="https://nodejs.org/">node.js官方网站</a></li><li><a href="http://nodejs.cn/">node.js中文网</a></li><li><a href="https://cnodejs.org/">node.js 中文社区</a></li></ol><h3 id="为什么要学习Node-js"><a href="#为什么要学习Node-js" class="headerlink" title="为什么要学习Node.js?"></a>为什么要学习Node.js?</h3><ol><li>通过学习Node.js开发深入理解<strong>服务器开发</strong>、<strong>Web请求和响应过程</strong>、 <strong>了解服务器端如何与客户端配合</strong></li><li>学习服务器端渲染</li><li>学习服务器端为客户端编写接口</li><li>现在前端工程师面试，对 Node.js 开发有要求</li><li>补充提问：</li></ol><ul><li>在Node.js平台开发时，能使用Dom API吗？比如：<code>document.getElementById(&#39;id&#39;); window.location 等</code>?</li></ul><ol start="6"><li>复习 浏览器端 JavaScript 组成：ECMAscript、Dom、Bom</li></ol><h3 id="Node-js安装和配置"><a href="#Node-js安装和配置" class="headerlink" title="Node.js安装和配置"></a>Node.js安装和配置</h3><ol><li>下载地址</li></ol><ul><li><a href="https://nodejs.org/en/download/">当前版本</a></li><li><a href="https://nodejs.org/en/download/releases/">历史版本</a></li></ul><ol start="2"><li>官网术语解释</li></ol><ul><li>LTS 版本：Long-term Support 版本，长期支持版，即稳定版。</li><li>Current 版本：Latest Features 版本，最新版本，新特性会在该版本中最先加入。</li></ul><ol start="3"><li>注意：</li></ol><ul><li>安装完毕后通过命令：<code>node -v</code>来确定是否安装成功【注意：打开”命令窗口”的时候建议使用”管理员方式”打开】</li><li>如果需要则配置环境变量。</li></ul><hr><h3 id="nvm-管理node版本"><a href="#nvm-管理node版本" class="headerlink" title="nvm 管理node版本"></a>nvm 管理node版本</h3><p>nvm (Linux、Unix、OS X)</p><ul><li><a href="https://github.com/creationix/nvm">https://github.com/creationix/nvm</a></li><li>常用命令：<ul><li>nvm install node （安装最新版本的node）</li><li>nvm use node （使用指定版本的node）</li></ul></li></ul><p>nvm-windows (Windows)</p><ul><li><p><a href="https://github.com/coreybutler/nvm-windows">https://github.com/coreybutler/nvm-windows</a></p></li><li><p>常用命令：</p><ul><li>nvm version</li><li>nvm install latest</li><li><code>nvm install</code> 版本号</li><li><code>nvm uninstall</code> 版本号</li><li>nvm list</li><li>nvm use 版本号</li></ul><p><cst>在安装 node 环境前，先安装 nvm ，通过 nvm 安装node，可以管理 node。因为你可能会想使用多个版本的 node</cst></p></li></ul><h3 id="node代码简单操作文件"><a href="#node代码简单操作文件" class="headerlink" title="node代码简单操作文件"></a>node代码简单操作文件</h3><p>在使用 node api 查询文档</p><p><a href="http://nodejs.cn/api/fs.html#fs_fs_mkdir_path_options_callback">Node 中文网</a>  <a href="https://nodejs.org/api/">Node 英文网</a></p><ol><li><strong>读写操作</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载 fs 模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line">fs.readFile(<span class="string">&#x27;./test.txt&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 如果读取成功,err为null. 如果读取失败,err有内容</span></span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="comment">// 读取失败</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 读取成功</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件写入操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">&#x27;Hello China. 你好，中国。&#x27;</span>;</span><br><span class="line">fs.writeFile(<span class="string">&#x27;./test.txt&#x27;</span>, msg, <span class="string">&#x27;utf8&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;文件写入失败，详细错误信息：&#x27;</span> + err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;文件写入成功。&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210915001458.png" alt="文档writefile"></p><ol start="2"><li>创建文件夹:<code>mkdir</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// 当前文件路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mkdirname = [<span class="string">&#x27;资料代码&#x27;</span>,<span class="string">&#x27;课程代码&#x27;</span>,<span class="string">&#x27;ppt演示&#x27;</span>,<span class="string">&#x27;图片演示&#x27;</span>]</span><br><span class="line"></span><br><span class="line">mkdirname.forEach(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dirname = path.join(__dirname,i)</span><br><span class="line">  fs.mkdir(dirname,<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;目前创建失败:&#x27;</span>+err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;创建成功&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="获取路径-amp-拼接路径"><a href="#获取路径-amp-拼接路径" class="headerlink" title="获取路径 &amp; 拼接路径"></a>获取路径 &amp; 拼接路径</h3><ol><li><strong>在读取文件等操作,如果自己写路径,在不同的操作系统,路径不一样,因此直接通过全局获取,就很便捷</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node 定义了一些全局的方法,例如 __dirname,__filename</span></span><br><span class="line"><span class="built_in">console</span>.log(__dirname) <span class="comment">// 打印当前文件所在的路径下</span></span><br><span class="line"><span class="built_in">console</span>.log(__filename) <span class="comment">// 打印该文件的路径</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>拼接路径的方法,需要先导入模块</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// path 下有一个方法 join 用来拼接</span></span><br><span class="line"><span class="keyword">var</span> currentfilepath = path.join(__dirname,<span class="string">&#x27;public&#x27;</span>)</span><br><span class="line"><span class="comment">// 这样就可以获取当前 public 的目录,一些静态资源都可以放里面</span></span><br></pre></td></tr></table></figure><ol start="3"><li>**<code>__dirname</code> <code>__filename</code> 并不是全局的 **</li></ol><p>在执行 node app.js 这个文件时,会传入两个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包的形式</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">__dirname,__filename</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//代码体</span></span><br><span class="line">&#125;)(路径,文件路径)</span><br><span class="line"><span class="comment">// 因此我们可以使用这两个并不是全局属性的值</span></span><br></pre></td></tr></table></figure><h3 id="REPL介绍"><a href="#REPL介绍" class="headerlink" title="REPL介绍"></a>REPL介绍</h3><ol><li>REPL 全称: Read-Eval-Print-Loop（交互式解释器）</li></ol><ul><li>R 读取 - 读取用户输入，解析输入了Javascript 数据结构并存储在内存中。</li><li>E 执行 - 执行输入的数据结构</li><li>P 打印 - 输出结果</li><li>L 循环 - 循环操作以上步骤直到用户两次按下 ctrl-c 按钮退出。</li></ul><ol start="2"><li>在REPL中编写程序 （类似于浏览器开发人员工具中的控制台功能）</li></ol><ul><li>直接在控制台输入 <code>node</code> 命令进入 REPL 环境</li></ul><ol start="3"><li>按两次 Control + C 退出REPL界面 或者 输入 <code>.exit</code> 退出 REPL 界面</li></ol><ul><li>按住 control 键不要放开, 然后按两下 c 键</li></ul><h3 id="最简单的-http-服务程序"><a href="#最简单的-http-服务程序" class="headerlink" title="最简单的 http 服务程序"></a>最简单的 http 服务程序</h3><ol><li><strong>简单的请求服务</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 http 模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line"><span class="keyword">var</span> app = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">requset,respont</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;在访问...&#x27;</span>)</span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">  res.write(<span class="string">&#x27;哈哈哈 &lt;h1&gt;hello&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">  res.write(<span class="string">&#x27;&lt;strong&gt;你好 Node.js&lt;/strong&gt;&#x27;</span>);</span><br><span class="line">  res.end(); <span class="comment">// 结束请求</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.listen(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动:http://localhost:8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>根据不同的路径,访问不同的页面</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs   = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 2. 定义方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">readData</span>(<span class="params">pathfile</span>)</span>&#123;</span><br><span class="line">    fs.readFile(path.join(__dirname,<span class="string">&#x27;htmls&#x27;</span>,pathfile),<span class="function">(<span class="params">err,data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 把读取的数据，发送给浏览器解析</span></span><br><span class="line">      <span class="comment">// data的是字节，buffer类型，end里面可以传入buffer类型</span></span><br><span class="line">      res.end(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 3. 判断路径</span></span><br><span class="line">  <span class="keyword">if</span>(req.url === <span class="string">&#x27;/&#x27;</span> || req.url === <span class="string">&#x27;/index&#x27;</span>) &#123;</span><br><span class="line">    readData(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(req.url === <span class="string">&#x27;/login&#x27;</span>)&#123;</span><br><span class="line">    readData(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(req.url === <span class="string">&#x27;/list&#x27;</span>)&#123;</span><br><span class="line">    readData(<span class="string">&#x27;list.html&#x27;</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(req.url === <span class="string">&#x27;/register&#x27;</span>)&#123;</span><br><span class="line">    readData(<span class="string">&#x27;register.html&#x27;</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 404 </span></span><br><span class="line">    readData(<span class="string">&#x27;nofound.html&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;).listen(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;http://localhost:8080&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>使用 <code>mime </code>第三方库,来获取文件类型</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入 http</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> path  = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> fs   = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> mime = <span class="built_in">require</span>(<span class="string">&#x27;mime&#x27;</span>)</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 2. 获取当前路径</span></span><br><span class="line">  <span class="keyword">var</span> publicDir = path.join(__dirname,<span class="string">&#x27;public&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> filename  = path.join(publicDir,req.url)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 3. 判断一下,当前路径 localhost/ 或者 localhost/index</span></span><br><span class="line">  <span class="keyword">if</span>(req.url === <span class="string">&#x27;/&#x27;</span> || req.url === <span class="string">&#x27;/index&#x27;</span>)&#123;</span><br><span class="line">    filename = path.join(publicDir,<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4. 读取文件</span></span><br><span class="line">  fs.readFile(filename,<span class="function">(<span class="params">err,data</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">      res.end(<span class="string">&#x27;文件不存在&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">// 5. 设置读取文件类型，使用第三方模块 mime</span></span><br><span class="line">      res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>,mime.getType(filename))</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 6. 返回数据data</span></span><br><span class="line">      res.end(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">9080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;http://localhost:9080&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="Buffer-类型"><a href="#Buffer-类型" class="headerlink" title="Buffer 类型"></a>Buffer 类型</h3><p><strong>一. 类型介绍</strong></p><ol><li>JavaScript 语言没有读取或操作二进制数据流的机制。</li><li>Node.js 中引入了 Buffer 类型使我们可以操作 TCP流 或 文件流。</li><li>Buffer 类型的对象类似于整数数组，但 Buffer 的大小是固定的、且在 V8 堆外分配物理内存。 Buffer 的大小在被创建时确定，且无法调整。（ buf.length 是固定的，不允许修改 ）</li><li>Buffer 是全局的，所以使用的时候无需 require() 的方式来加载</li></ol><p><strong>二. 如何创建一个 Buffer 对象</strong></p><p>常见的 API 介绍</p><ol><li>创建一个 Buffer 对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 通过 Buffer.from() 创建一个 Buffer 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.1 通过一个字节数组来创建一个 Buffer 对象</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">0x68</span>, <span class="number">0x65</span>, <span class="number">0x6c</span>, <span class="number">0x6c</span>, <span class="number">0x6f</span>, <span class="number">0x20</span>, <span class="number">0xe4</span>, <span class="number">0xb8</span>, <span class="number">0x96</span>, <span class="number">0xe7</span>, <span class="number">0x95</span>, <span class="number">0x8c</span>];</span><br><span class="line"><span class="keyword">var</span> buf = Buffer.from(array);</span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">&#x27;utf8&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.2 通过字符串来创建一个 Buffer 对象</span></span><br><span class="line"><span class="comment">// Buffer.from(string[, encoding])</span></span><br><span class="line"><span class="keyword">var</span> buf = Buffer.from(<span class="string">&#x27;你好世界！ Hello World!~&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf);</span><br><span class="line"><span class="built_in">console</span>.log(buf.toString());</span><br></pre></td></tr></table></figure><ol start="2"><li>拼接多个 Buffer 对象为一个对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Buffer.concat(list[, totalLength])</span></span><br><span class="line"><span class="keyword">var</span> bufferList = [];</span><br><span class="line"><span class="keyword">var</span> buf = Buffer.concat(bufferList);</span><br></pre></td></tr></table></figure><ol start="3"><li>获取字符串对应的字节个数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Buffer.byteLength(string[, encoding])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> len = Buffer.byteLength(<span class="string">&#x27;你好世界Hello&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(len);</span><br></pre></td></tr></table></figure><ol start="4"><li>判断一个对象是否是 Buffer 类型对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Buffer.isBuffer(obj)</span></span><br><span class="line"><span class="comment">// obj &lt;Object&gt;</span></span><br><span class="line"><span class="comment">// Returns: &lt;boolean&gt;</span></span><br><span class="line"><span class="comment">// Returns true if obj is a Buffer, false otherwise.</span></span><br></pre></td></tr></table></figure><ol start="5"><li>获取 Buffer 中的某个字节</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据索引获取 Buffer 中的某个字节（byte、octet）</span></span><br><span class="line"><span class="comment">// buf[index]</span></span><br></pre></td></tr></table></figure><ol start="6"><li>获取 Buffer 对象中的字节的个数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// buf.length</span></span><br><span class="line"><span class="comment">// 注意：length 属性不可修改</span></span><br></pre></td></tr></table></figure><ol start="7"><li>已过时的 API</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下 API 已全部过时</span></span><br><span class="line"><span class="keyword">new</span> Buffer(array)</span><br><span class="line"><span class="keyword">new</span> Buffer(buffer)</span><br><span class="line"><span class="keyword">new</span> Buffer(arrayBuffer[, byteOffset [, length]])</span><br><span class="line"><span class="keyword">new</span> Buffer(size)</span><br><span class="line"><span class="keyword">new</span> Buffer(string[, encoding])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>三. Buffer 对象与编码</strong></p><p>Node.js 目前支持的编码如下：</p><ol><li>ascii</li><li>utf8</li><li>utf16le</li></ol><ul><li>ucs2 是 utf16le 的别名 </li></ul><ol start="4"><li>base64</li><li>latin1</li></ol><ul><li>binary 是 latin1 的别名</li></ul><ol start="6"><li>hex</li></ol><ul><li>用两位 16 进制来表示每个字节</li></ul><p>示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf = Buffer.from(<span class="string">&#x27;你好世界，Hello World！&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">&#x27;hex&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">&#x27;base64&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">&#x27;utf8&#x27;</span>));</span><br></pre></td></tr></table></figure><p><strong>四、思考：为什么会有 Buffer 类型？</strong></p><ol><li>Buffer 使用来临时存储一些数据（二进制数据）</li><li>当我们要把一大块数据从一个地方传输到另外一个地方的时候可以通过 Buffer 对象进行传输</li><li>通过 Buffer 每次可以传输小部分数据，直到所有数据都传输完毕。</li></ol><p><strong>五、补充</strong></p><ol><li><p>Stream</p></li><li><p>Writable Stream</p></li></ol><ul><li>允许 node.js 写数据到流中</li></ul><ol start="3"><li>Readable Stream</li></ol><ul><li>允许 node.js 从流中读取数据</li></ul><p><br><hr></p><h2 id="Node-服务端-HTTP"><a href="#Node-服务端-HTTP" class="headerlink" title="Node 服务端 HTTP"></a>Node 服务端 HTTP</h2><h3 id="模拟Apache服务器"><a href="#模拟Apache服务器" class="headerlink" title="模拟Apache服务器"></a>模拟Apache服务器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载 mime 模块，该模块作用就是根据用户请求的资源的后缀名，返回对应的 content-type 类型 mime 类型</span></span><br><span class="line"><span class="keyword">var</span> mime = <span class="built_in">require</span>(<span class="string">&#x27;mime&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 读取磁盘上的静态资源文件</span></span><br><span class="line">  fs.readFile(path.join(__dirname, <span class="string">&#x27;public&#x27;</span>, req.url), <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (err &amp;&amp; err.code === <span class="string">&#x27;ENOENT&#x27;</span>) &#123;</span><br><span class="line">      res.end(<span class="string">&#x27;404, not found.&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(mime.lookup(req.url));</span><br><span class="line">    <span class="comment">// 把读取到的内容返回给用户</span></span><br><span class="line">    res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, mime.lookup(req.url));</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">9002</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;http://localhost:9002&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="setHeader-amp-writeHead-区别"><a href="#setHeader-amp-writeHead-区别" class="headerlink" title="setHeader &amp; writeHead 区别"></a>setHeader &amp; writeHead 区别</h3><ol><li><strong>response.writeHead(statusCode [, statusMessage] [, headers])</strong></li></ol><p>发送一个响应头给请求。 状态码是一个三位数的 HTTP 状态码，如 <code>404</code>。 最后一个参数 <code>headers</code> 是响应头。 第二个参数 <code>statusMessage</code> 是可选的状态描述。</p><p>该方法在消息中只能被调用一次，且必须在 <code>response.end()</code> 被调用之前调用。</p><p><code>response.setHeader()</code>设置的响应头会与 <code>response.writeHead()</code> 设置的响应头合并，且 <code>response.writeHead()</code> 的优先。</p><ol start="2"><li><strong>request.setHeader(name, value)</strong></li></ol><p>为 headers 对象设置一个单一的 header 值。如果该 header 已经存在了，则将会被替换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求静态资源，不同的后缀需要使用相应的报文头</span></span><br><span class="line"><span class="comment">// 导入 mime 框架，去根据请求文件后缀，获取相应的报文头</span></span><br><span class="line"><span class="keyword">var</span> mime = <span class="built_in">require</span>(<span class="string">&#x27;mime&#x27;</span>)</span><br><span class="line">res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>,mime.getType(req.url))</span><br><span class="line"><span class="comment">// 使用 setHeader 发送给服务器报文头</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210915163235.png"></p><h3 id="Modules和Packages区别"><a href="#Modules和Packages区别" class="headerlink" title="Modules和Packages区别"></a>Modules和Packages区别</h3><ol><li>A <strong>module</strong> is any file or directory that can be loaded by Node.js’ <code>require()</code>. </li></ol><ul><li>模块可以是任何一个文件或目录（目录下可以有很多个文件），只要能被node.js通过require()即可。</li></ul><ol start="2"><li>A <strong>package</strong> is a file or directory that is described by a <code>package.json</code>. This can happen in a bunch of different ways!</li></ol><ul><li>包是一个文件或目录（目录下可以有多个文件）必须有一个package.json文件来描述，就可以是一个包。</li></ul><p><cst>node.js 错误调试：</cst></p><ol><li><p>当开启服务后，在浏览器中输入地址，如果出现浏览问题，首先要先看 服务器控制台是否报错。如果报错，直接根据服务器报错进行排错。</p></li><li><p>打开浏览器开发者工具中的 “网络” 部分，查看请求是否成功发出去了</p></li></ol><ul><li>看一下请求报文是不是和我们想的一样</li><li>响应状态码</li></ul><h3 id="npm-介绍"><a href="#npm-介绍" class="headerlink" title="npm 介绍"></a>npm 介绍</h3><ul><li>npm（全称Node Package Manager，即node包管理器）是Node.js默认的、以JavaScript编写的软件包管理系统。</li><li><a href="https://www.npmjs.com/">npm 官方网站</a></li><li><a href="https://docs.npmjs.com/">npm 官方文档</a></li></ul><ol><li><strong>npm 和 node.js</strong></li></ol><ul><li>npm是Node.js默认的软件包管理系统。安装完毕node后，会默认安装好npm</li><li>npm本身也是基于Node.js开发的包（软件）</li></ul><ol start="2"><li><p><strong>NPM 使用</strong></p></li><li><p>在 <a href="https://www.npmjs.com/">https://www.npmjs.com/</a> 网站找到需要的包</p></li><li><p>在项目的根目录下，执行<code>npm install 包名称</code>安装</p></li><li><p>在node.js代码中通过 <code>require(&#39;包名&#39;);</code> 加载该模块</p></li><li><p>注意：通过<code>npm install 包名</code>安装的包，会自动下载到当前目录下的<code>node_modules</code>目录下，如果该目录不存在，则创建，如果已存在则直接下载进去。</p></li><li><p>在代码中通过 <code>require(&#39;包名&#39;);</code> 加载该模块</p></li></ol><p><cst>上面说的这种方式叫做 本地安装。</cst></p><ol start="3"><li><p><strong>npm常用命令介绍</strong></p></li><li><p>install，安装包。<code>npm install 包名</code></p></li><li><p>uninstall，卸载包。·npm uninstall 包名`</p></li><li><p>version，查看当前npm版本。<code>npm version</code> 或 <code>npm -v</code></p></li><li><p>init，创建一个package.json文件。<code>npm init</code></p></li><li><p>注意：当使用 <code>npm init -y</code>  的时候，如果当前文件夹（目录）的名字比较怪（有大写、有中文等等）就会影响npm init -y 的一步生成操作，此时需要 npm init 根据向导来生成</p></li></ol><h3 id="request-对象-和-response对象"><a href="#request-对象-和-response对象" class="headerlink" title="request 对象 和 response对象"></a>request 对象 和 response对象</h3><p><strong>request 对象</strong></p><ul><li><p>request 对象类型 &lt;http.IncomingMessage&gt;, 继承自stream.Readable</p></li><li><p>request 对象常用成员</p><ul><li><code>request.headers</code></li><li><code>request.rawHeaders</code></li><li><code>request.httpVersion</code></li><li><code>request.method</code></li><li><code>request.url</code></li></ul></li></ul><p><strong>response 对象</strong></p><ul><li><p>response 对象类型 &lt;http.ServerResponse&gt;</p></li><li><p>response 对象常用成员</p><ul><li><p><code>response.writeHead(statusCode[, statusMessage][, headers])</code></p><ol><li>This method must only be called once on a message and it must be called before response.end() is called.</li></ol><ul><li>这个方法在每次请求响应前都必须被调用（只能调用一次）。并且必须在end()方法调用前调用</li></ul></li></ul></li></ul><pre><code>2. If you call response.write() or response.end() before calling this, the implicit/mutable headers will be calculated and call this function for you.- 如果在调用writeHead()方法之前调用了write() 或 end()方法，系统会自动帮你调用writeHead()方法，并且会生成默认的响应头3. When headers have been set with response.setHeader(), they will be merged with any headers passed to response.writeHead(), with the headers passed to response.writeHead() given precedence.- 如果通过 res.setHeader() 也设置了响应头，那么系统会将serHeader()设置的响应头和writeHead()设置的响应头合并。 并且writeHead()的设置优先</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例代码：</span></span><br><span class="line">res.writeHead(<span class="number">200</span>, <span class="string">&#x27;OK&#x27;</span>, &#123;</span><br><span class="line">  <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Content-Length&#x27;</span>: Buffer.byteLength(msg)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><code>response.write(chunk[, encoding][, callback])</code></p><ul><li>参数1：要写入的数据，可以是字符串或二进制数据，<strong>必填</strong>。</li><li>参数2：编码，默认是utf8，选填。</li><li>参数3：回调函数，选填。</li></ul></li><li><p><code>response.end([data][, encoding][, callback])</code></p><ul><li>结束响应。</li><li>This method signals to the server that all of the response headers and body have been sent; that server should consider this message complete. <em><strong>The method, <code>response.end()</code>, MUST be called on each response</strong></em>.</li></ul><ul><li>res.end()这个方法告诉服务器所有要发送的响应头和响应体都发送完毕了。可以人为这次响应结束了。</li><li>同时每次响应都必须调用该方法，用来结束响应</li></ul></li></ul><pre><code>* 参数1：结束响应前要发送的数据，选填。* 参数2：编码，选填。* 参数3：回调函数，选填。</code></pre><ul><li><p><code>response.setHeader(name, value)</code></p><ul><li>设置响应报文头</li></ul></li><li><p><code>response.statusCode</code></p><ul><li>设置或读取http响应码</li></ul></li><li><p><code>response.statusMessage</code></p><ul><li>设置或读取http响应状态消息</li></ul></li></ul><hr><h2 id="Node-初建服务器-HackerNews"><a href="#Node-初建服务器-HackerNews" class="headerlink" title="Node 初建服务器 HackerNews"></a>Node 初建服务器 HackerNews</h2><p><a href="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//hackernews.rar">HackerNews 源码</a>，可以下载下来分析源码</p><h3 id="封装文件读取方法，挂载res的protype上"><a href="#封装文件读取方法，挂载res的protype上" class="headerlink" title="封装文件读取方法，挂载res的protype上"></a>封装文件读取方法，挂载res的protype上</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装读取方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">filename,res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// filename是读取文件的路径</span></span><br><span class="line">  fs.readFile(filename,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      res.writeHead(<span class="number">404</span>,<span class="string">&#x27;Not Found&#x27;</span>,&#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;text/html;charset=utf-8&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>,mime.getType(filename))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装</span></span><br><span class="line">res.render = <span class="function"><span class="keyword">function</span>(<span class="params">filename</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 不需要传入 res 对象，可以直接用</span></span><br><span class="line">  fs.readFile(filename,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      res.writeHead(<span class="number">404</span>,<span class="string">&#x27;Not Found&#x27;</span>,&#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;text/html;charset=utf-8&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>,mime.getType(filename))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Get请求数据，保存数据到data-json"><a href="#Get请求数据，保存数据到data-json" class="headerlink" title="Get请求数据，保存数据到data.json"></a>Get请求数据，保存数据到data.json</h3><blockquote><p>在启动服务时，需要提前创建好 data 文件夹，writeFile 不会去创建文件夹。服务器重新启动，会重新创建 data.json 文件，会覆盖原来的。</p><p>用定义的数组去存放对象，将数组通过 JSON.stringify() 转化成string类型</p><p>数组list会覆盖，因此不是每次是定义，而是去读取data.json文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="comment">// 4. 拼接路径 path 模块</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 导入 fs 模块，去写入数据</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> list = []; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 加载 node 内置的 url 模块</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.在from表单下，请求地址：action=&#x27;/add&#x27;，请求方式 method=&quot;get&quot;</span></span><br><span class="line">    <span class="comment">// app.js 去获取请求的数据</span></span><br><span class="line">    <span class="comment">// 伪代码</span></span><br><span class="line">    <span class="comment">//if(req.url === &#x27;/add&#x27; &amp;&amp; req.method === &#x27;get&#x27;)   //请求的路径会携带参数，因此路径不会等于 /add</span></span><br><span class="line">    <span class="comment">// 使用 startsWith 去截取 &#x27;/add&#x27; 存在返回 true</span></span><br><span class="line">    <span class="keyword">if</span> (req.url.startsWith(<span class="string">&#x27;/add&#x27;</span>) &amp;&amp; req.method === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// req.url 可以获取一条包含数据的字符串，通过 url 模块可以解析出来</span></span><br><span class="line">      <span class="keyword">var</span> urlObj = url.parse(req.url, <span class="literal">true</span>); <span class="comment">// 数据就是query，但是仍然是字符串，加上第二个参数 true，就解析成对象</span></span><br><span class="line">      <span class="comment">// 数据保存到数组里面</span></span><br><span class="line">      list.push(urlObj.query);</span><br><span class="line">      <span class="comment">//把list 写入 data.json 文件</span></span><br><span class="line">      <span class="comment">// writeFile 写入的数据类型是 string || buffer</span></span><br><span class="line">      <span class="built_in">console</span>.log(urlObj);</span><br><span class="line">      fs.writeFile(</span><br><span class="line">        path.join(__dirname, <span class="string">&quot;data&quot;</span>, <span class="string">&quot;data.json&quot;</span>),</span><br><span class="line">        <span class="built_in">JSON</span>.stringify(list),</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">throw</span> err;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">          res.end();</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    res.end(<span class="string">&quot;404, Page Not Found.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;http://localhost:8080&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210915192914.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210915193204.png"></p><p><strong><cst>修改保存数据的代码</cst></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 2. startsWith 内容包含 &#x27;/add&#x27; 返回true 且请求方法是 GET</span></span><br><span class="line">  <span class="keyword">if</span> (req.url.startsWith(<span class="string">&quot;/add&quot;</span>) &amp;&amp; req.method === <span class="string">&quot;GET&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> urlObj = url.parse(req.url, <span class="literal">true</span>) <span class="comment">// url.parse 解析字符串路径，第二次参数，确定解析成对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 防止数据 data.json 被覆盖，需要去读取文件</span></span><br><span class="line">    <span class="keyword">var</span> filename = path.join(__dirname,<span class="string">&#x27;data&#x27;</span>,<span class="string">&#x27;data.json&#x27;</span>)</span><br><span class="line">    fs.readFile(filename,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 使用 utf-8 格式，不然 data 就是 buffer类型</span></span><br><span class="line">      <span class="keyword">if</span>(err &amp;&amp; err.code !== <span class="string">&#x27;ENOENT&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">      &#125; <span class="comment">// 如果没有 data.json 文件，那么直接条件是err 就会异常。</span></span><br><span class="line">        <span class="comment">// 将没有文件的错误设置为条件，不会因此抛出异常</span></span><br><span class="line">      <span class="keyword">var</span> list = <span class="built_in">JSON</span>.parse(data || <span class="string">&#x27;[]&#x27;</span>) <span class="comment">// 没有data文件就 underfind，</span></span><br><span class="line">      list.push(urlObj.query); <span class="comment">// 插入新数据</span></span><br><span class="line">      <span class="comment">// 4. 写入数据</span></span><br><span class="line">      <span class="comment">// writeFile 写入是数据类型，是 string 和 buffer 类型，否则不行</span></span><br><span class="line">      <span class="comment">// JSON.stringify(list) 将数据转化string类型</span></span><br><span class="line">      fs.writeFile(filename,<span class="built_in">JSON</span>.stringify(list),<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">          <span class="keyword">throw</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置状态码 和 消息</span></span><br><span class="line">        res.statusCode = <span class="number">302</span></span><br><span class="line">        res.statusMessage = <span class="string">&#x27;Found&#x27;</span></span><br><span class="line">        res.setHeader(<span class="string">&#x27;Location&#x27;</span>,<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="comment">// 结束</span></span><br><span class="line">        res.end()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    res.end(<span class="string">&#x27;Not Found Page&#x27;</span>)  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;).listen(<span class="number">8080</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;http://localhost:8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210915231959.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210915232441.png"></p><h3 id="重定向操作"><a href="#重定向操作" class="headerlink" title="重定向操作"></a>重定向操作</h3><blockquote><p>服务器通过设置 http 响应报文头实现浏览器重定向操作。当提交数据后，我们肯定需要将网站跳转到其他页面去</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">  <span class="comment">// 当页面成功，需要跳转时</span></span><br><span class="line">  <span class="comment">// 重定向 回到初始页</span></span><br><span class="line">  res.statusCode = <span class="number">302</span> <span class="comment">// 设置状态码</span></span><br><span class="line">  res.statusMessage = <span class="string">&#x27;Found&#x27;</span> <span class="comment">// 消息</span></span><br><span class="line">  res.setHeader(<span class="string">&#x27;Location&#x27;</span>,<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  res.end(); <span class="comment">// 结束响应</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现-POST-请求"><a href="#实现-POST-请求" class="headerlink" title="实现 POST 请求"></a>实现 POST 请求</h3><blockquote><p>读取数据 data.json，和写入数据操作都和 get 请求一样</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST 请求</span></span><br><span class="line"><span class="comment">// 1. 获取用户 post 提交的数据，由于 post 提交数据时，可能分多次提交。因此需要去合并每次提交的数据</span></span><br><span class="line"><span class="comment">// 当执行了 res.end() 表示提交了全部数据</span></span><br><span class="line"><span class="comment">// 声明一个数组，去存储提交的数据</span></span><br><span class="line"><span class="keyword">var</span> array = []</span><br><span class="line"><span class="comment">// 2. 监听 data 事件，每次提交的数据就是 chunk 参数</span></span><br><span class="line">req.on(<span class="string">&#x27;data&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">  chunk</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// chunk 参数是buffer对象</span></span><br><span class="line">  array.push(chunk)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 监听 end 事件</span></span><br><span class="line">req.on(<span class="string">&#x27;end&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> postBody = Buffer.concat(array) <span class="comment">// 合并 buffer 对象</span></span><br><span class="line">  postBody = postBody.toString(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment">// 将buffer转化成字符串对象</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 4. 需要导入 querystring 模块，将字符串对象转化成 json 对象</span></span><br><span class="line">  postBody = querystring.parse(postBody) <span class="comment">// JSON 对象</span></span><br><span class="line">  res.end(<span class="string">&#x27;over&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="渲染页面，替换数据"><a href="#渲染页面，替换数据" class="headerlink" title="渲染页面，替换数据"></a>渲染页面，替换数据</h3><blockquote><p>使用 underscore 模块，中文网<a href="https://underscorejs.net/">https://underscorejs.net/</a></p><p><a href="http://github.com/jashkenas/underscore/">Underscore</a>是一个JavaScript实用库，提供了一整套函数式编程的实用功能，但是没有扩展任何JavaScript内置对象。它是这个问题的答案：“如果我在一个空白的HTML页面前坐下， 并希望立即开始工作， 我需要什么？“…它弥补了部分<a href="http://docs.jquery.com/">jQuery</a>没有实现的功能,同时又是<a href="http://www.backbonejs.com.cn/">Backbone.js</a>必不可少的部分。</p></blockquote><p><strong>1. 安装</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install underscore</span><br></pre></td></tr></table></figure><p><strong>2.引入</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;underscore&#x27;</span>) <span class="comment">// 以下划线去命名</span></span><br></pre></td></tr></table></figure><p><strong>3.运用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;underscore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;老五&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">18</span>,<span class="number">20</span>,<span class="number">45</span>]</span><br><span class="line"><span class="keyword">var</span> genders = [<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;女&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩</span></span><br><span class="line"><span class="keyword">var</span> result = _.zip(names,ages,genders)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解压</span></span><br><span class="line">result = _.unzip(result)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210916100005.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板替换</span></span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;underscore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明了一段代码模板的 HTML 文档</span></span><br><span class="line"><span class="keyword">var</span> html = <span class="string">&#x27;&lt;h2&gt;&lt;%= name %&gt;&lt;/h2&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// template() 函数的返回是一个函数</span></span><br><span class="line"><span class="keyword">var</span> fn = _.template(html)</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn 接收一个数据对象，并用该数据对象，将 html 中的模板内容替换，生成最终的 html 代码</span></span><br><span class="line"><span class="keyword">var</span> html = fn(&#123;<span class="attr">name</span>: <span class="string">&#x27;Simplelife&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(html)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210916100932.png"></p><p><strong>&lt;%%&gt; html数据绑定</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 伪代码 示例 --&gt;</span></span><br><span class="line">&lt;% for (var i = 0; i &lt; list.length; i++) &#123; %&gt;</span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/item?id=&lt;%= list[i].id %&gt;&quot;</span>&gt;</span></span><br><span class="line">      &lt;%= list[i].title %&gt;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="comment">// 封装的 render 函数，增加第二参数 tplData 模板数据</span></span><br><span class="line">res.render = <span class="function"><span class="keyword">function</span>(<span class="params">filename, tplData</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    fs.readFile(filename, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        res.writeHead(<span class="number">404</span>, <span class="string">&#x27;Not Found&#x27;</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=utf-8&#x27;</span> &#125;);</span><br><span class="line">        res.end(<span class="string">&#x27;404, not found.&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 因为有些解析的资源是不需要替换数据的，如解析照片……</span></span><br><span class="line">      <span class="comment">// 如果用户传递了模板数据，那么就使用 underscore 的 template 方法进行替换</span></span><br><span class="line">      <span class="comment">// 如果用户没有传递 模板数据，那么就不进行替换</span></span><br><span class="line">      <span class="keyword">if</span> (tplData) &#123;</span><br><span class="line">        <span class="comment">// 如果用户传递了模板数据，表示要进行模板替换</span></span><br><span class="line">        <span class="keyword">var</span> fn = _.template(data.toString(<span class="string">&#x27;utf8&#x27;</span>));</span><br><span class="line">        data = fn(tplData);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, mime.getType(filename));</span><br><span class="line">      res.end(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// underscore模板语法</span></span><br><span class="line"><span class="keyword">if</span> (tplData) &#123;</span><br><span class="line">  <span class="comment">// 如果用户传递了模板数据，表示要进行模板替换</span></span><br><span class="line">  <span class="keyword">var</span> fn = _.template(data.toString(<span class="string">&#x27;utf8&#x27;</span>));</span><br><span class="line">  data = fn(tplData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当渲染文件时，传入模板数据，就进行这代码。将页面数据转成字符串 data.toString(‘utf-8’) 的形式，返回的是函数的形式。<cst>将实参 tplData 传入函数，需要去替换数据，得到新的 data。</cst></p></blockquote><h3 id="封装函数"><a href="#封装函数" class="headerlink" title="封装函数"></a>封装函数</h3><p><strong>1.封装读取文件函数</strong></p><blockquote><p>不能通过 return 去返回异步操作的内容。假如这样做，当进行异步操作开始就会返回，显然值还没有得出。如果在 function(err,data) 函数里面返回，虽然可以得到值，但是无法获取</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readNewsData</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">  fs.readFile(path.join(__dirname,<span class="string">&#x27;data&#x27;</span>,<span class="string">&#x27;data.json&#x27;</span>),<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err &amp;&amp; err.code !== <span class="string">&#x27;ENOENT&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> list = <span class="built_in">JSON</span>.parse(data || <span class="string">&#x27;[]&#x27;</span>);</span><br><span class="line">    <span class="comment">// 通过调用回调函数 callback() 将读取到的数据 list，传递出去</span></span><br><span class="line">    callback(list)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1. return list 无法获取值</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 2. return list 无值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="node-js-模块的分类"><a href="#node-js-模块的分类" class="headerlink" title="node.js 模块的分类"></a>node.js 模块的分类</h2><p><strong>1.核心模块</strong></p><blockquote><p> Core Module、内置模块、原生模块</p><p>fs、http、path、url，加载模块是一个同步的过程，加载完一个加载下一个。</p></blockquote><p><strong>2.文件模块</strong></p><p>按文件后缀来分，如果加载时，没有指定后缀名，那么就按照如下顺序依次加载相应的模块</p><ol><li><strong>.js</strong></li><li><strong>.json</strong></li><li><strong>.node(C/C++编写的模块）</strong></li></ol><p><strong>3.自定义模块</strong></p><ol><li><strong>mime</strong></li><li><strong>cheerio</strong></li><li><strong>moment</strong></li><li><strong>mongo</strong></li></ol><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210916202453.png"></p><blockquote><p>加载模块，会去一层一层去找 node_modules，向C跟磁盘</p></blockquote><h3 id="require-加载模块过程"><a href="#require-加载模块过程" class="headerlink" title="require 加载模块过程"></a>require 加载模块过程</h3><ul><li>看 require() 加载模块时传入的参数是否以 ‘./‘ 或 ‘../‘ 或 ‘/‘ 等等这样的路径方式开头（相对路径或绝对路径都可以）</li><li>是，那么会按照传入的路径直接去查询对应的模块。</li></ul><ul><li><p>传入的是否为具体的文件名</p><ul><li><p>require(‘./test.js’) 是具体的文件名</p><ul><li>直接根据给定的路径去加载模块，找到了加载成功，找不到加载失败</li></ul></li><li><p>require(‘./test’); 不是具体的文件名、</p><ul><li>第一步：根据给定的路径，依次添加文件后缀 .js、.json、.node进行匹配，如果找不到匹配执行第二步</li><li>第二步：查找是否有 test 目录（尝试找 test 包）<ul><li>找不到：加载失败</li><li>找到了：依次在 test 目录下查找 package.json 文件（找到该文件后尝试找 main 字段中的入口文件）、index.js、index.json、index.node，找不到则加载失败</li></ul></li></ul></li></ul></li></ul><ol start="3"><li>不是，那么就认为传入的是 “模块名称”（比如：require(‘http’)、require(‘mime’)）</li></ol><ul><li>是核心模块：直接加载核心模块</li><li>不是核心模块<ul><li>依次递归查找 node_modules 目录中是否有相应的包<ul><li>从当前目录开始，依次递归查找所有父目录下的 node_modules 目录中是否包含相应的包</li><li>如果查找完毕磁盘根目录依然没有则加载失败</li><li>打印输入 module.paths 查看</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// require(&#x27;http&#x27;)</span></span><br><span class="line"><span class="comment">// require(&#x27;mime&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况一：require() 的参数是一个路径</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./index2.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// index2.js</span></span><br><span class="line"><span class="comment">// index2.json</span></span><br><span class="line"><span class="comment">// index2.node</span></span><br><span class="line"><span class="comment">// index2 文件夹 -&gt; package.json -&gt; main(入口文件 app.js -&gt; index.js/index.json/index.node) -&gt; 加载失败</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;ndex2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二： require() 的参数不是路径，直接就是一个模块名称</span></span><br><span class="line"><span class="comment">// 1. 先在核心模块中查找，是否有和给定的名字一样的模块。如果有，则直接加载该核心模块。</span></span><br><span class="line"><span class="comment">// require(&#x27;http&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 如果核心模块中没有该模块那么就会认为这个模块是一个第三方模块（自定义模块）</span></span><br><span class="line"><span class="comment">// 先会去当前js文件所在的目录下去找是否一个一个 node_modules 文件夹</span></span><br><span class="line"><span class="comment">// require(&#x27;mime&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="require-加载模块注意点"><a href="#require-加载模块注意点" class="headerlink" title="require 加载模块注意点"></a>require 加载模块注意点</h3><ol><li>所有模块第一次加载完毕后都会有 缓存，二次加载直接读取缓存，避免了二次开销</li></ol><ul><li>因为有                                                                                                                                                                                                                                                                                                                      缓存，所以模块中的代码只在第一次加载的时候执行一次</li></ul><ol start="2"><li><p>每次加载模块的时候都优先从缓存中加载，缓存中没有的情况下才会按照 node.js 加载模块的规则去查找</p></li><li><p>核心模块在 Node.js 源码编译的时候，都已经编译为二进制执行文件，所以加载速度较快（核心模块加载的优先级仅次于 缓存加载）</p></li><li><p>核心模块都保存在 lib 目录下</p></li><li><p>试图加载一个和 核心模块 同名的 自定义模块（第三方模块）是不会成功的</p></li></ol><ul><li>自定义模块要么名字不要与核心模块同名</li><li>要么使用路径的方式加载</li></ul><ol start="6"><li>核心模块 只能通过 模块名称 来加载（错误示例：require(‘./http’); 这样是无法加载 核心模块 http的 ）</li><li>require() 加载模块使用 ./ 相对路径时，相对路径是相对当前模块，不受执行 node 命令的路径影响</li><li>建议加载文件模块的时候始终添加文件后缀名，不要省略。</li></ol><hr><h3 id="补充CommonJS规范"><a href="#补充CommonJS规范" class="headerlink" title="补充CommonJS规范"></a>补充CommonJS规范</h3><ol><li><a href="http://www.commonjs.org/">CommonJS 规范</a></li><li><a href="http://www.commonjs.org/specs/modules/1.0/">模块的定义</a></li><li>总结：CommonJS 是为 JavaScript 语言制定的一种 模块规范、编程 API规范</li><li>node.js 遵循了 CommonJS规范</li></ol><p><strong>1.模块通讯</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载 foo 模块</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">&#x27;./foo.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出 foo 模块</span></span><br><span class="line"><span class="comment">// foo.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span> <span class="comment">// 键值对的形式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.module.exports 和 exports 暴露属性的区别</strong></p><blockquote><p>它们在栈里指向对象地址是同一个。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.name = <span class="string">&#x27;李四&#x27;</span> <span class="comment">//添加name属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.age = <span class="number">18</span> <span class="comment">//添加 age 属性</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">此时暴露的对象&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当改变 module.exports 的对象地址，因为 require 导入最终是 module.exports，因此 exports 导入最终地址也改变</p><p>PS：假如最终 exports 指向新的对象地址，最终还是以 module.exports 为准，它才是最终返回的</p></blockquote><h2 id="模块化开发思想，封装模块过程"><a href="#模块化开发思想，封装模块过程" class="headerlink" title="模块化开发思想，封装模块过程"></a>模块化开发思想，封装模块过程</h2><blockquote><p>将功能进行模块化封装，开发速度更开，维护成本也低，后期扩展更方便</p><p>模块化封装好的源码：<a href="https://gitee.com/lovehuating/image/raw/master/hackernews%EF%BC%88%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%89.rar">HackerNews 源码</a>，可以下载下来分析源码</p></blockquote><p><strong>模块分类</strong></p><ol><li>模块一(服务模块)：负责启动服务</li><li>模块二(扩展模块)：负责扩展 req 和 res 对象，为 req 和 res 增加以下更好用的API</li><li>模块三(路由模块)：负责路由判断</li><li>模块四(业务模块)：负责处理具体路由的业务代码</li><li>模块五(数据操作模块)：负责进行数据库操作</li><li>模块六(配置模块)：负责报错各种项目中用到的配置信息</li></ol><p>PS：<cst class='red'>抽离代码，服务模块最后写，因为写好了其他模块，自然就写好了服务模块</cst></p><blockquote><p>步骤：</p><ol><li><p>思考，该模块中要封装什么代码？</p></li><li><p>思考，这些代码有用到外部的数据吗？如果用到了，是否需要通过参数将这些数据传递到当前模块中</p></li><li><p>当前模块对外需要暴露的东西（module.exports的值）</p></li></ol></blockquote><hr><p><strong>模块二：context.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入需要的模块</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>); </span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> mime = <span class="built_in">require</span>(<span class="string">&#x27;mime&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;underscore&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块暴露的函数，需要从外面传递 req 和 res 参数</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> urlObj = url.parse(req.url.toLowerCase(),<span class="literal">true</span>)</span><br><span class="line">  <span class="comment">// 1. 为 req 添加 query 属性</span></span><br><span class="line">  req.query = urlObj.query</span><br><span class="line">  <span class="comment">// 2. 为 req 添加 pathname 属性</span></span><br><span class="line">  req.pathname = urlObj.pathname</span><br><span class="line">  <span class="comment">// 3. 把请求方法转换成小写</span></span><br><span class="line">  req.method = req.method.toLowerCase()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 4. 给 res 添加 render 函数. filename 路径 tplData 替换&lt;%%&gt;内的数据</span></span><br><span class="line">  res.render = <span class="function"><span class="keyword">function</span>(<span class="params">filename,tplData</span>)</span>&#123;</span><br><span class="line">    fs.readFile(filename,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        res.writeHead(<span class="number">404</span>,<span class="string">&#x27;Not Found&#x27;</span>,&#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>&#125;)</span><br><span class="line">        res.end(<span class="string">&#x27;404,没找到页面&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果用户传递了模板数据，表示要进行替换,使用 underscore 的 template 方法</span></span><br><span class="line">      <span class="keyword">if</span>(tplData)&#123;</span><br><span class="line">      <span class="keyword">var</span> fn = _.template(data.toString(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">      data = fn(tplData)</span><br><span class="line">      &#125;</span><br><span class="line">      res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>,mime.getType(filename))</span><br><span class="line">      res.end(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模块三：router.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载 handler.js 模块 业务模块</span></span><br><span class="line"><span class="keyword">var</span> handler = <span class="built_in">require</span>(<span class="string">&#x27;./handler.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出模块</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 先根据用户请求的路径（路由），将相应的HTML页面显示出来</span></span><br><span class="line">  <span class="keyword">if</span>(req.pathname === <span class="string">&#x27;/&#x27;</span> &amp;&amp; req.method === <span class="string">&#x27;get&#x27;</span>)&#123;</span><br><span class="line">    handler.index(req,res)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.pathname === <span class="string">&#x27;/submit&#x27;</span> &amp;&amp; req.method === <span class="string">&#x27;get&#x27;</span>)&#123;</span><br><span class="line">    handler.submit(req,res)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.pathname === <span class="string">&#x27;/item&#x27;</span> &amp;&amp; req.method === <span class="string">&#x27;get&#x27;</span>)&#123;</span><br><span class="line">    handler.item(req,res)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.pathname === <span class="string">&#x27;/add&#x27;</span> &amp;&amp; req.method === <span class="string">&#x27;get&#x27;</span>)&#123;</span><br><span class="line">    handler.addGet(req,res)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url === <span class="string">&#x27;/add&#x27;</span> &amp;&amp; req.method === <span class="string">&#x27;post&#x27;</span>)&#123;</span><br><span class="line">    handler.addPost(req,res)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url.startsWith(<span class="string">&#x27;/resources&#x27;</span>) &amp;&amp; req.method === <span class="string">&#x27;get&#x27;</span>)&#123;</span><br><span class="line">    handler.static(req,res)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    handler.handleErrors(req,res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模块四：handler.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./config.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 处理请求 &#x27;/&#x27; 和 &#x27;/index&#x27; 的业务方法</span></span><br><span class="line"><span class="built_in">module</span>.exports.index = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 读取 data.json 文件中的数据，并将读取到的数据转换为 list 数组</span></span><br><span class="line">  readNewsData(<span class="function"><span class="keyword">function</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 2. 在服务器端使用模板引擎，将 list 中的数据和 index.html 文件中的内容结合 渲染给客户端</span></span><br><span class="line">    res.render(path.join(__dirname, <span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>), &#123; <span class="attr">list</span>: list &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 处理请求 &#x27;/submit&#x27; 的业务方法</span></span><br><span class="line"><span class="built_in">module</span>.exports.submit = <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 读取 submit.html 返回</span></span><br><span class="line">  res.render(path.join(__dirname,<span class="string">&#x27;views&#x27;</span>,<span class="string">&#x27;submit.html&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 处理请求 &#x27;/item&#x27; 的业务方法</span></span><br><span class="line"><span class="built_in">module</span>.exports.item = <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 获取当前用户请求的 id</span></span><br><span class="line">  <span class="comment">// 读取文件数据，根据id 找到内容</span></span><br><span class="line">  readNewsData(<span class="function"><span class="keyword">function</span>(<span class="params">list_news</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> model = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 循环 list_news 中的数据，找到 id值相等的内容</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list_news.length; i++)&#123;</span><br><span class="line">      <span class="comment">// 判断集合内容是否有相等的id值</span></span><br><span class="line">      <span class="keyword">if</span>(list_news[i].id.toString() === req.query.id)&#123;</span><br><span class="line">        model = list_news[i]</span><br><span class="line">        <span class="keyword">break</span> <span class="comment">// 结束这个循环，向下走</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(model)&#123;</span><br><span class="line">      <span class="comment">// 调用 res.render() 函数进行模板引擎的渲染</span></span><br><span class="line">      res.render(path.join(config.viewPath,<span class="string">&#x27;details.html&#x27;</span>),&#123;<span class="attr">item</span>:model&#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.end(<span class="string">&#x27;No Such Item&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 处理 get 方式添加新闻</span></span><br><span class="line"><span class="built_in">module</span>.exports.addGet = <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 读取 json 数据文件</span></span><br><span class="line">  readNewsData(<span class="function"><span class="keyword">function</span>(<span class="params">list</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 把新闻添加 id 属性</span></span><br><span class="line">    req.query.id = list.length</span><br><span class="line">    <span class="comment">// push 添加data</span></span><br><span class="line">    list.push(req.query)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写入 data.json 文件</span></span><br><span class="line">    writeNewsData(<span class="built_in">JSON</span>.stringify(list),<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 重定向</span></span><br><span class="line">      res.statusCode = <span class="number">302</span></span><br><span class="line">      res.statusMessage = <span class="string">&#x27;Found&#x27;</span></span><br><span class="line">      res.setHeader(<span class="string">&#x27;Location&#x27;</span>,<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      res.end()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 处理 post 方法添加新闻</span></span><br><span class="line"><span class="built_in">module</span>.exports.addPost = <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  readNewsData(<span class="function"><span class="keyword">function</span>(<span class="params">list</span>)</span>&#123;</span><br><span class="line">    postBodyData(req,<span class="function"><span class="keyword">function</span>(<span class="params">postData</span>)</span>&#123;</span><br><span class="line">      postData.id = list.length</span><br><span class="line">      list.push(postData)</span><br><span class="line">      </span><br><span class="line">      writeNewsData(<span class="built_in">JSON</span>.stringify(list),<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        res.statusCode = <span class="number">302</span></span><br><span class="line">        res.statusMessage = <span class="string">&#x27;Found&#x27;</span></span><br><span class="line">        res.setHeader(<span class="string">&#x27;Location&#x27;</span>,<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        res.end()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 处理静态资源请求</span></span><br><span class="line"><span class="built_in">module</span>.exports.static = <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 如果用户是以 &#x27;/resources&#x27; 开发，并且是 get 请求，就认为用户请求静态资源</span></span><br><span class="line">  res.render(path.join(__dirname,req.url))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 处理 404 错误请求</span></span><br><span class="line"><span class="built_in">module</span>.exports.handleErrors = <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  res.writeHead(<span class="number">404</span>,<span class="string">&#x27;Not Found&#x27;</span>,&#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;text/html;charset=utf-8&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  res.end(<span class="string">&#x27;404,页面没有找到&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装一个读取 data.json 文件的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readNewsData</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  fs.readFile(config.dataPath, <span class="string">&#x27;utf8&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err &amp;&amp; err.code !== <span class="string">&#x27;ENOENT&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> list = <span class="built_in">JSON</span>.parse(data || <span class="string">&#x27;[]&#x27;</span>);</span><br><span class="line">    <span class="comment">// 通过调用回调函数 callback() 将读取到的数据 list，传递出去</span></span><br><span class="line">    callback(list);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装一个写入 data.json 文件的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeNewsData</span>(<span class="params">data, callback</span>) </span>&#123;</span><br><span class="line">  fs.writeFile(config.dataPath, data, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用 callback() 来执行当写入数据完毕后的操作</span></span><br><span class="line">    callback();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装一个获取用户 post 提交的数据的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postBodyData</span>(<span class="params">req, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> array = [];</span><br><span class="line">  req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">    array.push(chunk);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 监听 request 对象的 end 事件</span></span><br><span class="line">  <span class="comment">// 当 end 事件被触发的时候，表示上所有数据都已经提交完毕了</span></span><br><span class="line">  req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> postBody = Buffer.concat(array);</span><br><span class="line">    <span class="comment">// 把 获取到的 buffer 对象转换为一个字符串</span></span><br><span class="line">    postBody = postBody.toString(<span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">    <span class="comment">// 把 post 请求的查询字符串，转换为一个 json 对象</span></span><br><span class="line">    postBody = querystring.parse(postBody);</span><br><span class="line">    <span class="comment">// 把用户 post 提交过来的数据传递出去</span></span><br><span class="line">    callback(postBody);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模块六：config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">&quot;port&quot;</span>: <span class="number">9091</span>,</span><br><span class="line">  <span class="string">&quot;dataPath&quot;</span>: path.join(__dirname, <span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;data.json&#x27;</span>),</span><br><span class="line">  <span class="string">&quot;viewPath&quot;</span>: path.join(__dirname, <span class="string">&#x27;views&#x27;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>模块一：index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 加载 http 模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> context = <span class="built_in">require</span>(<span class="string">&#x27;./context.js&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router.js&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./config.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建服务</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 调用 context.js 模块的返回值（函数），并将 req 和 res 对象传递给 context.js 模块</span></span><br><span class="line">  context(req, res);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用 路由模块的返回值（函数），并将 req 和 res 对象传递给 router.js 模块</span></span><br><span class="line">  router(req, res);</span><br><span class="line">&#125;).listen(config.port, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;http://localhost:&#x27;</span> + config.port);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ejs-模块引擎"><a href="#ejs-模块引擎" class="headerlink" title="ejs 模块引擎"></a>ejs 模块引擎</h2><blockquote><p>地址：<a href="https://www.npmjs.com/package/ejs">https://www.npmjs.com/package/ejs</a></p><p>官方文档：<a href="https://ejs.bootcss.com/">https://ejs.bootcss.com/</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ejs --save</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (user) &#123; %&gt;</span><br><span class="line">  &lt;h2&gt;&lt;%= user.name %&gt;&lt;/h2&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p><strong>使用示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> template = ejs.compile(str, options);</span><br><span class="line">template(data);</span><br><span class="line"><span class="comment">// =&gt; 输出渲染后的 HTML 字符串</span></span><br><span class="line"></span><br><span class="line">ejs.render(str, data, options);</span><br><span class="line"><span class="comment">// =&gt; 输出渲染后的 HTML 字符串</span></span><br><span class="line"></span><br><span class="line">ejs.renderFile(filename, data, options, <span class="function"><span class="keyword">function</span>(<span class="params">err, str</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// str =&gt; 输出渲染后的 HTML 字符串</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>演示</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载 ejs 模块</span></span><br><span class="line"><span class="keyword">var</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// 使用 render 渲染</span></span><br><span class="line"><span class="keyword">var</span> html = <span class="string">&#x27;&lt;h1&gt;&lt;%= username %&gt;&lt;/h1&gt;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> result = ejs.render(html,&#123;<span class="attr">username</span>: <span class="string">&#x27;张三&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// 打印 &lt;h1&gt;张三&lt;/h1&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 renderFile</span></span><br><span class="line">ejs.renderFile(path.join(__dirname,<span class="string">&#x27;index.html&#x27;</span>),&#123;<span class="attr">title</span>: <span class="string">&#x27;这是一个标题&#x27;</span>,<span class="attr">msg</span>: <span class="string">&#x27;Hello world&#x27;</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Express-框架基础"><a href="#Express-框架基础" class="headerlink" title="Express 框架基础"></a>Express 框架基础</h2><p><strong>1.什么是 express</strong></p><ul><li>基于 NodeJS 平台开发的 “web 开发框架”，就是一个 nodejs 模块</li><li>express的作用：它提供一系列强大的特性，帮助你创建各种 web 和 移动设备应用</li></ul><p><strong>2.学习的理由</strong></p><ul><li>为了让我们基于 Node.js 开发 web 应用程序更高效</li></ul><p><strong>3.官方网站</strong></p><ul><li><a href="http://expressjs.com/">http://expressjs.com/</a></li><li><a href="http://www.expressjs.com.cn/">http://www.expressjs.com.cn/</a></li></ul><p><strong>4.express 特点</strong></p><ul><li>实现了路由功能</li><li>中间件（函数）功能</li><li>对 req、res 对象的扩展</li><li>可以集成其他模板引擎，ejs，underscore</li></ul><h3 id="Express-基本使用"><a href="#Express-基本使用" class="headerlink" title="Express 基本使用"></a>Express 基本使用</h3><p><strong>1.安装 epress</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y //创建 package.json 文件</span><br><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p><strong>2.使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express </span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 app 对象</span></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册路由，通过中间件监听指定的路由请求</span></span><br><span class="line">app.get(<span class="string">&#x27;/index&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  res.end(<span class="string">&#x27;hello world 你好世界&#x27;</span>) <span class="comment">// 没有指定编码会乱码</span></span><br><span class="line">  res.send(<span class="string">&#x27;hello world 你好世界&#x27;</span>) <span class="comment">// 不会乱码，正常输出</span></span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务</span></span><br><span class="line">app.listen(<span class="number">9090</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;http://localhost:9090&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>res.end() 和 res.send() 的区别</strong></p><ol><li><p>参数类型区别，res.send() 参数可以是 buffer obj string array 等类型</p><p>res.end() 只能是 buffe 或 string </p></li><li><p>res.send() 会发送更多的响应报文头 <code>Content-Type:text/html;charset=utf8</code></p></li></ol><p><strong>app.get 和 app.use 的区别</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.get 、app.post 都是限制请求的方式</span></span><br><span class="line"><span class="comment">// app.use 不限制请求的方式，get post 都行</span></span><br><span class="line"><span class="comment">// 请求路径也只是 以指定的路由开始就是行</span></span><br><span class="line"><span class="comment">// 例如 &#x27;/index&#x27; app.use 就需要以这个开头就行</span></span><br><span class="line"><span class="comment">// 不要求 pathname 完全匹配路由，app.get 需要</span></span><br></pre></td></tr></table></figure><p><strong>app.all</strong></p><p>同样是可以注册路由的，但是和<code>app.use</code>的区别，就是需要严格按钮路由匹配</p><p>pathname 完全匹配路由，请求方法是不限定的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.all(<span class="string">&#x27;/index&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// body</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>通过正则表达式注册路由</strong></p><p>限制请求方式，不限制请求路径</p><p>要求是 get 请求，请求路径以 <code>/index</code> 开头就行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.get 配合正则表达式 就可以做到</span></span><br><span class="line">app.get(<span class="regexp">/^\/index(\/.+)*$/</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="comment">// ……</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>通过 req.params 获取路由中的参数</strong> </p><blockquote><p>将参数设计到路由上，如 /index/2017/10/11</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/index/:year/:month/:day&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  res.send(req.params)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 页面结果</span></span><br><span class="line">&#123;<span class="string">&quot;year&quot;</span>:<span class="string">&quot;2017&quot;</span>,<span class="string">&quot;month&quot;</span>:<span class="string">&quot;10&quot;</span>,<span class="string">&quot;day&quot;</span>:<span class="string">&quot;11&quot;</span>&#125; <span class="comment">//json 数据</span></span><br></pre></td></tr></table></figure><h3 id="通过-Express-模拟Apche实现静态资源托管"><a href="#通过-Express-模拟Apche实现静态资源托管" class="headerlink" title="通过 Express 模拟Apche实现静态资源托管"></a>通过 Express 模拟Apche实现静态资源托管</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态资源托管</span></span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,express.static(path.join(__dirname,<span class="string">&#x27;public&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解释</span></span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line"><span class="comment">// 请求资源使用 app.use 任何路径</span></span><br><span class="line">express 做了一个方法，用请求静态资源</span><br><span class="line"><span class="keyword">var</span> fn = express.static(path.join(__dirname,<span class="string">&#x27;public&#x27;</span>))</span><br><span class="line"><span class="comment">// 因此得出了上面一行代码</span></span><br></pre></td></tr></table></figure><p><strong>问题</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/xxx&#x27;</span>,express.static(path.join(__dirname,<span class="string">&#x27;public&#x27;</span>)))</span><br><span class="line">app.use(<span class="string">&#x27;/xxx&#x27;</span>,express.static(path.join(__dirname,<span class="string">&#x27;pp&#x27;</span>)))</span><br><span class="line"><span class="comment">// 请求路径一样，但有两个静态资源文件夹</span></span><br><span class="line"><span class="comment">// 当请求资源在 第一次public 没有找到，回去 pp 文件找</span></span><br><span class="line"><span class="comment">// 当第一次找到，就直接返回，不会去 pp 文件夹请求资源</span></span><br><span class="line"><span class="comment">// 因此如果有两个不同的资源文件，在两个文件夹，请求第一次请求到了就返回</span></span><br></pre></td></tr></table></figure><h3 id="res-常见的-API-方法"><a href="#res-常见的-API-方法" class="headerlink" title="res 常见的 API 方法"></a>res 常见的 API 方法</h3><h3 id="路由挂载-express-上"><a href="#路由挂载-express-上" class="headerlink" title="路由挂载 express 上"></a>路由挂载 express 上</h3><blockquote><p>router 文件代码需要获取 req，res参数，如果直接传入app这个值就很危险，通过挂载 express上 就更安全</p></blockquote><p><code>router.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 router 对象 （router 对象即是一个对象，也是一个函数）</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> router = express.Router()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 router 对象设置（挂载）路由</span></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ……</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 router 对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><p><code>app.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载路由模块</span></span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router.js&#x27;</span>)</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>,router)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lovehuating/image/raw/master/20210917231948.png"></p><h2 id="NodeJS补充"><a href="#NodeJS补充" class="headerlink" title="NodeJS补充"></a>NodeJS补充</h2><h3 id="npm-版本符合"><a href="#npm-版本符合" class="headerlink" title="npm 版本符合"></a>npm 版本符合</h3><p><strong>package.json</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> node package versions</span></span><br><span class="line">- 13.4.6</span><br><span class="line">- major: 16, minor: 4, patch: 6</span><br><span class="line"><span class="meta">#</span><span class="bash"> npm 版本符号</span></span><br><span class="line">- ^ : 锁定major</span><br><span class="line">- ~ ：锁定minor</span><br><span class="line">- 空 : 锁定patch</span><br><span class="line">- * ：最新版本</span><br></pre></td></tr></table></figure><h3 id="npm-自定义包"><a href="#npm-自定义包" class="headerlink" title="npm 自定义包"></a>npm 自定义包</h3><p><strong>1. 注册账号</strong></p><p>我的账号：simplelife0421</p><p>npm官网：<a href="https://www.npmjs.com/">https://www.npmjs.com/</a></p><p><strong>2.创建自己的包</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js 入口</span></span><br><span class="line"><span class="comment">// 创建 package.json 文件</span></span><br><span class="line"><span class="comment">// npm init -y</span></span><br><span class="line"><span class="comment">// 自己的包也安装一些别的包的依赖</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myChunk</span>(<span class="params">arr,num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> array  = _.chunk(arr,num)</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  myChunk</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.上传自定义包</strong></p><p><code>登录npm账号：npm adduser </code></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210919151831.png"></p><p>如果是进入的是淘宝镜像就要切换源（坑：403 Forbidden）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看npm源：npm config get registry</span><br><span class="line">切换npm源方法一：npm config set registry http://registry.npmjs.org</span><br><span class="line">切换npm源方法二：nrm use npm</span><br></pre></td></tr></table></figure><p><strong>4.发布包</strong></p><p><code>npm publish</code></p><p><cst class="red">PS：如果你是刚创建的 npm 账号需要验证邮箱，不然无法上传</cst></p><p><strong>5.发布错误原因</strong></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210919174112.png"></p><ul><li>由于设置为了淘宝镜像导致</li><li>未验证邮箱</li></ul><hr><h3 id="process-进程"><a href="#process-进程" class="headerlink" title="process 进程"></a>process 进程</h3><p><strong>1. 变量</strong></p><p>在 package.json 不仅能写配置，还能自定义配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用配置，通过 process</span></span><br><span class="line"><span class="string">&quot;simple&quot;</span>:&#123;</span><br><span class="line">  <span class="string">&quot;env&quot;</span>: <span class="string">&quot;echo hello&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> echo = process.env.npm_package_config_env</span><br><span class="line"><span class="built_in">console</span>.log(echo)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
            <tag> Express </tag>
            
            <tag> Ejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端适配</title>
      <link href="2021/09/12/Screen_adaptation/"/>
      <url>2021/09/12/Screen_adaptation/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="rem适配"><a href="#rem适配" class="headerlink" title="rem适配"></a>rem适配</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置完美视口</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设备对立像素：布局视口 = 1：1</p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>先按照 IPhone 6 进行页面布局，再进行适配</p><ol><li>完美视口设置</li><li>设计稿总宽 375 布局</li><li>设置 font-size 100px 尺寸转为 rem</li><li>增加 JS 代码进行页面适配</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123; </span><br><span class="line">  <span class="comment">/*设置根字体大小*/</span></span><br><span class="line">  <span class="attribute">font-size</span> = <span class="number">37.5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以iphone 6为例，设备独立像素是 375px</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210912103406.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    *&#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line">  html,body&#123; </span><br><span class="line">    /*设置根字体大小*/</span><br><span class="line">    font-size = 100px;</span><br><span class="line">    &#125;</span><br><span class="line">    #demo&#123;</span><br><span class="line">      width: 345px;</span><br><span class="line">      height: 150px;</span><br><span class="line">      bg: #000;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">1rem = 根字体大小 = 100px</span><br><span class="line">那么设计稿以iphone6设置的宽度是345px，左右15px，居上15px，都需要去适配</span><br><span class="line">345px =&gt; 3.45rem =&gt; (设计稿/根字体)</span><br><span class="line">15px  =&gt; 0.15rem</span><br><span class="line">根字体计算：（手机横向设备独立像素值 * 100) / 设计稿宽度</span><br><span class="line">一般设计师设计稿都是以iphone6为例</span><br><span class="line"></span><br><span class="line">宽度3.45rem是相对根字体的，当设备是iphone6-plus</span><br><span class="line">像素值：3.45rem * 当前根字体 3.45 * 110.4 = 380.88px</span><br><span class="line">345px =&gt; 380.88px 从iphone6变化到iphone6plus，这样就完成了适配</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adapter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 获取布局视口宽度,因为开启了理想视口,布局视口=设备横向独立像素值</span></span><br><span class="line">  <span class="keyword">const</span> dpWidth = <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">  <span class="comment">// 计算根字体大小</span></span><br><span class="line">  <span class="keyword">const</span> rootFontSize = (dpWidth * <span class="number">100</span>) / <span class="number">375</span></span><br><span class="line">  <span class="comment">// 设置根字体大小</span></span><br><span class="line">  <span class="built_in">document</span>.documentElement.style.fontSize = rootFontSize + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">adapter()</span><br><span class="line"><span class="comment">// 当设备布局视口改变时,就回调一下函数</span></span><br><span class="line"><span class="built_in">window</span>.onresize = adapter</span><br></pre></td></tr></table></figure><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210912104018.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">方案二的跟字体比较好算</span><br><span class="line">根字体: 设备独立像素值 / 10</span><br><span class="line">iphone6 : 37.5px</span><br><span class="line">pphone6plus : 41.4px</span><br><span class="line">宽度 345px =&gt; 345/(375/10) = 9.2rem</span><br><span class="line">可以轻易得出根字体大小,但是宽度等值,每次都需要计算</span><br><span class="line">此时,我们就需要利用less,来帮助程序猿计算</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// less 语言</span><br><span class="line"><span class="selector-id">#demo</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">345</span>/(<span class="number">375</span>/<span class="number">10</span>)rem</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// css 语言</span><br><span class="line"><span class="selector-id">#demo</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">9.2</span> rem</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">计算后的确是<span class="number">9.2</span>,但是不生效,因为单位rem前面会有空格,原因是我们在less上用了括号,此时我们要利用less 的变量</span><br><span class="line">且变量就带上单位</span><br><span class="line"><span class="keyword">@fontSize</span>: <span class="number">375</span>/<span class="number">10rem</span></span><br><span class="line">#demo&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">345</span>/@fontSize;</span><br><span class="line">&#125;</span><br><span class="line">这样就完美适配了</span><br><span class="line"><span class="selector-id">#demo</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">9.2rem</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vw适配"><a href="#vw适配" class="headerlink" title="vw适配"></a>vw适配</h2><p>完美接近于rem适配,但是兼容性极差</p><p><a href="https://caniuse.com/">https://caniuse.com/</a> 通过这个网站可以查询一下,很多浏览器不支持vw</p><p><strong>了解vw适配如何使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vw全称viewportwidth,就是布局视口的宽度,也就是设备横向独立像素值</span><br><span class="line">iphone6 375px iphone6plus 414px</span><br><span class="line">设计宽度 345px,高度150px ,边距15px 上边距15px</span><br><span class="line">==&gt; 345px/375px*100vw = 92vw</span><br><span class="line">==&gt; 150px/375px*100vw = 40vw</span><br><span class="line">这样适配,也能和rem适配媲美,但是兼容差</span><br></pre></td></tr></table></figure><h2 id="边框border"><a href="#边框border" class="headerlink" title="边框border"></a>边框border</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">关于物理像素,当你手机的dpi是1,那么border:1px;物理像素也是1px</span><br><span class="line">如果dpi是2 =&gt; 物理像素 2px</span><br><span class="line">因此如何让物理像素值一直保存1px</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#demo</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 使用媒体media</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>:<span class="number">2</span>)&#123;</span><br><span class="line"><span class="selector-id">#demo</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0.5px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>:<span class="number">3</span>)&#123;</span><br><span class="line"><span class="selector-id">#demo</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0.333px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">关于物理像素的边框<span class="number">1px</span> 作为一个了解</span><br><span class="line"></span><br><span class="line">大厂设置的网站,如淘宝和京东,就会回避边框,不使用它</span><br></pre></td></tr></table></figure><h2 id="移动端事件"><a href="#移动端事件" class="headerlink" title="移动端事件"></a>移动端事件</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学会MongoDB玩转API接口</title>
      <link href="2021/09/08/mongon_api_doc/"/>
      <url>2021/09/08/mongon_api_doc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一-课程介绍"><a href="#一-课程介绍" class="headerlink" title="一. 课程介绍"></a>一. 课程介绍</h1><ul><li>第一章：MongoDB基础</li></ul><blockquote><p>数据库简介<br>MongoDB简介<br>MongoDB安装<br>MongoDB基本操作<br>MongoDB文档增删修查（CURD）<br>MongoDB实战教学管理系统数据库设计</p></blockquote><ul><li>第二章：MongoDB高级</li></ul><blockquote><p>MongoDB分页&amp;排序<br>MongoDB聚合查询<br>MongoDB优化索引<br>MongoDB权限机制<br>MongoDB备份还原<br>实战可视化管理工具</p></blockquote><ul><li>第三章：玩转API接口</li></ul><blockquote><p>mongoose简介(schema&amp;model)<br>mongoose使用<br>接口概念<br>接口开发规范（Restful API）<br>接口测试工具（Postman&amp;Insomnia）<br>实战教学管理系统学生模块接口开发<br>实战接口文档开发apiDoc</p></blockquote><h1 id="二-教学目标"><a href="#二-教学目标" class="headerlink" title="二. 教学目标"></a>二. 教学目标</h1><p>能够说出数据库的作用&amp;种类</p><p>能够独立完成数据库设计</p><p>能够独立完成MongoDB数据库CURD</p><p>能够实现分页、数据统计、索引、备份等功能</p><p>能够使用mongoose开发接口(略难)</p><p>能够使用apiDoc开发接口文档</p><h1 id="三-数据库简介"><a href="#三-数据库简介" class="headerlink" title="三. 数据库简介"></a>三. 数据库简介</h1><h2 id="为什么要学数据库"><a href="#为什么要学数据库" class="headerlink" title="为什么要学数据库"></a>为什么要学数据库</h2><p>在实战开发中</p><ul><li>天猫：用户将商品加入购物车-下单-新增/修改收货人信息-创建订单</li><li>京东：用户将商品加入购物车-下单-新增/修改收货人信息-创建订单</li><li>等</li></ul><p>网站都会产生大量的数据。</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//1584866023346.png" alt="1584866023346"> </p><p>思考：这些数据存放在哪里呢？</p><p>回答：数据库中</p><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p><img src="https://gitee.com/lovehuating/image/raw/master/1584866055107.png" alt="1584866055107"> </p><ul><li>分析</li></ul><blockquote><p>Ø 在生活中 </p><p>通过<strong>仓库</strong>来存放<strong>物品</strong>，每个<strong>仓库</strong>有N个<strong>架子</strong>，每个<strong>架子</strong>上有N个<strong>物品</strong>；</p><p>Ø 在程序中</p><p>通过变量来临时存储数据，便于后期脚本运行时进行判断和数据处理；</p><p>通过<strong>数据库</strong>来存放<strong>数据</strong>，每个<strong>数据库</strong>有N个<strong>表/集合</strong>，每个<strong>表/集合</strong>里面有N条<strong>数据</strong>；</p><p>多学一招：集合/分类目的将数据归类，录入用户放stu集合、订单放order集合</p></blockquote><ul><li>结论：数据库就是用来存放数据的仓库（留心仓库架子、数据库中集合</li></ul><h2 id="能干吗"><a href="#能干吗" class="headerlink" title="能干吗"></a>能干吗</h2><p>应用场景</p><p>用来存放项目数据、例如淘宝、京东、天猫、滴滴等</p><h2 id="种类（了解）"><a href="#种类（了解）" class="headerlink" title="种类（了解）"></a>种类（了解）</h2><ul><li>种类</li></ul><blockquote><p>关系型：Oracle、MySQL、SQLite 、SQL Server等</p><p>非关系型（<strong>No</strong>t Only <strong>SQL</strong>）：MongoDB（文档）、Redis/Memcache（内存）</p></blockquote><ul><li>关系型和非关系型数据库软件区别</li></ul><blockquote><p>相同点：都是数据库软件，用来存放项目数据</p><p>不同点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关系型：1.遵循SQL标准，换句话说语法大同小异、2.有库和表约束等</span><br><span class="line">非关系型：1.没有统一标准、2.一般键值对形式存储、3.读取速度更快</span><br></pre></td></tr></table></figure></blockquote><ul><li>关系型和非关系型数据库软件如何选择</li></ul><p><img src="https://gitee.com/lovehuating/image/raw/master/1584866152181.png" alt="1584866152181"> </p><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>为什么学：项目存放数据需要，加薪</p><p>是什么：计算机中用来存放数据的仓库</p><p>能干吗：存放淘宝、京东、天猫等项目数据</p><p>种类：很多，根据不同的业务场景选择，咱们本套课程主要学习MongoDB</p><h1 id="四-MongoDB简介"><a href="#四-MongoDB简介" class="headerlink" title="四. MongoDB简介"></a>四. MongoDB简介</h1><h2 id="是什么（了解）"><a href="#是什么（了解）" class="headerlink" title="是什么（了解）"></a>是什么（了解）</h2><p><img src="https://gitee.com/lovehuating/image/raw/master/1584870927181.png" alt="1584870927181"> </p><ul><li>基于分布式文件存储数据库（就是一个数据库</li><li>C++语言编写</li><li>支持的数据结构非常松散，是类似json的bson格式（后期插入修改数据写JSON</li></ul><blockquote><p>JSON（JavaScript Object Notation, JS 对象简谱）是一种轻量级的数据交换格式<br>bson（二进制JSON）</p></blockquote><h2 id="能干吗-1"><a href="#能干吗-1" class="headerlink" title="能干吗"></a>能干吗</h2><ul><li>存放项目数据</li><li>实战工作开发写API接口（重要</li><li>等</li></ul><h2 id="去哪下"><a href="#去哪下" class="headerlink" title="去哪下"></a>去哪下</h2><p>windows版本下载：<a href="https://www.mongodb.org/dl/win32">https://www.mongodb.org/dl/win32</a><br>linux版本下载：<a href="https://www.mongodb.org/dl/linux">https://www.mongodb.org/dl/linux</a></p><p><a href="https://www.mongodb.com/download-center/community">https://www.mongodb.com/download-center/community</a> </p><p>版本说明</p><p>2.x</p><p>3.x  （3.2 、3.4、3.6 </p><p>4.x  （4.2  更佳的数据管理能力、更强的分布式架构、多文档事物等</p><h1 id="五-MongoDB安装"><a href="#五-MongoDB安装" class="headerlink" title="五. MongoDB安装"></a>五. MongoDB安装</h1><h2 id="win系统"><a href="#win系统" class="headerlink" title="win系统"></a>win系统</h2><p>步骤1：下载  <a href="https://www.mongodb.com/download-center/community">https://www.mongodb.com/download-center/community</a></p><p>步骤2：解压</p><p>步骤3：创建服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bin/mongod.exe --install --dbpath  磁盘路径  --logpath 日志路径</span><br><span class="line"></span><br><span class="line">留心1：比如通过管理员身份运行DOS窗口 否则没有权限创建失败</span><br><span class="line">留心2：得提前创建数据和日志存放目录</span><br></pre></td></tr></table></figure><p>步骤4：启动服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mongodb</span><br></pre></td></tr></table></figure><p>步骤5：登录（验证是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/mongo</span><br></pre></td></tr></table></figure><p>周边语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建服务：bin/mongod.exe --install  --dbpath  磁盘路径  --logpath 日志路径</span><br><span class="line">删除服务：bin/mongod.exe --remove</span><br><span class="line">启动服务：net start mongodb  （注：service 服务名d restart/stop/start）</span><br><span class="line">关闭服务：net stop mongodb</span><br></pre></td></tr></table></figure><h2 id="非win系统（Linux、mac"><a href="#非win系统（Linux、mac" class="headerlink" title="非win系统（Linux、mac"></a>非win系统（Linux、mac</h2><p><strong>Linux</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#步骤1：下载</span><br><span class="line">curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz</span><br><span class="line">#步骤2：解压</span><br><span class="line">tar -zxvf mongodb-linux-x86_64-3.0.6.tgz </span><br><span class="line">#步骤3：将解压包拷贝到指定目录</span><br><span class="line">mv mongodb-linux-x86_64-3.0.6/ /usr/local/mongodb</span><br><span class="line">#步骤4：创建数据存放目录与日志存放目录</span><br><span class="line">mkdir -p /usr/local/mongodb/data /usr/local/mongodb/logs</span><br><span class="line">#步骤5：启动MongoDB服务</span><br><span class="line">/usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data --logpath=/usr/local/mongodb/logs/mongodb.log --logappend --port=27017 --fork</span><br><span class="line"></span><br><span class="line">#后期登录即可</span><br><span class="line">/usr/local/mongodb/bin/mongo</span><br></pre></td></tr></table></figure><p><strong>mac</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 步骤1：进入/usr/local</span><br><span class="line">cd /usr/local</span><br><span class="line"># 步骤2：下载</span><br><span class="line">sudo curl -O https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.9.tgz</span><br><span class="line"># 步骤3：解压</span><br><span class="line">sudo tar -zxvf mongodb-osx-ssl-x86_64-4.0.9.tgz</span><br><span class="line">#步骤4：重命名</span><br><span class="line">sudo mv mongodb-osx-x86_64-4.0.9/ mongodb</span><br><span class="line">#步骤5：创建数据存放目录与日志存放目录</span><br><span class="line">sudo mkdir -p /usr/local/mongodb/data /usr/local/mongodb/logs</span><br><span class="line">#步骤6：启动MongoDB服务</span><br><span class="line">/usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data --logpath=/usr/local/mongodb/logs/mongodb.log --logappend --port=27017 --fork</span><br><span class="line"></span><br><span class="line">#后期登录即可</span><br><span class="line">/usr/local/mongodb/bin/mongo</span><br></pre></td></tr></table></figure><h1 id="六-MongoDB基本操作"><a href="#六-MongoDB基本操作" class="headerlink" title="六. MongoDB基本操作"></a>六. MongoDB基本操作</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="#基本概念"></a>#基本概念</h2><ul><li>生活中：仓库、架子、物品</li><li>计算机：数据库（database）、集合（collection）、数据/文档（document）</li></ul><h2 id="查看数据库"><a href="#查看数据库" class="headerlink" title="#查看数据库"></a>#查看数据库</h2><p>语法：show  databases</p><p>效果</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1584875413549.png" alt="1584875413549"> </p><h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="#选择数据库"></a>#选择数据库</h2><p>语法：use 数据库名 </p><p>效果</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1584875558493.png" alt="1584875558493"> </p><h2 id="查看集合"><a href="#查看集合" class="headerlink" title="#查看集合"></a>#查看集合</h2><p>语法：show collections</p><p>效果</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1584875655482.png" alt="1584875655482"> </p><h2 id="创建集合"><a href="#创建集合" class="headerlink" title="#创建集合"></a>#创建集合</h2><p>语法：db.createCollection(‘集合名’)</p><p>效果</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1584875763507.png" alt="1584875763507"> </p><h2 id="删除集合"><a href="#删除集合" class="headerlink" title="#删除集合"></a>#删除集合</h2><p>语法：db.集合名.drop()</p><p>效果</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1584875825749.png" alt="1584875825749"> </p><p>思考：如何删除数据库？</p><p>回答：1通过use语法选中数据库，2通过db.dropDatabase()删除数据库</p><h2 id="小总结-1"><a href="#小总结-1" class="headerlink" title="小总结"></a>小总结</h2><p>数据库（查看、创建、选择、删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看：show databases</span><br><span class="line">创建：有单独的语法，但是忽略  隐式创建</span><br><span class="line">选择：use 数据库名</span><br><span class="line">删除：1通过use选中数据库，2通过db.dropDatabase()删除数据库</span><br></pre></td></tr></table></figure><p>集合（查看、创建、删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看：show collections</span><br><span class="line">创建：db.createCollection(&#x27;集合名&#x27;)      多学一招：忽略  后期插入数据 隐式创建集合</span><br><span class="line">删除：db.集合名.drop()</span><br></pre></td></tr></table></figure><h1 id="七-MongoDB文档增删修查（CURD）"><a href="#七-MongoDB文档增删修查（CURD）" class="headerlink" title="七. MongoDB文档增删修查（CURD）"></a>七. MongoDB文档增删修查（CURD）</h1><h2 id="明确需求"><a href="#明确需求" class="headerlink" title="明确需求"></a>明确需求</h2><p>数据库主要用来存放项目数据</p><p>然后我们已经学会了数据库和集合的创建</p><p>思考：如何实现集合中数据的增删改查呢？</p><p>回答：通过MongoDB语法即可</p><h2 id="C增"><a href="#C增" class="headerlink" title="#C增"></a>#C增</h2><p><strong>语法：</strong>db.集合名.insert(JSON数据)</p><p><strong>说明：</strong>集合存在-则直接插入数据，集合不存在-隐式创建</p><p><strong>练习：</strong>在test2数据库的c1集合中插入数据（姓名叫webopenfather年龄18岁）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use test2</span><br><span class="line">db.c1.insert(&#123;uname:&quot;webopenfather&quot;, age:18&#125;)</span><br><span class="line"></span><br><span class="line">留心1：数据库和集合不存在都隐式创建</span><br><span class="line">留心2：对象的键统一不加引号方便看，但是查看集合数据时系统会自动加</span><br><span class="line">留心3：mongodb会给每条数据增加一个全球唯一的_id键 </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lovehuating/image/raw/master/1584877524411.png" alt="1584877524411"> </p><p>多学一招：_id的组成</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1584876662100.png" alt="1584876662100"> </p><p><strong>思考1：是否可以自定义_id值？</strong></p><blockquote><p>回答：可以，只需要给插入的JSON数据增加_id键即可覆盖（但实战强烈不推荐</p><p>db.c1.insert({_id:1, uname:”webopenfather”, age:18})</p></blockquote><p><img src="https://gitee.com/lovehuating/image/raw/master/1584877675163.png" alt="1584877675163"> </p><p><strong>思考2：如何一次性插入多条记录？</strong></p><blockquote><p>回答：传递数据，数组中写一个个JSON数据即可</p><p>  db.c1.insert([<br>      {uname:”z3”, age:3},<br>      {uname:”z4”, age:4},<br>      {uname:”w5”, age:5}<br>  ])</p><p>​<br>​  含义：一次性插入3条数据到c1集合</p></blockquote><p><img src="https://gitee.com/lovehuating/image/raw/master/1584877835658.png" alt="1584877835658"> </p><p><strong>思考3：如何快速插入10条数据</strong></p><blockquote><p>回答：mongodb底层使用JS引擎实现的，所以支持部分js语法</p><p>因此：可以写for循环</p><p>  for (var i=1; i&lt;=10; i++) {<br>      print(i)<br>  }</p><p>  需求：在test2数据库c2集合中插入10条数据，分别为 a1 a2 … a10<br>  use test2<br>  for (var i=1; i&lt;=10; i++) {<br>      db.c2.insert({uanme: “a”+i, age: i})<br>  }</p></blockquote><p><img src="https://gitee.com/lovehuating/image/raw/master/1584878095317.png" alt="1584878095317"> </p><h2 id="R查"><a href="#R查" class="headerlink" title="#R查"></a>#R查</h2><p><strong>基础语法：</strong>db.集合名.find(条件  [,查询的列])</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">条件</span><br><span class="line">  查询所有数据       &#123;&#125;或者不写</span><br><span class="line">  查询age=6的数据      &#123;age:6&#125;</span><br><span class="line">    既要age=6又要性别=男    &#123;age:6,sex:&#x27;男&#x27;&#125;</span><br><span class="line">    </span><br><span class="line">查询的列（可选参数</span><br><span class="line">  不写 - 这查询全部列（字段</span><br><span class="line">  &#123;age:1&#125;  只显示age列（字段</span><br><span class="line">  &#123;age:0&#125;  除了age列（字段都显示</span><br><span class="line">  留心：不管你怎么写系统自定义的_id都会在</span><br></pre></td></tr></table></figure><p><strong>升级语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.find(&#123;键:值&#125;)   注：值不直接写</span><br><span class="line">         &#123;运算符:值&#125;</span><br><span class="line">db.集合名.find(&#123;</span><br><span class="line">  键:&#123;运算符:值&#125;</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">运算符</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center">$gt</td><td align="left">大于</td></tr><tr><td align="center">$gte</td><td align="left">大于等于</td></tr><tr><td align="center">$lt</td><td align="left">小于</td></tr><tr><td align="center">$lte</td><td align="left">小于等于</td></tr><tr><td align="center">$ne</td><td align="left">不等于</td></tr><tr><td align="center">$in</td><td align="left">in</td></tr><tr><td align="center">$nin</td><td align="left">not in</td></tr></tbody></table><p><strong>练习1：查询所有数据</strong></p><p><img src="https://gitee.com/lovehuating/image/raw/master/1584879409036.png" alt="1584879409036"> </p><p><strong>练习2：查询年龄大于5岁的数据？</strong></p><p><img src="https://gitee.com/lovehuating/image/raw/master/1584879582863.png" alt="1584879582863"> </p><p><strong>练习3：查询年龄是5岁、8岁、10岁的数据？</strong></p><p><img src="https://gitee.com/lovehuating/image/raw/master/1584879685355.png" alt="1584879685355"> </p><p><strong>练习3：只看年龄列，或者年龄以外的列（_id别管它）？</strong></p><p><img src="https://gitee.com/lovehuating/image/raw/master/1584879731549.png" alt="1584879731549"> </p><h2 id="U改"><a href="#U改" class="headerlink" title="#U改"></a>#U改</h2><p><strong>基础语法：</strong> db.集合名.update（条件， 新数据  [,是否新增，是否修改多条]）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">是否新增：指条件匹配不到数据则插入(true是插入，false否不插入默认)</span><br><span class="line">是否修改多条：指将匹配成功的数据都修改（true是，false否默认）</span><br></pre></td></tr></table></figure><p><strong>升级语法</strong></p><p>说明：</p><p>是否新增：指匹配不到数据则插入（true-是插入，false-否不插入默认）</p><p>是否修改多条：将匹配成功的数据都修改（true-是，false-否默认）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.update（条件， 新数据）</span><br><span class="line">            &#123;修改器: &#123;键:值&#125;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">修改器</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center">$inc</td><td align="left">递增</td></tr><tr><td align="center">$rename</td><td align="left">重命名列</td></tr><tr><td align="center">$set</td><td align="left">修改列值</td></tr><tr><td align="center">$unset</td><td align="left">删除列</td></tr></tbody></table><p><strong>准备工作</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use test2;</span><br><span class="line">for(var i = 1; i&lt;= 10; i++)&#123;</span><br><span class="line">  db.c3.insert( &#123;&quot;uname&quot;:&quot;zs&quot;+i,&quot;age&quot;:i&#125; );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习1：将{uname:</strong>“<strong>zs1</strong>“<strong>}改为{uname:</strong>“<strong>zs2</strong>“<strong>}</strong></p><p><img src="https://gitee.com/lovehuating/image/raw/master/1584883099949.png" alt="1584883099949"> </p><blockquote><p>发现：默认不是修改，而是替换</p><p>解决：使用升级语法 修改器</p><p>需求：使用修改器将zs4的姓名改为zs44</p><p>语法：db.c3.update({uname:”zs4”}, {$set: {uname: “zs44”}})</p></blockquote><p><img src="https://gitee.com/lovehuating/image/raw/master/1584883391699.png" alt="1584883391699"> </p><p><strong>练习2：给{uname:</strong>“<strong>zs10</strong>“<strong>}的年龄加2岁或者减2岁</strong></p><p><img src="https://gitee.com/lovehuating/image/raw/master/1584883478690.png" alt="1584883478690"> </p><p><img src="https://gitee.com/lovehuating/image/raw/master/1584883523057.png" alt="1584883523057"> </p><p><strong>练习3：修改器综合练习</strong> </p><p>插入数据：db.c4.insert( {uname:”神龙教主”,age:888,who:”男”,other:”非国人”});</p><blockquote><p>完成需求：<br>uname  改成   webopenfather      (修改器：$set）<br>age    增加   111                   (修改器：$inc）<br>who   改字段 sex                  (修改器：$rename）<br>other 删除                      (修改器：$unset）</p><p>语法分析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">db.c4.update(&#123;uname:&quot;神龙教主&quot;&#125;, &#123;uname: &quot;webopenfather&quot;&#125;)   #错误，替换</span><br><span class="line">                  &#123;$set: &#123;uname: &quot;webopenfather&quot;&#125;&#125;</span><br><span class="line">                  &#123;$inc: &#123;age: 111&#125;&#125;</span><br><span class="line">                  &#123;$rename: &#123;who: &quot;sex&quot;&#125;&#125;</span><br><span class="line">                  &#123;$unset: &#123;other: true&#125;&#125;</span><br><span class="line">留心如何一次性写多个修改器</span><br><span class="line">db.c4.update(&#123;uname:&quot;神龙教主&quot;&#125;, &#123;</span><br><span class="line">    $set: &#123;uname: &quot;webopenfather&quot;&#125;,</span><br><span class="line">    $inc: &#123;age: 111&#125;,</span><br><span class="line">    $rename: &#123;who: &quot;sex&quot;&#125;,</span><br><span class="line">    $unset: &#123;other: true&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://gitee.com/lovehuating/image/raw/master/1584883798685.png" alt="1584883798685"> </p><p><strong>练习4：验证语法最后两个参数（了解）</strong></p><p>【验证】是否新增true是false否：修改uame 等于 zs30的年龄 30岁 </p><p><img src="https://gitee.com/lovehuating/image/raw/master/1584883984485.png" alt="1584883984485"> </p><p>【验证】是否修改多条true是，false否默认</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1584884114315.png" alt="1584884114315"> </p><h2 id="D删"><a href="#D删" class="headerlink" title="#D删"></a>#D删</h2><p>语法：db.集合名.remove(条件 [, 是否删除一条] )</p><p>注意：是否删除一条 true是,false否 默认</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1584884531503.png" alt="1584884531503"> </p><h2 id="小总结-2"><a href="#小总结-2" class="headerlink" title="小总结"></a>小总结</h2><p>高级开发攻城狮统称：所有数据库都需要增删改查CURD标识</p><p>MongoDB删除语法：remove </p><p>增Create</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.insert(JSON数据)</span><br></pre></td></tr></table></figure><p>删Delete</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.remove(条件 [,是否删除一条true是false否默认])</span><br><span class="line"></span><br><span class="line">也就是默认删除多条</span><br></pre></td></tr></table></figure><p>改Update</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.update(条件， 新数据  [,是否新增,是否修改多条])</span><br><span class="line"></span><br><span class="line">升级语法db.集合名.update(条件，&#123;修改器：&#123;键：值&#125;&#125;)</span><br></pre></td></tr></table></figure><p>查Read</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.find(条件 [,查询的列])</span><br></pre></td></tr></table></figure><h1 id="八-MongoDB实战教学管理系统数据库设计"><a href="#八-MongoDB实战教学管理系统数据库设计" class="headerlink" title="八. MongoDB实战教学管理系统数据库设计"></a>八. MongoDB实战教学管理系统数据库设计</h1><p><img src="https://gitee.com/lovehuating/image/raw/master/1584885052792.png" alt="1584885052792"> </p><h2 id="实战开发流程"><a href="#实战开发流程" class="headerlink" title="实战开发流程"></a>实战开发流程</h2><p><img src="https://gitee.com/lovehuating/image/raw/master/1584885071168.png" alt="1584885071168"> </p><h2 id="数据库设计流程"><a href="#数据库设计流程" class="headerlink" title="数据库设计流程"></a>数据库设计流程</h2><p>根据UI设计稿</p><p>1确定功能模块所属集合</p><p>2确定集合字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">UI设计稿每个展示内容对应一个字段</span><br><span class="line">创建于字段</span><br><span class="line">更新于字段</span><br><span class="line">状态字段</span><br><span class="line"></span><br><span class="line">最后：先中文、再英文</span><br><span class="line">留心：上述规则照顾基础差的，如果大神 或 久而久之 就变成肌肉记忆 下意识直接创建</span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ul><li><p>需求：根据千锋教学系统，设置存放学生信息的集合，并插入20条测试数据</p></li><li><p>代码</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1. 先中文</span><br><span class="line">集合名称：学生集合</span><br><span class="line">集合字段：编号、学好、姓名、电话、性别、年龄、学历、备注</span><br><span class="line"></span><br><span class="line">2. 再英文</span><br><span class="line"></span><br><span class="line">use school</span><br><span class="line">for (var num=1; num&lt;=20; num++) &#123;</span><br><span class="line">    db.stu.insert(&#123;</span><br><span class="line">        id:num,</span><br><span class="line">        no: &quot;QF&quot;+num,</span><br><span class="line">        uname: &quot;神龙教&quot;+num,</span><br><span class="line">        tel: &quot;1111111111&quot;,</span><br><span class="line">        sex: &quot;女&quot;,</span><br><span class="line">        age: num,</span><br><span class="line">        school: &quot;研究生&quot;,</span><br><span class="line">        remark: &quot;土豪&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="九-MongoDB排序-amp-分页"><a href="#九-MongoDB排序-amp-分页" class="headerlink" title="九. MongoDB排序&amp;分页"></a>九. MongoDB排序&amp;分页</h1><h2 id="明确需求-1"><a href="#明确需求-1" class="headerlink" title="明确需求"></a>明确需求</h2><p>数据库，是用来存放数据的</p><p>咱们后期从数据库获取数据 需要排序  、多页展示如何实现？ </p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585470698327.png" alt="1585470698327"> </p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585470708367.png" alt="1585470708367"> </p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">use test3</span><br><span class="line">db.c1.insert(&#123;_id:1,name:&quot;a&quot;,sex:1,age:1&#125;)</span><br><span class="line">db.c1.insert(&#123;_id:2,name:&quot;a&quot;,sex:1,age:2&#125;)</span><br><span class="line">db.c1.insert(&#123;_id:3,name:&quot;b&quot;,sex:2,age:3&#125;)</span><br><span class="line">db.c1.insert(&#123;_id:4,name:&quot;c&quot;,sex:2,age:4&#125;)</span><br><span class="line">db.c1.insert(&#123;_id:5,name:&quot;d&quot;,sex:2,age:5&#125;)</span><br><span class="line"></span><br><span class="line">db.c1.find()</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ul><li><p>语法：db.集合名.find().sort(JSON数据)</p></li><li><p>说明：键-就是要排序的列/字段、值：1 升序  -1 降序</p></li><li><p>练习：年龄升序&amp;降序</p></li></ul><blockquote><p> <img src="https://gitee.com/lovehuating/image/raw/master/1585472204585.png" alt="1585472204585"> </p></blockquote><h2 id="Limit与Skip方法"><a href="#Limit与Skip方法" class="headerlink" title="Limit与Skip方法"></a>Limit与Skip方法</h2><ul><li>语法：db.集合名.find().sort().skip(数字).limit(数字)</li><li>说明：skip跳过指定数量（可选），limit限制查询的数量</li><li>练习：1-降序查询查询2条，2-降序跳过2条并查询2条</li></ul><blockquote><p><img src="https://gitee.com/lovehuating/image/raw/master/1585472467480.png" alt="1585472467480"> </p></blockquote><h2 id="实战分页"><a href="#实战分页" class="headerlink" title="实战分页"></a>实战分页</h2><p>需求：数据库 1  - 10数据，每页显示两条（5页）</p><p>语法：db.集合名.find().skip().limit(2)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">skip计算公式：（当前页 - 1） * 每页显示条数</span><br><span class="line"></span><br><span class="line">1页    1  2    0</span><br><span class="line">2页    3  4    2</span><br><span class="line">3页    5  6    4</span><br><span class="line">4页    7  8    6</span><br><span class="line">5页    9  10    8</span><br></pre></td></tr></table></figure><h2 id="小总结-3"><a href="#小总结-3" class="headerlink" title="小总结"></a>小总结</h2><p>db.集合名.find()</p><p>.sort({列: 1/-1}) 排序</p><p>.skip(数字)   跳过指定数量</p><p>.limit(数字) 限制查询条数</p><p>.count()   统计总数量</p><p>不够：百度或谷歌</p><h1 id="十-MongoDB聚合查询"><a href="#十-MongoDB聚合查询" class="headerlink" title="十. MongoDB聚合查询"></a>十. MongoDB聚合查询</h1><h2 id="明确需求-2"><a href="#明确需求-2" class="headerlink" title="明确需求"></a>明确需求</h2><p><img src="https://gitee.com/lovehuating/image/raw/master/1585472901948.png" alt="1585472901948"> </p><p>思考：如何统计数据、如何实现分组统计等？</p><p>回答：通过MongoDB聚合查询</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>聚合查询</p><p>顾名思义就是把数据聚起来，然后统计</p><h2 id="语法-略复杂"><a href="#语法-略复杂" class="headerlink" title="语法(略复杂"></a>语法(略复杂</h2><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.aggregate([</span><br><span class="line">    &#123;管道:&#123;表达式&#125;&#125;</span><br><span class="line">     ....</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>常用管道</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$group 将集合中的文档分组，用于统计结果</span><br><span class="line">$match 过滤数据，只要输出符合条件的文档</span><br><span class="line">$sort  聚合数据进一步排序</span><br><span class="line">$skip  跳过指定文档数</span><br><span class="line">$limit 限制集合数据返回文档数</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>常用表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$sum  总和  $sum:1同count表示统计</span><br><span class="line">$avg  平均</span><br><span class="line">$min  最小值</span><br><span class="line">$max  最大值</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use test4</span><br><span class="line">db.c1.insert(&#123;_id:1,name:&quot;a&quot;,sex:1,age:1&#125;)</span><br><span class="line">db.c1.insert(&#123;_id:2,name:&quot;a&quot;,sex:1,age:2&#125;)</span><br><span class="line">db.c1.insert(&#123;_id:3,name:&quot;b&quot;,sex:2,age:3&#125;)</span><br><span class="line">db.c1.insert(&#123;_id:4,name:&quot;c&quot;,sex:2,age:4&#125;)</span><br><span class="line">db.c1.insert(&#123;_id:5,name:&quot;d&quot;,sex:2,age:5&#125;)</span><br></pre></td></tr></table></figure><h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><ul><li>统计男生、女生的总年龄</li></ul><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.c1.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">      $group:&#123;</span><br><span class="line">            _id: &quot;$sex&quot;,</span><br><span class="line">            rs: &#123;$sum: &quot;$age&quot;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lovehuating/image/raw/master/1585473992676.png" alt="1585473992676"> </p></blockquote><ul><li>统计男生、女生的总人数</li></ul><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.c1.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">      $group:&#123;</span><br><span class="line">            _id: &quot;$sex&quot;,</span><br><span class="line">            rs: &#123;$sum:1&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lovehuating/image/raw/master/1585474123142.png" alt="1585474123142"> </p></blockquote><ul><li>求学生总数和平均年龄</li></ul><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.c1.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">      $group:&#123;</span><br><span class="line">            _id: null,</span><br><span class="line">            total_num: &#123;$sum:1&#125;,</span><br><span class="line">            total_avg: &#123;$avg: &quot;$age&quot;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://gitee.com/lovehuating/image/raw/master/1585474285569.png" alt="1585474285569"> </p></blockquote><ul><li>查询男生、女生人数，按人数升序</li></ul><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.c1.aggregate([</span><br><span class="line">    &#123;$group:&#123;_id: &quot;$sex&quot;,rs: &#123;$sum: 1&#125;&#125;&#125;,</span><br><span class="line">    &#123;$sort:&#123;rs: -1&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lovehuating/image/raw/master/1585474498560.png" alt="1585474498560"> </p></blockquote><h1 id="十一-MongoDB优化索引"><a href="#十一-MongoDB优化索引" class="headerlink" title="十一. MongoDB优化索引"></a>十一. MongoDB优化索引</h1><h2 id="生活中的索引"><a href="#生活中的索引" class="headerlink" title="生活中的索引"></a>生活中的索引</h2><p><img src="https://gitee.com/lovehuating/image/raw/master/1585474692372.png" alt="1585474692372"> </p><h2 id="数据库中的索引"><a href="#数据库中的索引" class="headerlink" title="数据库中的索引"></a>数据库中的索引</h2><ul><li><p>说明：索引是一种排序好的便于快速查询的数据结构</p></li><li><p>作用：帮助数据库高校的查询数据</p></li></ul><p><img src="https://gitee.com/lovehuating/image/raw/master/1585475724394.png" alt="1585475724394"> </p><h2 id="索引优缺点"><a href="#索引优缺点" class="headerlink" title="索引优缺点"></a>索引优缺点</h2><ul><li>优点</li></ul><blockquote><p>提高数据查询的效率，降低数据库的IO成本<br>通过索引对数据进行排序，降低数据排序的成本，降低CPU的消耗</p></blockquote><ul><li>缺点</li></ul><blockquote><p>占用磁盘空间<br>大量索引影响SQL语句效率，因为每次插入和修改数据都需要更新索引</p></blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li>创建索引语法：db.集合名.createIndex(待创建索引的列 [,额外选项])</li><li>参数：</li></ul><blockquote><p>待创建索引的列：{键:1,…,键:-1}<br>说明：1升序 -1降序 例如{age:1}表示创建age索引并按照升序的方式存储<br>额外选项：设置索引的名称或者唯一索引等等</p></blockquote><ul><li>删除索引语法：</li></ul><blockquote><p>全部删除：db.集合名.dropIndexes()</p><p>删除指定：db.集合名.dropIndex(索引名)</p></blockquote><ul><li>查看索引语法：db.集合名.getIndexes()</li></ul><h2 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h2><p><strong>准备：</strong>向数据库中新增十万条数据 </p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//选择数据库</span><br><span class="line">use test5;</span><br><span class="line">//向数据库中添加数据</span><br><span class="line">for(var i=0;i&lt;100000;i++)&#123;</span><br><span class="line">db.c1.insert(&#123;&#x27;name&#x27;:&quot;aaa&quot;+i,&quot;age&quot;:i&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><strong>创建普通索引</strong></p><blockquote><p>需  求：给name添加普通索引</p><p>练习1：给name添加普通索引，命令：db.c1.createIndex({name:1})</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585476182255.png" alt="1585476182255"> </p><p>练习2：删除name索引，命令：db.c1.dropIndex(‘name_1’)</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585476235731.png" alt="1585476235731"> </p><p>练习3：给name创建索引并起名webopenfather </p><p>命令：db.c1.createIndex({name:1}, {name: “webopenfather”})</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585476311406.png" alt="1585476311406"> </p></blockquote><p><strong>创建复合/组合索引</strong></p><blockquote><p>需求：给name和age添加组合索引</p><p>说明：就是一次性给两个字段建立索引</p><p>语法：db.集合名.createIndex({键1:方式,键2:方式})</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585476428632.png" alt="1585476428632"> </p></blockquote><p><strong>创建唯一索引</strong></p><blockquote><p>需 求：给name添加普通索引</p><p>语 法：db.集合名.createIndex(待添加索引的列， {unique: 列名})</p><p>练习1：删除全部索引，命令：db.c1.dropIndexes();</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585476535470.png" alt="1585476535470"> </p><p>练习2：设置唯一索引，命令：db.c1.createIndex({name:1}, {unique: “name”})</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585476576207.png" alt="1585476576207"> </p><p>练习3：测试唯一索引特性，</p><p>命 令：<br>db.c1.insert({name: “a”});<br>db.c1.insert({name: “a”});</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585476763631.png" alt="1585476763631"> </p></blockquote><h2 id="分析索引（explain）"><a href="#分析索引（explain）" class="headerlink" title="分析索引（explain）"></a>分析索引（explain）</h2><ul><li><p>语法：db.集合名.find().explain(‘executionStats’)</p></li><li><p>说明：</p></li></ul><blockquote><p><img src="https://gitee.com/lovehuating/image/raw/master/1585461681918.png" alt="1585461681918"><br>COLLSCAN 全表扫描<br>IXSCAN  索引扫描<br>FETCH   根据索引去检索指定document</p></blockquote><ul><li>练习</li></ul><blockquote><p>测试：age未添加索引情况<br>语法：db.c1.find({age:18}).explain(‘executionStats’);</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585477310460.png" alt="1585477310460"> </p><p>测试：age添加索引情况<br>语法：db.c1.createIndex({age: 1})<br>继续：db.c1.find({age:18}).explain(‘executionStats’)<br><img src="https://gitee.com/lovehuating/image/raw/master/1585477412871.png" alt="1585477412871"> </p></blockquote><h2 id="选择规则（如何选择合适的列创建索引）"><a href="#选择规则（如何选择合适的列创建索引）" class="headerlink" title="选择规则（如何选择合适的列创建索引）"></a>选择规则（如何选择合适的列创建索引）</h2><p>-为常做条件、排序、分组的字段建立索引<br>-选择唯一性索引              （ps. 同值较少如性别字段）<br>-选择较小的数据列，为较长的字符串使用前缀索引      （ps. 索引文件更小）</p><h1 id="十二-MongoDB权限机制"><a href="#十二-MongoDB权限机制" class="headerlink" title="十二. MongoDB权限机制"></a>十二. MongoDB权限机制</h1><h2 id="明确需求-3"><a href="#明确需求-3" class="headerlink" title="明确需求"></a>明确需求</h2><p>发现我们再DOS窗口直接输入命令就可以登录数据库</p><p>这在实战工作中绝对不允许的</p><p>思考：如何解决</p><p>回答：使用权限机制，开启验证模式即可</p><h2 id="语法-略难"><a href="#语法-略难" class="headerlink" title="语法(略难"></a>语法(略难</h2><p>创建账号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123; </span><br><span class="line">    &quot;user&quot; : &quot;账号&quot;,</span><br><span class="line">    &quot;pwd&quot;: &quot;密码&quot;,</span><br><span class="line">    &quot;roles&quot; : [&#123; </span><br><span class="line">        role: &quot;角色&quot;, </span><br><span class="line">        db: &quot;所属数据库&quot;</span><br><span class="line">    &#125;] </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>角色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#角色种类</span><br><span class="line">超级用户角色：root </span><br><span class="line">数据库用户角色：read、readWrite; </span><br><span class="line">数据库管理角色：dbAdmin、userAdmin； </span><br><span class="line">集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager； </span><br><span class="line">备份恢复角色：backup、restore； </span><br><span class="line">所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase </span><br><span class="line"></span><br><span class="line">#角色说明</span><br><span class="line">root：只在admin数据库中可用。超级账号，超级权限；</span><br><span class="line">read：允许用户读取指定数据库；</span><br><span class="line">readWrite：允许用户读写指定数据库； </span><br><span class="line">dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile；</span><br><span class="line">dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限； </span><br><span class="line">clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限； </span><br><span class="line">userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户；</span><br><span class="line">userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限；</span><br><span class="line">readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限； </span><br><span class="line">readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限； </span><br></pre></td></tr></table></figure><h2 id="开启验证模式"><a href="#开启验证模式" class="headerlink" title="开启验证模式"></a>开启验证模式</h2><p>**开启验证模式概念： ** 名词，指用户需要输入账号密码才能登陆使用</p><p><strong>操作步骤</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 添加超级管理员</span><br><span class="line">2. 退出卸载服务</span><br><span class="line">3. 重新安装需要输入账号密码的服务（注在原安装命令基础上加上--auth即可</span><br><span class="line">4. 启动服务 -&gt; 登陆测试</span><br></pre></td></tr></table></figure><p><strong>步骤1：添加超级管理员</strong></p><blockquote><p>mongo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line"></span><br><span class="line">db.createUser(&#123; </span><br><span class="line">    &quot;user&quot; : &quot;admin&quot;,</span><br><span class="line">    &quot;pwd&quot;: &quot;admin888&quot;,</span><br><span class="line">    &quot;roles&quot; : [&#123; </span><br><span class="line">        role: &quot;root&quot;, </span><br><span class="line">        db: &quot;admin&quot;</span><br><span class="line">    &#125;] </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>脚下留心：2.x 3.x 4.x 前面版本默认是看不到admin没关系 你直接选中即可</p></blockquote><p><strong>步骤2：退出卸载服务</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin\mongod --remove</span><br></pre></td></tr></table></figure><p>脚下留心：DOS窗口必须用管理员省份运行</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585478949532.png" alt="1585478949532"> </p></blockquote><p><strong>步骤3：安装需要身份验证的MongoDB服务</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin\mongod --install --dbpath E:\mongodb\data --logpath E:\mongodb\logs\mongodb2.log --auth</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lovehuating/image/raw/master/1585479066717.png" alt="1585479066717"> </p></blockquote><p><strong>步骤4：启动服务 -&gt; 登录测试</strong></p><blockquote><p><img src="https://gitee.com/lovehuating/image/raw/master/1585479128562.png" alt="1585479128562"> </p></blockquote><h2 id="通过超级管理员账号登陆"><a href="#通过超级管理员账号登陆" class="headerlink" title="通过超级管理员账号登陆"></a>通过超级管理员账号登陆</h2><ul><li>方法1：mongo 服务器IP地址:端口/数据库 -u 用户名 -p 密码</li></ul><blockquote><p><img src="https://gitee.com/lovehuating/image/raw/master/1585479276933.png" alt="1585479276933"> </p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585479291125.png" alt="1585479291125"> </p></blockquote><ul><li>方法2：a-先登录，b-选择数据库，c-输入db.auth(用户名,密码)</li></ul><blockquote><p><img src="https://gitee.com/lovehuating/image/raw/master/1585479528999.png" alt="1585479528999"> </p></blockquote><h2 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h2><ul><li><strong>需求</strong></li></ul><blockquote><p>添加用户shop1可以读shop数据库<br>添加用户shop2可以读写shop数据库<br>脚下留心：必须在对应数据库创建用户</p></blockquote><ul><li><strong>准备：</strong>创建测试数据和测试用户（注：选择shop仓库创建用户）</li></ul><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use shop;</span><br><span class="line">for(var i=1; i&lt;=10; i++) &#123;</span><br><span class="line">    db.goods.insert(&#123;&quot;name&quot;:&quot;goodsName&quot;+i,&quot;price&quot;:i&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li><strong>添加用户并设置权限</strong></li></ul><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//切记</span><br><span class="line">use shop</span><br><span class="line"></span><br><span class="line">//shop1</span><br><span class="line">db.createUser(&#123; </span><br><span class="line">    &quot;user&quot; : &quot;shop1&quot;,</span><br><span class="line">    &quot;pwd&quot;: &quot;admin888&quot;,</span><br><span class="line">    &quot;roles&quot; : [&#123; </span><br><span class="line">        role: &quot;read&quot;, </span><br><span class="line">        db: &quot;shop&quot;</span><br><span class="line">    &#125;] </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//shop2</span><br><span class="line">db.createUser(&#123; </span><br><span class="line">    &quot;user&quot; : &quot;shop2&quot;,</span><br><span class="line">    &quot;pwd&quot;: &quot;admin888&quot;,</span><br><span class="line">    &quot;roles&quot; : [&#123; </span><br><span class="line">        role: &quot;readWrite&quot;, </span><br><span class="line">        db: &quot;shop&quot;</span><br><span class="line">    &#125;] </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote><ul><li><strong>验证：shop1可读</strong></li></ul><blockquote><p><img src="https://gitee.com/lovehuating/image/raw/master/1585479805712.png" alt="1585479805712"> </p></blockquote><ul><li><strong>验证：shop2验证可读可写</strong></li></ul><blockquote><p><img src="https://gitee.com/lovehuating/image/raw/master/1585479857883.png" alt="1585479857883"> </p></blockquote><h1 id="十三-MongoDB备份还原"><a href="#十三-MongoDB备份还原" class="headerlink" title="十三. MongoDB备份还原"></a>十三. MongoDB备份还原</h1><h2 id="明确需求-4"><a href="#明确需求-4" class="headerlink" title="明确需求"></a>明确需求</h2><p>在实战工作中一定要做好数据库备份工作</p><p>否则万一数据丢失</p><p>带来的影响是巨大的</p><h2 id="备份数据库mongodump"><a href="#备份数据库mongodump" class="headerlink" title="备份数据库mongodump"></a>备份数据库mongodump</h2><ul><li><strong>语法</strong></li></ul><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">导出数据语法：mongodump -h -port -u -p -d -o</span><br><span class="line">导出语法说明</span><br><span class="line">-h     host  服务器IP地址（一般不写 默认本机</span><br><span class="line">-port       端口（一般不写 默认27017</span><br><span class="line">-u     user   账号</span><br><span class="line">-p      pwd   密码</span><br><span class="line">-d  database  数据库（留心：数据库不写则导出全局</span><br><span class="line">-o     open   备份到指定目录下</span><br></pre></td></tr></table></figure></blockquote><ul><li>**练习(备份所有数据)**：mongodump -u admin -p admin888 -o E:\mongodb\bak</li></ul><blockquote><p><img src="https://gitee.com/lovehuating/image/raw/master/1585480505097.png" alt="1585480505097"> </p></blockquote><ul><li>**练习(备份指定数据)**：mongodump -u admin -p admin888 -d shop -o E:\mongodb\bak2</li></ul><blockquote><p><img src="https://gitee.com/lovehuating/image/raw/master/1585480639789.png" alt="1585480639789"> </p></blockquote><h2 id="还原数据库mongorestore"><a href="#还原数据库mongorestore" class="headerlink" title="还原数据库mongorestore"></a>还原数据库mongorestore</h2><ul><li><strong>语法：</strong></li></ul><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">还原数据语法：mongorestore -h -port -u -p  -d --drop 备份数据目录</span><br><span class="line">还原数据说明：</span><br><span class="line">-h </span><br><span class="line">-port </span><br><span class="line">-u </span><br><span class="line">-p</span><br><span class="line">-d       不写则还原全部数据库</span><br><span class="line">--drop   先删除数据库再导入</span><br></pre></td></tr></table></figure></blockquote><ul><li>**练习(还原所有数据)**：mongorestore -u admin -p admin888 –drop E:\mongodb\bak</li></ul><blockquote><p><img src="https://gitee.com/lovehuating/image/raw/master/1585480881340.png" alt="1585480881340"> </p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585480948534.png" alt="1585480948534"></p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585480971194.png" alt="1585480971194"> </p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585480981182.png" alt="1585480981182"> </p></blockquote><ul><li>**练习(还原指定数据)**：mongorestore -u shop2 -p admin888 -d shop –drop E:\mongodb\bak2\shop</li></ul><blockquote><p><img src="https://gitee.com/lovehuating/image/raw/master/1585481050097.png" alt="1585481050097">  </p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585481783387.png" alt="1585481783387"> </p></blockquote><h1 id="十四-实战可视化管理工具"><a href="#十四-实战可视化管理工具" class="headerlink" title="十四. 实战可视化管理工具"></a>十四. 实战可视化管理工具</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>adminMongo       WEB/PC端口网页管理      <a href="https://adminmongo.markmoffat.com/">https://adminmongo.markmoffat.com/</a></p><p>Robo 3T *       客户端软件                  <a href="https://robomongo.org/download">https://robomongo.org/download</a>/</p><p>MongoVUE           客户端软件</p><h2 id="安装Robo-3T"><a href="#安装Robo-3T" class="headerlink" title="安装Robo 3T"></a>安装Robo 3T</h2><p><img src="https://gitee.com/lovehuating/image/raw/master/1571118235273.png" alt="1571118235273"> </p><p><img src="https://gitee.com/lovehuating/image/raw/master/1571118246690.png" alt="1571118246690"> </p><p><img src="https://gitee.com/lovehuating/image/raw/master/1571118258678.png" alt="1571118258678"> </p><p><img src="https://gitee.com/lovehuating/image/raw/master/1571118267131.png" alt="1571118267131"> </p><p><img src="https://gitee.com/lovehuating/image/raw/master/1571118274662.png" alt="1571118274662"> </p><p><img src="https://gitee.com/lovehuating/image/raw/master/1571118283895.png" alt="1571118283895"> </p><h2 id="使用Robo-3T"><a href="#使用Robo-3T" class="headerlink" title="使用Robo 3T"></a>使用Robo 3T</h2><blockquote><p> <img src="https://gitee.com/lovehuating/image/raw/master/1585482451810.png" alt="1585482451810"> </p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585482549628.png" alt="1585482549628"> </p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585482465701.png" alt="1585482465701"> </p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585482566526.png" alt="1585482566526"> </p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585482668249.png" alt="1585482668249"> </p></blockquote><h1 id="十五-mongoose简介"><a href="#十五-mongoose简介" class="headerlink" title="十五. mongoose简介"></a>十五. mongoose简介</h1><h2 id="明确需求-5"><a href="#明确需求-5" class="headerlink" title="明确需求"></a>明确需求</h2><p>为什么学数据库，因为要存放项目/网站数据</p><p>思考：实战中也像我们刚刚那样敲命令？</p><p>回答：非也，而是通过程序来</p><p>思考：如何实现呢？</p><p>回答：mongoose</p><h2 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h2><p>是node中提供操作MongoDB的模块</p><h2 id="能干吗-2"><a href="#能干吗-2" class="headerlink" title="能干吗"></a>能干吗</h2><p>能够通过node语法实现MongoDB数据库增删改查</p><p>从而实现用node写程序来管理MongoDB数据库</p><h2 id="去哪下-1"><a href="#去哪下-1" class="headerlink" title="去哪下"></a>去哪下</h2><p>npm i mongoose</p><p>或者</p><p>yarn add mongoose （推荐</p><h2 id="schema"><a href="#schema" class="headerlink" title="schema"></a>schema</h2><p>英文网： <a href="http://mongoosejs.com/">http://mongoosejs.com</a></p><p>中文网： <a href="http://mongoosejs.net/">http://mongoosejs.net/</a> </p><p>作用：用来约束MongoDB文档数据（哪些字段必须，哪些字段可选的）</p><p>##model</p><p>一个模型  对应 一个集合</p><p>后面我们通过模型来管理集合中的数据</p><h2 id="小总结-4"><a href="#小总结-4" class="headerlink" title="小总结"></a>小总结</h2><p>为什么要学习mongoose：通过命令管理mongodb麻烦，通过程序管理</p><p>是什么：就是node中的一个模块</p><p>能干吗：让node借助这个模块实现管理mongodb的程序</p><p>去哪下：通过npm或yarn命令来安装</p><p>mongoose核心概念</p><blockquote><p>schema 约束字段/列数据</p><p>model模型 对应 集合 后期用它来实现数据增删改查</p></blockquote><h1 id="十六-mongoose使用"><a href="#十六-mongoose使用" class="headerlink" title="十六. mongoose使用"></a>十六. mongoose使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p> 步骤1：创建api目录</p><p>步骤2：在api目录下安装mongoose模块</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585489163978.png" alt="1585489163978"> </p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">// 一、导入模块</span><br><span class="line">const mongoose = require(&#x27;mongoose&#x27;);</span><br><span class="line">// 二、连接数据库</span><br><span class="line">const db = mongoose.createConnection(&#x27;mongodb://user:pass@localhost:port/database&#x27;, &#123;useNewUrlParser: true, useUnifiedTopology: true&#125;, err=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;---------------------------------------&#x27;)</span><br><span class="line">        console.log(&#x27;数据库连接失败：&#x27;, err)</span><br><span class="line">        console.log(&#x27;---------------------------------------&#x27;)</span><br><span class="line">        return; </span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#x27;数据库连接成功&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 三、设置数据模型（声明是哪个集合，限制字段个数和字段类型）</span><br><span class="line">const model = db.model(&#x27;user&#x27;,&#123;</span><br><span class="line">  name:&#123;type:String, default:&quot;username&quot;&#125;,</span><br><span class="line">  age:&#123;type: Number&#125;,</span><br><span class="line">  sex:&#123;type:String&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 四、创建实例操作（CURD）</span><br><span class="line"></span><br><span class="line">// 增 --------------------------------</span><br><span class="line">const insertObj = new model(数据对象)</span><br><span class="line">方法1：insertObj.save((err) =&gt; db.close()) </span><br><span class="line">方法2（推荐）</span><br><span class="line">insertObj.save()</span><br><span class="line">.then(res=&gt;&#123;</span><br><span class="line">    return res</span><br><span class="line">&#125;)</span><br><span class="line">.catch(err =&gt; &#123;</span><br><span class="line">    console.log(&#x27;插入失败&#x27; + err)</span><br><span class="line">    return false</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 删 --------------------------------</span><br><span class="line">方法1：model.remove/deleteOne/deleteMany(条件对象, (err) =&gt; db.close()) </span><br><span class="line">方法2（推荐）</span><br><span class="line">model.deleteOne(条件对象)</span><br><span class="line">.then(res =&gt; &#123;</span><br><span class="line">    return res.deletedCount</span><br><span class="line">&#125;)</span><br><span class="line">.catch(err =&gt; &#123;</span><br><span class="line">    console.log(&#x27;删除失败&#x27; + err)</span><br><span class="line">    return false</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 改 --------------------------------</span><br><span class="line">方法1：model.update/updateOne/updateMany(条件对象, 数据对象, (err) =&gt; db.close()) </span><br><span class="line">方法2（推荐）</span><br><span class="line">model.updateOne(条件对象, 数据对象) </span><br><span class="line">.then(res =&gt; &#123;</span><br><span class="line">    return res.nModified</span><br><span class="line">&#125;)</span><br><span class="line">.catch(err =&gt; &#123;</span><br><span class="line">    console.log(&#x27;修改失败&#x27; + err)</span><br><span class="line">    return false</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 查 --------------------------------</span><br><span class="line">方法1：model.find/findOne(条件对象, 要显示的字段数据对象, (err, result) =&gt; db.close()) </span><br><span class="line">方法2（推荐）</span><br><span class="line">model.findOne(条件对象) </span><br><span class="line">.then(res =&gt; &#123;</span><br><span class="line">    return res</span><br><span class="line">&#125;)</span><br><span class="line">.catch(err =&gt; &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">    return false</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="练习-4"><a href="#练习-4" class="headerlink" title="练习"></a>练习</h2><p>c.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 一、导入模块</span><br><span class="line">const mongoose = require(&#x27;mongoose&#x27;);</span><br><span class="line">// 二、连接数据库</span><br><span class="line">const db = mongoose.createConnection(&#x27;mongodb://shop2:admin888@localhost:27017/shop&#x27;, &#123;useNewUrlParser: true, useUnifiedTopology: true&#125;, err=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;---------------------------------------&#x27;)</span><br><span class="line">        console.log(&#x27;数据库连接失败：&#x27;, err)</span><br><span class="line">        console.log(&#x27;---------------------------------------&#x27;)</span><br><span class="line">        return; </span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#x27;数据库连接成功&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 三、设置数据模型（声明是哪个集合，限制字段个数和字段类型）</span><br><span class="line">const model = db.model(&#x27;api&#x27;,&#123;</span><br><span class="line">  uanme:&#123;type:String, default:&quot;神龙教主&quot;&#125;,</span><br><span class="line">  pwd:&#123;type:String&#125;,</span><br><span class="line">  // pwd: String,</span><br><span class="line">  age:&#123;type: Number&#125;,</span><br><span class="line">  sex:&#123;type:String&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 四、创建实例操作（CURD）</span><br><span class="line"></span><br><span class="line">// 增 --------------------------------</span><br><span class="line">const insertObj = new model(&#123;</span><br><span class="line">    uname: &quot;张三&quot;,</span><br><span class="line">    pwd: &quot;admin888&quot;,</span><br><span class="line">    age: 18,</span><br><span class="line">    sex: &quot;男&quot;,</span><br><span class="line">&#125;)</span><br><span class="line">insertObj.save()</span><br><span class="line">.then(res=&gt;&#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">    return res</span><br><span class="line">&#125;)</span><br><span class="line">.catch(err =&gt; &#123;</span><br><span class="line">    console.log(&#x27;插入失败&#x27; + err)</span><br><span class="line">    return false</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>r.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// 一、导入模块</span><br><span class="line">const mongoose = require(&#x27;mongoose&#x27;);</span><br><span class="line">// 二、连接数据库</span><br><span class="line">const db = mongoose.createConnection(&#x27;mongodb://shop2:admin888@localhost:27017/shop&#x27;, &#123;useNewUrlParser: true, useUnifiedTopology: true&#125;, err=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;---------------------------------------&#x27;)</span><br><span class="line">        console.log(&#x27;数据库连接失败：&#x27;, err)</span><br><span class="line">        console.log(&#x27;---------------------------------------&#x27;)</span><br><span class="line">        return; </span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#x27;数据库连接成功&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 三、设置数据模型（声明是哪个集合，限制字段个数和字段类型）</span><br><span class="line">const model = db.model(&#x27;api&#x27;,&#123;</span><br><span class="line">  uanme:&#123;type:String, default:&quot;神龙教主&quot;&#125;,</span><br><span class="line">  pwd:&#123;type:String&#125;,</span><br><span class="line">  // pwd: String,</span><br><span class="line">  age:&#123;type: Number&#125;,</span><br><span class="line">  sex:&#123;type:String&#125;</span><br><span class="line">&#125;)</span><br><span class="line">e = require(&#x27;mongoose&#x27;);</span><br><span class="line">// 二、连接数据库</span><br><span class="line">const db2 = mongoose.createConnection(&#x27;mongodb://shop2:admin888@localhost:27017/shop&#x27;, &#123;useNewUrlParser: true, useUnifiedTopology: true&#125;, err=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;---------------------------------------&#x27;)</span><br><span class="line">        console.log(&#x27;数据库连接失败：&#x27;, err)</span><br><span class="line">        console.log(&#x27;---------------------------------------&#x27;)</span><br><span class="line">        return; </span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#x27;数据库连接成功&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 三、设置数据模型（声明是哪个集合，限制字段个数和字段类型）</span><br><span class="line">const model2 = db2.model(&#x27;api&#x27;,&#123;</span><br><span class="line">  uanme:&#123;type:String, default:&quot;神龙教主&quot;&#125;,</span><br><span class="line">  pwd:&#123;type:String&#125;,</span><br><span class="line">  // pwd: String,</span><br><span class="line">  age:&#123;type: Number&#125;,</span><br><span class="line">  sex:&#123;type:String&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 四、创建实例操作（CURD）</span><br><span class="line"></span><br><span class="line">// 读 --------------------------------</span><br><span class="line"></span><br><span class="line">// model2.findOne(&#123;&#125;) </span><br><span class="line">model2.find(&#123;&#125;) </span><br><span class="line">.then(res =&gt; &#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">    db2.close()</span><br><span class="line">    return res</span><br><span class="line">&#125;)</span><br><span class="line">.catch(err =&gt; &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">    return false</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>rPage.js 排序 分页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// 一、导入模块</span><br><span class="line">const mongoose = require(&#x27;mongoose&#x27;);</span><br><span class="line">// 二、连接数据库</span><br><span class="line">const db = mongoose.createConnection(&#x27;mongodb://shop2:admin888@localhost:27017/shop&#x27;, &#123;useNewUrlParser: true, useUnifiedTopology: true&#125;, err=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;---------------------------------------&#x27;)</span><br><span class="line">        console.log(&#x27;数据库连接失败：&#x27;, err)</span><br><span class="line">        console.log(&#x27;---------------------------------------&#x27;)</span><br><span class="line">        return; </span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#x27;数据库连接成功&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 三、设置数据模型（声明是哪个集合，限制字段个数和字段类型）</span><br><span class="line">const model = db.model(&#x27;api&#x27;,&#123;</span><br><span class="line">  uanme:&#123;type:String, default:&quot;神龙教主&quot;&#125;,</span><br><span class="line">  pwd:&#123;type:String&#125;,</span><br><span class="line">  // pwd: String,</span><br><span class="line">  age:&#123;type: Number&#125;,</span><br><span class="line">  sex:&#123;type:String&#125;</span><br><span class="line">&#125;)</span><br><span class="line">e = require(&#x27;mongoose&#x27;);</span><br><span class="line">// 二、连接数据库</span><br><span class="line">const db2 = mongoose.createConnection(&#x27;mongodb://shop2:admin888@localhost:27017/shop&#x27;, &#123;useNewUrlParser: true, useUnifiedTopology: true&#125;, err=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#x27;---------------------------------------&#x27;)</span><br><span class="line">        console.log(&#x27;数据库连接失败：&#x27;, err)</span><br><span class="line">        console.log(&#x27;---------------------------------------&#x27;)</span><br><span class="line">        return; </span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#x27;数据库连接成功&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 三、设置数据模型（声明是哪个集合，限制字段个数和字段类型）</span><br><span class="line">const model2 = db2.model(&#x27;api&#x27;,&#123;</span><br><span class="line">  uanme:&#123;type:String, default:&quot;神龙教主&quot;&#125;,</span><br><span class="line">  pwd:&#123;type:String&#125;,</span><br><span class="line">  // pwd: String,</span><br><span class="line">  age:&#123;type: Number&#125;,</span><br><span class="line">  sex:&#123;type:String&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 四、创建实例操作（CURD）</span><br><span class="line"></span><br><span class="line">// 读 --------------------------------</span><br><span class="line"></span><br><span class="line">// model2.findOne(&#123;&#125;) </span><br><span class="line">model2.find(&#123;&#125;).skip(1).limit(1)</span><br><span class="line">.then(res =&gt; &#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">    db2.close()</span><br><span class="line">    return res</span><br><span class="line">&#125;)</span><br><span class="line">.catch(err =&gt; &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">    return false</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="小总结-5"><a href="#小总结-5" class="headerlink" title="小总结"></a>小总结</h2><p>安装：yarn add mongoose  或者  npm i mongoose </p><p>使用：<a href="http://mongoosejs.net/">http://mongoosejs.net</a>  或  <a href="http://mongoosejs.com/">http://mongoosejs.com</a></p><h1 id="十七-接口概念"><a href="#十七-接口概念" class="headerlink" title="十七. 接口概念"></a>十七. 接口概念</h1><h2 id="明确需求-6"><a href="#明确需求-6" class="headerlink" title="明确需求"></a>明确需求</h2><p>随着移动互联网的发展，客户端层出不穷，微信端、WEB/PC、APP等等，而后端业务逻辑基本是一致的，如何做到业务逻辑“一次编写，随时接入”呢？</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1571303654659.png" alt="1571303654659"> </p><p>答案：就是调用接口、定义接口</p><h2 id="什么是"><a href="#什么是" class="headerlink" title="什么是"></a>什么是</h2><p>就是一个文件(js\json\php等，主要<strong>响应JSON数据（操作方便，体积小）</strong>或XML数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  status: 1/0,</span><br><span class="line">  msg: &#x27;提示信息&#x27;</span><br><span class="line">&#125;</span><br><span class="line">-----</span><br><span class="line">&lt;xml&gt;</span><br><span class="line">  &lt;status&gt;1/0&lt;/status&gt;</span><br><span class="line">  &lt;msg&gt;提示信息&lt;/msg&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/xml&gt;</span><br></pre></td></tr></table></figure><ul><li><p> 多学一招：只要响应json数据所有语言都可以操作，例如ios/Android等</p></li><li><p>推荐</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">msg</span>: 提示信息,</span><br><span class="line">        <span class="attr">status</span>: 状态码（<span class="number">200</span>/<span class="number">201</span>/<span class="number">301</span>/<span class="number">302</span>/<span class="number">400</span>/<span class="number">401</span>/<span class="number">403</span>/<span class="number">404</span>/<span class="number">500</span>）</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>: 数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="能干吗-3"><a href="#能干吗-3" class="headerlink" title="能干吗"></a>能干吗</h2><p>数据角度：让我们的项目静态/固定数据动态（也就是让项目数据来源于数据库</p><p>功能角度：短信接口、幽默笑话接口、天气接口、股票接口等</p><h2 id="去哪下（找）"><a href="#去哪下（找）" class="headerlink" title="去哪下（找）"></a>去哪下（找）</h2><ul><li>方案1：通过node/go/java/php/asp等语言去开发</li><li>方法2：使用第三方接口</li></ul><blockquote><p><img src="https://gitee.com/lovehuating/image/raw/master/1585490612280.png" alt="1585490612280"> </p></blockquote><h2 id="小总结-6"><a href="#小总结-6" class="headerlink" title="小总结"></a>小总结</h2><p>为什么要有接口：一次编写，多次/随时接入（好处：减少后端工作量方便后期维护</p><p>什么是接口：就是一个文件，但是你必须返回json或xml数据</p><p>接口能干吗：1-数据角度：页面数据动态，2-功能角度：短信接口、人脸识别接口</p><p>去哪下：1-自己写，2-去第三方网站找</p><h1 id="十八-接口开发规范（Restful-API）"><a href="#十八-接口开发规范（Restful-API）" class="headerlink" title="十八. 接口开发规范（Restful API）"></a>十八. 接口开发规范（Restful API）</h1><h2 id="明确需求-7"><a href="#明确需求-7" class="headerlink" title="明确需求"></a>明确需求</h2><p>思考：接口可能是一个人开发，也可能多人开发，如何保证大家的编写规范一样</p><blockquote><p>商品模块  /goods/getIndex     get<br>订单模块  /order/index     post<br>用户模块  /user </p></blockquote><p>发现：上述这种case项目没有统一开发规则<br>问题：后期维护麻烦<br>回答：通过目前比较火的Restful API思想/架构</p><h2 id="是什么-amp-好处"><a href="#是什么-amp-好处" class="headerlink" title="是什么&amp;好处"></a>是什么&amp;好处</h2><ul><li>说明：RESTful是目前最流行的一种互联网软件架构（思想）</li><li>作用：声明/提供了接口设计原则和约束条件（一个规范）</li><li>相关：</li></ul><blockquote><p>后端将资源发布到URL上-&gt;前端通过URL访问资源-&gt;并通过HTTP动词表示要对资源进行的操作<br>后端定义接口-&gt;前端请求接口-&gt;HTTP动词表名操作目的（get获取post新建put更新等）</p></blockquote><ul><li>举栗</li></ul><blockquote><p>列表页：访问 - /模块名            （get）<br>详情页：访问 - /模块名/编号        （get）<br>添加页：访问 - /模块名/create     （get）<br>处  理：访问 - /模块名                   （post）<br>修改页：访问 - /模块名/编号/edit（get）<br>处  理：访问 - /模块名/编号          （put）<br>删  除：访问 - /模块名/编号           （delete）</p><p>HTTP动词：get、post、put、delete</p></blockquote><ul><li>好处：统一开发规范，便与团队协作开发</li></ul><h2 id="标准的RESTful架构-思想-规则需要做到"><a href="#标准的RESTful架构-思想-规则需要做到" class="headerlink" title="标准的RESTful架构/思想/规则需要做到"></a>标准的RESTful架构/思想/规则需要做到</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">订单模块</span><br><span class="line">/order    get</span><br><span class="line">/order    post</span><br><span class="line">/order/编号  put</span><br><span class="line">/order/编号  delete</span><br></pre></td></tr></table></figure><ul><li>项目所有模块有统一的标准</li><li>看Url就知道要操作的资源是什么（也就是哪个模块）</li><li>看Http Method就知道操作动作是什么，是添加（post）还是删除（delete）</li><li>看Http Status Code就知道操作结果如何，是成功（200）还是内部错误（500）</li></ul><h2 id="小总结-7"><a href="#小总结-7" class="headerlink" title="小总结"></a>小总结</h2><p>什么是restful api：是一个架构或思想</p><p>作用：声明了接口设计原则和约束条件</p><p>好处：统一开发规范，便于团队协作开发</p><h1 id="十九-接口测试工具（Postman-amp-insomnia）"><a href="#十九-接口测试工具（Postman-amp-insomnia）" class="headerlink" title="十九. 接口测试工具（Postman&amp;insomnia）"></a>十九. 接口测试工具（Postman&amp;insomnia）</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><ul><li>什么是Postman：就是一个工具</li><li>作用：模拟HTTP请求，测试接口，查看接口返回数据</li><li>官网：<a href="http://www.getpostman.com/">www.getpostman.com</a></li></ul><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p><img src="https://gitee.com/lovehuating/image/raw/master/1585491540713.png" alt="1585491540713"> </p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>步骤1：双击打开</li></ul><p><img src="https://gitee.com/lovehuating/image/raw/master/1585491573284.png" alt="1585491573284"> </p><ul><li>步骤2：使用postman请求接口 <a href="https://jsonview.com/example.json">https://jsonview.com/example.json</a></li></ul><p><img src="https://gitee.com/lovehuating/image/raw/master/1585491766508.png" alt="1585491766508">  </p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>明确：postman就是一个工具</p><p>使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">后端：调试接口避免出现BUG</span><br><span class="line">前端：1-看你接口能不能用，2-查看返回的数据内容</span><br></pre></td></tr></table></figure><h1 id="二十-实战教学管理系统学生模块接口开发"><a href="#二十-实战教学管理系统学生模块接口开发" class="headerlink" title="二十. 实战教学管理系统学生模块接口开发"></a>二十. 实战教学管理系统学生模块接口开发</h1><h2 id="express简介"><a href="#express简介" class="headerlink" title="express简介"></a>express简介</h2><ul><li>是什么：基于nodejs开发的一个框架（原理基于node内置http模块封装）</li><li>好    处：加快项目开发，便于团队协作</li></ul><h2 id="express使用"><a href="#express使用" class="headerlink" title="express使用"></a>express使用</h2><p>步骤1：下载 （yarn add express</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585492638394.png" alt="1585492638394"> </p><p>步骤2：使用</p><p><img src="https://gitee.com/lovehuating/image/raw/master/1585492848257.png" alt="1585492848257"> </p><h2 id="学生添加接口"><a href="#学生添加接口" class="headerlink" title="学生添加接口"></a>学生添加接口</h2><p>步骤1：定义路由   /stu    post</p><p>步骤2：响应任意json数据</p><p>步骤3：定义stu模块，定义创建数据的方法</p><p>步骤4：调用stu模型创建数据的方法，返回结果</p><h2 id="学生列表接口"><a href="#学生列表接口" class="headerlink" title="学生列表接口"></a>学生列表接口</h2><p>步骤1：定义路由  /stu  get</p><p>步骤2：响应任意json数据</p><p>步骤3：修改stu模型，增加查询方法</p><p>步骤4：修改控制，调用模型返回数据</p><h2 id="学生列表接口分页"><a href="#学生列表接口分页" class="headerlink" title="学生列表接口分页"></a>学生列表接口分页</h2><p>步骤1：修改控制器接口请求参数  （get）   pageno  pagesize</p><p>步骤2：传递给模型</p><p>步骤3：模型增加skip和limit即可</p><p>#■实战接口文档开发apiDoc</p><h2 id="明确需求-8"><a href="#明确需求-8" class="headerlink" title="明确需求"></a>明确需求</h2><p>实战开发中后端会开发很多很多接口</p><p>每个接口呢都有大量的参数</p><p>思考：前端如果知道有哪些接口并且每个接口有几个参数？</p><p>回答：通过接口文档</p><p>思考：接口文档自己写还是怎么样？</p><p>回答：有很多，本接口主要是通过该apiDoc来生成</p><h2 id="是什么-2"><a href="#是什么-2" class="headerlink" title="是什么"></a>是什么</h2><p>就是nodejs中的一个模块</p><h2 id="能干吗-4"><a href="#能干吗-4" class="headerlink" title="能干吗"></a>能干吗</h2><p>通过这个模块可以快速生成接口文档</p><p>前提写接口的时候把注释加上</p><h2 id="去哪下-2"><a href="#去哪下-2" class="headerlink" title="去哪下"></a>去哪下</h2><p><a href="https://apidocjs.com/#configuration">https://apidocjs.com/#configuration</a> </p><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><p>步骤1：先下载模块，后期通过命令基于注释生成文档（仅一次</p><blockquote><p>npm install apidoc -g</p></blockquote><p>步骤2：在项目根目录创建apidoc.json文件（仅一次</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;example&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.1.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;apiDoc basic example&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;Custom apiDoc browser title&quot;,</span><br><span class="line">  &quot;url&quot; : &quot;https://api.github.com/v1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;教学管理系统接口文档&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;一个非常NB的接口文档&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;Custom apiDoc browser title&quot;,</span><br><span class="line">    &quot;url&quot; : &quot;http://localhost:3000&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></blockquote><p>步骤3：去写接口注释（N次）</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @api &#123;get&#125; /user/:id Request User information</span><br><span class="line"> * @apiName GetUser</span><br><span class="line"> * @apiGroup User</span><br><span class="line"> *</span><br><span class="line"> * @apiParam &#123;Number&#125; id Users unique ID.</span><br><span class="line"> *</span><br><span class="line"> * @apiSuccess &#123;String&#125; firstname Firstname of the User.</span><br><span class="line"> * @apiSuccess &#123;String&#125; lastname  Lastname of the User.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @api &#123;get&#125; /stu 学生模块列表</span><br><span class="line"> * @apiName Add</span><br><span class="line"> * @apiGroup Stu</span><br><span class="line"> *</span><br><span class="line"> * @apiParam &#123;Number&#125; pageno   当前页</span><br><span class="line"> * @apiParam &#123;Number&#125; pagesize 每页显示条数</span><br><span class="line"> *</span><br><span class="line"> * @apiSuccess &#123;String&#125;  meta  状态码&amp;提示信息</span><br><span class="line"> * @apiSuccess &#123;String&#125;  data  数据</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></blockquote><p>步骤4：生成接口文档（N次）</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apidoc -i ./接口注释目录 -o ./接口文档存放目录</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建服务器</title>
      <link href="2021/09/02/Apche_Mysql_Node_Express/"/>
      <url>2021/09/02/Apche_Mysql_Node_Express/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="宝塔Linux面板"><a href="#宝塔Linux面板" class="headerlink" title="宝塔Linux面板"></a>宝塔Linux面板</h2><p>在安装服务器系统的时候，选择免费的宝塔Linux系统。也可以选择进入到宝塔官网，使用linux命令安装。</p><p>使用xshell工具远程连接linux服务器，输入命令 <code>bt default</code> 启动宝塔面板</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210902095753.png"></p><p><strong>进入面板需要下载几种工具</strong> <cst>Apche、Mysql、Node.js、PM2管理器</cst></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210902100109.png"></p><h2 id="Mysql-数据库启动"><a href="#Mysql-数据库启动" class="headerlink" title="Mysql 数据库启动"></a>Mysql 数据库启动</h2><p><strong>确认是否安装了Node环境</strong></p><p><code>node -v</code> 输入命令后，出现版本号，就表示安装成功了Node环境</p><p>下载 <a href="https://www.aliyundrive.com/s/8gzssMt8Hrk">数据库接口包</a> 下载包后缀名 <code>.exe 改成 .zip</code></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210902100809.png"></p><p>数据库名：<code>mydb</code>，用户名：<code>username</code>，密码：<code>123456</code> 。这些配置名称需要一一对应，不然在数据库的配置文件无法启动数据库。</p><p><strong>点击导入</strong> <code>.\vueShop-api-server-master\db\mydb.sql</code></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210902101206.png"></p><p>在linux系统中，进入到这个文件夹中，运行这个文件，首先要下载依赖：<code>npm install</code></p><p>运行 app.js 文件：<code>node app.js</code></p><p><strong>配置文件：</strong><code>.\vueShop-api-server-master\config\default.json</code></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210902101402.png"></p><p><strong>正常运行状态如图</strong> <cst>接口</cst>：<a href="http://8.140.117.181:8888/api/private/v1/">http://8.140.117.181:8888/api/private/v1/</a></p><p><strong>运行的几个问题：</strong></p><ul><li>可能遇到端口占用问题</li><li>node命令失效</li></ul><h2 id="Apche-启动网站服务"><a href="#Apche-启动网站服务" class="headerlink" title="Apche 启动网站服务"></a>Apche 启动网站服务</h2><p><strong>添加默认站点</strong></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210902105352.png"></p><p>由于宝塔面板的原因，默认站点需要添加域名，如果你没有备案好的域名，显然是无法添加站点的。因此我们先随便填写域名</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210902105544.png"></p><p>点击设置，添加新的域名，就直接添加ip即可</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210902105758.png" alt="默认站点"></p><p>设置默认站点就是我们新建的站点</p><h2 id="Express-启动项目"><a href="#Express-启动项目" class="headerlink" title="Express 启动项目"></a>Express 启动项目</h2><p>我们需要安装 <code>express</code> 服务，去启动vue打包的dist文件</p><p>在Linux中的 <code>www/</code>下创建放网站源码的地方，我创建的是 <code>/www/wwwvueshop</code></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210902110101.png"></p><p>将打包的文件，放在 <code>wwwvueshop</code> 中</p><p><strong>全局安装 express</strong></p><p><code>npm install express-generator -g</code></p><p><strong>创建 express 项目</strong></p><p><code>express expressvueshop</code></p><p><strong>进入项目，安装依赖</strong></p><p><code>cd expressvueshop/</code> </p><p><code>npm install</code></p><p><strong>将dist文件下内容，全部复制到 express项目下的public文件内</strong></p><p><strong>运行项目</strong></p><p><code>npm start</code></p><h3 id="vue路由history模式，刷新404问题"><a href="#vue路由history模式，刷新404问题" class="headerlink" title="vue路由history模式，刷新404问题"></a>vue路由history模式，刷新404问题</h3><p><strong>项目运行可能会到端口冲突问题，使用命名停掉冲突端口，例如3000</strong></p><p><strong>改变端口运行</strong></p><p>在文件 <code>./expressvueshop/app.js</code> 添加一行代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.listen(<span class="number">80</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;app listening on port 80.&#x27;</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>运行项目正常运行了，当刷新页面就会出现404，有两种解决方案</strong></p><ul><li><p>将路由模式改成 hash模式，服务器后台只认识 hash url</p></li><li><p>在网站根目录 <code>./wwwvueshop</code> 下添加文件 <code>.htaccess</code>，添加如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">  RewriteEngine On</span><br><span class="line">  RewriteBase /</span><br><span class="line">  RewriteRule ^index\.html$ - [L]</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">  RewriteRule . /index.html [L]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></li></ul><p><strong>使用第二种方式，首先要确认你的Apche配置中有如下内容</strong></p><p>搜索LoadModule rewrite_module modules/mod_rewrite.so（搜索不到可以是空格，搜索一部分只要能找到就行），去掉前面的“#”号</p><p><code>LoadModule rewrite_module modules/mod_rewrite.so</code></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210902111546.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210902111711.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210902111925.png"></p><blockquote><p>需要设置好站点的路径，vue打包的入口只有一个index.html，放置在public下面，因此路径要指向public下的index.html</p></blockquote><h3 id="官方提出解决404页面方案"><a href="#官方提出解决404页面方案" class="headerlink" title="官方提出解决404页面方案"></a>官方提出解决404页面方案</h3><p><a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90">点击跳转</a></p><p>搭建网站使用Apche服务或者Nginx服务，我使用Nginx服务仍然解决不了，刷新404的问题。因此改成使用Apche</p><blockquote><p><code>vue-router</code> 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。</p><p>如果不想要很丑的 hash，我们可以用路由的 <strong>history 模式</strong>，这种模式充分利用 <code>history.pushState</code> API 来完成 URL 跳转而无须重新加载页面。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Apche </tag>
            
            <tag> Node </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电商管理后台--项目总结</title>
      <link href="2021/08/07/vue_element_project/"/>
      <url>2021/08/07/vue_element_project/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><p><strong>初始化项目创建Vue3.x版本，使用ElementUI库写界面，使用Axios请求数据。</strong></p><p><strong>创建Vue3.x项目的几种方式</strong></p><ul><li><code>vue create my_vue_name</code></li><li><code>vue ui</code> 使用vue ui界面创建vue3.x项目</li></ul><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210829201731.png" alt="vue ui"></p><p><strong>下载插件和依赖</strong></p><ul><li><code>Element UI</code> 基于vue的组件库</li><li><code>依赖 axios</code> 使用vue项目，通过axios请求数据</li><li>安装 <code>Vuex Router</code></li></ul><p><strong>最后安装项目，运行项目，梳理项目。</strong></p><p><strong>引入Element Ui 库</strong></p><p>在vue ui 可视化界面中，安装插件和依赖</p><p><strong>请求数据，用单独的文件引入</strong></p><p><code>./network</code>文件，创建 <code>request.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://127.0.0.1:8888/api/private/v1/ 本地数据库</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;http://127.0.0.1:8888/api/private/v1/&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// axios 拦截器</span></span><br><span class="line">  instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 请求成功,将token传入</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求数据需要携带token，在登入的时候，会将token存起来 通过 window.sessionStorage.getItem(&#x27;token&#x27;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    config.headers.Authorization = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> instance(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库搭建"><a href="#数据库搭建" class="headerlink" title="数据库搭建"></a>数据库搭建</h3><p><strong>安装数据库工具</strong><a href="https://www.xp.cn/">官网下载</a></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210831130419.png"></p><p><strong>下载数据文件，导入数据库</strong><a href="https://www.aliyundrive.com/s/8gzssMt8Hrk">阿里云盘下载</a></p><p>将下载的文件的后缀改为<code>zip</code>格式压缩，db就是数据库。运行数据库要先安装依赖 <code>npm install</code></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210831130737.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210831131243.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210831131418.png"></p><p>数据库的名字、用户和密码必须一致，在该文件下进入命令行运行app.js，输入命令 <code>node app.js</code>，运行本地数据库。</p><p><img src="C:\Users\cst20\AppData\Roaming\Typora\typora-user-images\image-20210831143145412.png" alt="image-20210831143145412"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210831143216.png"></p><hr><h2 id="登录-amp-amp-退出功能"><a href="#登录-amp-amp-退出功能" class="headerlink" title="登录 &amp;&amp; 退出功能"></a>登录 &amp;&amp; 退出功能</h2><p><strong>创建登录界面</strong></p><p>在<code>src/components/login</code> 文件下创建 <code>Login.vue</code></p><p>在<code>src/components/login</code> 文件下创建 <code>Login.js</code> 专为登录使用的数据请求文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&quot;./request&quot;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*登录请求数据，使用Post方式，将数据传输到服务器，params携带参数过去</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">loginData</span>(<span class="params">form</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;username,password&#125; = form <span class="comment">// 解构对象</span></span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">      username,</span><br><span class="line">      password</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*login 点击登录按钮的方法</span></span><br><span class="line"><span class="comment">* this.$refs.loginFormRef.validate 是 Element Ui库提供的方法，</span></span><br><span class="line"><span class="comment">* 用来校准输入是否合格，合格就运行里面的箭头函数</span></span><br><span class="line"><span class="comment">*  window.sessionStorage.setItem(&quot;token&quot;,res.data.data.token) 存储token值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="title">login</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$refs.loginFormRef.validate(<span class="keyword">async</span> (value) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      loginData(<span class="built_in">this</span>.form)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// promise对象，请求成功就调用then方法</span></span><br><span class="line">          <span class="keyword">const</span> meta = res.data.meta;</span><br><span class="line">          <span class="keyword">if</span> (meta.status === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">              <span class="attr">showClose</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">message</span>: <span class="string">&quot;登录成功&quot;</span>,</span><br><span class="line">              <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 保存token值</span></span><br><span class="line">            <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">&quot;token&quot;</span>,res.data.data.token)</span><br><span class="line">            <span class="built_in">this</span>.$router.push(<span class="string">&quot;/home&quot;</span>)</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">              <span class="attr">showClose</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">message</span>: <span class="string">&quot;登录失败&quot;</span>,</span><br><span class="line">              <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 退出功能，清除token，路由跳转到登录</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="title">logout</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">window</span>.sessionStorage.clear();</span><br><span class="line">  <span class="built_in">this</span>.$router.push(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 挂载路由导航，来控制访问</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// to 将要访问的路径</span></span><br><span class="line">  <span class="comment">// from 代表从哪个路径跳转来</span></span><br><span class="line">  <span class="comment">//next 是一个函数，必须执行</span></span><br><span class="line">  <span class="comment">// next(&#x27;/login&#x27;) 强制跳转途径</span></span><br><span class="line">  <span class="keyword">if</span> (to.path === <span class="string">&quot;/login&quot;</span>) <span class="keyword">return</span> next();</span><br><span class="line">  <span class="comment">// 获取token</span></span><br><span class="line">  <span class="keyword">const</span> tokenstr = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!tokenstr) <span class="keyword">return</span> next(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">  <span class="comment">// 有token 直接放行</span></span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 路由跳转懒加载方式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> Login = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;components/login/Login&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> Welcome = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;components/welcome/Welcome&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;views/home/Home&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 侧边栏路由</span></span><br><span class="line"><span class="keyword">const</span> User = <span class="function">() =&gt;</span> <span class="keyword">import</span> (<span class="string">&#x27;components/user/User&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Role = <span class="function">() =&gt;</span> <span class="keyword">import</span> (<span class="string">&#x27;components/role/Role&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Rights = <span class="function">() =&gt;</span> <span class="keyword">import</span> (<span class="string">&#x27;components/rights/Rights&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">redirect</span>: <span class="string">&quot;/home&quot;</span> &#125;,<span class="comment">//首页页面，存在token</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>, <span class="attr">component</span>: Login &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: Home,</span><br><span class="line">    <span class="attr">redirect</span> : <span class="string">&#x27;/welcome&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [ <span class="comment">// 子路径</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&quot;/welcome&quot;</span>, <span class="attr">component</span>: Welcome &#125;,</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&quot;/users&quot;</span>, <span class="attr">component</span>: User &#125;,</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&quot;/roles&quot;</span>, <span class="attr">component</span>: Role &#125;,</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&quot;/rights&quot;</span>, <span class="attr">component</span>: Rights &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">  <span class="attr">base</span>: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="主页布局"><a href="#主页布局" class="headerlink" title="主页布局"></a>主页布局</h2><blockquote><p>菜单栏使用UI库里面的组件，通过请求菜单数据，来展示菜单栏</p></blockquote><p>在<code>src/netWork</code> 文件下创建 <code>Menu.js</code> 专为请求菜单栏使用的数据请求文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&quot;./request&quot;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 请求菜单栏的数据，用GET的方式获取</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getMenuList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;menus&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*异步的获取菜单栏方法，ES7语法</span></span><br><span class="line"><span class="comment">* await 必须出现在 async标识的函数里面</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">getMenuList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: res &#125; = <span class="keyword">await</span> getMenuList();</span><br><span class="line">  <span class="keyword">if</span> (res.meta.status === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.menuList = res.data;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$message.error(<span class="string">&quot;请求菜单栏数据失败&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>保存链接激活状态</strong></p><p>当路由切换的时候，或者刷新的时候，如何保存你点击的菜单栏呢。方法是如token值保存一样，将菜单栏状态存入浏览器缓存中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 将当前的路径值存入缓存中，当刷新页面，还会保留菜单栏的激活状态</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="title">saveNavState</span>(<span class="params">activePath</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">&#x27;activePath&#x27;</span>,activePath)</span><br><span class="line">  <span class="built_in">this</span>.activePath = activePath</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>在<code>src/netWork</code> 文件下创建 <code>User.js</code> 专门为用户数据管理的请求文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&quot;./request&quot;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 一. 获取用户列表</span></span><br><span class="line"><span class="comment">* 需要传入三个参数，query、pagenum、pagesize</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserList</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;query,pagenum,pagesize&#125; = value</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">      query,</span><br><span class="line">      pagenum,</span><br><span class="line">      pagesize</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 二. 修改用户状态</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">putUserState</span>(<span class="params">userInfo</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`users/<span class="subst">$&#123;userInfo.id&#125;</span>/state/<span class="subst">$&#123;userInfo.mg_state&#125;</span>`</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 三. 添加用户</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addUser</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">      <span class="attr">username</span>:value.username,</span><br><span class="line">      <span class="attr">password</span>:value.password,</span><br><span class="line">      <span class="attr">email</span>:value.email,</span><br><span class="line">      <span class="attr">mobile</span>:value.mobile</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 四. 查询用户信息 通过id</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserInfo</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`users/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 五. 修改用户信息</span></span><br><span class="line"><span class="comment">* data:form 这种写法更简洁，也是通行的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">putUserInfo</span>(<span class="params">form</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`users/<span class="subst">$&#123;form.id&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">      <span class="attr">email</span>:form.email,</span><br><span class="line">      <span class="attr">mobile</span>:form.mobile</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 六. 删除单个用户</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteUserInfo</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;DELETE&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`users/<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 七. 获取角色信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserRoles</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;roles&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 八. 修改分配的角色</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">putUserRole</span>(<span class="params">roleId,info</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`users/<span class="subst">$&#123;roleId&#125;</span>/role`</span>,</span><br><span class="line">    <span class="attr">data</span>: info</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取用户列表"><a href="#获取用户列表" class="headerlink" title="获取用户列表"></a>获取用户列表</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 一. 获取用户列表，传入queryInfo参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">getUserList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: res &#125; = <span class="keyword">await</span> getUserList(<span class="built_in">this</span>.queryInfo);</span><br><span class="line">  <span class="keyword">if</span> (res.meta.status !== <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.$message.error(<span class="string">&quot;获取用户列表失败&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.userList = res.data.users;</span><br><span class="line">    <span class="built_in">this</span>.total = res.data.total;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 pagesize 改变的事件</span></span><br><span class="line"><span class="function"><span class="title">handleSizeChange</span>(<span class="params">newSize</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.queryInfo.pagesize = newSize;</span><br><span class="line">  <span class="built_in">this</span>.getUserList();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="修改用户状态"><a href="#修改用户状态" class="headerlink" title="修改用户状态"></a>修改用户状态</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 二. 监听 siwch 开关状态</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">userStateChanged</span>(<span class="params">userState</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;<span class="attr">data</span>:res&#125; = <span class="keyword">await</span> putUserState(userState)</span><br><span class="line"><span class="keyword">if</span>(res.meta.status !== <span class="number">200</span>)&#123;</span><br><span class="line">  <span class="built_in">this</span>.$message.error(<span class="string">&quot;更新用户状态失败！&quot;</span>);</span><br><span class="line">  userState.mg_state = !userState.mg_state;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$message.success(res.meta.msg)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 三. 添加用户</span></span><br><span class="line"><span class="comment">* addUserSubmit 添加用户提交按钮</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="title">addUserSubmit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 校验</span></span><br><span class="line">  <span class="built_in">this</span>.$refs.addFormRef.validate(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!res) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 添加用户</span></span><br><span class="line">    <span class="keyword">const</span> &#123;<span class="attr">data</span>:res2&#125; = <span class="keyword">await</span> addUser(<span class="built_in">this</span>.addForm)</span><br><span class="line"><span class="keyword">if</span> (res2.meta.status == <span class="number">201</span>) &#123;</span><br><span class="line">  <span class="built_in">this</span>.$message.success(<span class="string">&quot;添加用户成功&quot;</span>);</span><br><span class="line">  <span class="comment">// 重新获取用户列表</span></span><br><span class="line">  <span class="built_in">this</span>.getUserList();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$message.error(res2.meta.msg);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">this</span>.addDialogVisible = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="查询用户信息"><a href="#查询用户信息" class="headerlink" title="查询用户信息"></a>查询用户信息</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 四. 查询用户信息 通过id</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">showEditDialog</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;<span class="attr">data</span>:res&#125; = <span class="keyword">await</span> getUserInfo(id)</span><br><span class="line">  <span class="keyword">if</span>(res.meta.status !==<span class="number">200</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.$message.error(<span class="string">&#x27;查询用户信息失败&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将查询到的用户信息，存入到data中</span></span><br><span class="line">  <span class="built_in">this</span>.editForm = res.data</span><br><span class="line">  <span class="built_in">this</span>.editDialogVisible = <span class="literal">true</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="修改用户信息"><a href="#修改用户信息" class="headerlink" title="修改用户信息"></a>修改用户信息</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 五. 修改用户信息</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="function"><span class="title">editUserInfoSubmit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 验证信息</span></span><br><span class="line">  <span class="built_in">this</span>.$refs.editFormRef.validate(<span class="keyword">async</span> valid=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(!valid) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 发起修改用户请求</span></span><br><span class="line">    <span class="keyword">const</span> &#123;<span class="attr">data</span>:res&#125; = <span class="keyword">await</span> putUserInfo(<span class="built_in">this</span>.editForm)</span><br><span class="line">    <span class="keyword">if</span>(res.meta.status!==<span class="number">200</span>) <span class="keyword">return</span> <span class="built_in">this</span>.$message.error(<span class="string">&#x27;更新用户信息失败&#x27;</span>)</span><br><span class="line">    <span class="comment">// 关闭对话框</span></span><br><span class="line">    <span class="built_in">this</span>.editDialogVisible = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 刷新列表</span></span><br><span class="line">    <span class="built_in">this</span>.getUserList()</span><br><span class="line">    <span class="comment">// 提示修改成功</span></span><br><span class="line">    <span class="built_in">this</span>.$message.success(<span class="string">&#x27;更新用户信息成功&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 六. 删除单个用户</span></span><br><span class="line"><span class="comment">* $confirm 是组件库的，用户弹出带确定和取消，返回结果也是 promsie对象，因此使用await去接收</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">removeUserById</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">const</span> confirmResult =<span class="keyword">await</span> <span class="built_in">this</span>.$confirm(<span class="string">&#x27;此操作将永久删除该用户, 是否继续?&#x27;</span>,</span><br><span class="line">      <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">      <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>err)</span><br><span class="line">    <span class="comment">// 如果用户确认删除，则返回值为字符串 confirm </span></span><br><span class="line">    <span class="comment">// 如果用户取消删除，则返回值为字符串 cancel</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(confirmResult !== <span class="string">&#x27;confirm&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.$message.info(<span class="string">&#x27;已取消删除！&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> &#123;<span class="attr">data</span>:res&#125; = <span class="keyword">await</span> deleteUserInfo(id)</span><br><span class="line">    <span class="keyword">if</span>(res.meta.status !==<span class="number">200</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.$message.error(<span class="string">&#x27;删除用户失败！&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.$message.success(<span class="string">&#x27;删除用户成功!&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 刷新数据列表</span></span><br><span class="line">    <span class="built_in">this</span>.getUserList()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="获取角色信息"><a href="#获取角色信息" class="headerlink" title="获取角色信息"></a>获取角色信息</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 七. 获取角色信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">setRole</span>(<span class="params">userInfo</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.userInfo = userInfo</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取所有的角色列表</span></span><br><span class="line">  <span class="keyword">const</span> &#123;<span class="attr">data</span>:res&#125; = <span class="keyword">await</span> getUserRoles()</span><br><span class="line">  <span class="keyword">if</span>(res.meta.status !== <span class="number">200</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.$message.error(<span class="string">&#x27;获取角色列表失败&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.rolesList = res.data</span><br><span class="line">  <span class="built_in">this</span>.setRoleDialogVisible = <span class="literal">true</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="修改分配的角色"><a href="#修改分配的角色" class="headerlink" title="修改分配的角色"></a>修改分配的角色</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 八. 修改分配的角色</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">setRoleInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="built_in">this</span>.selectedRoleId)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.$message.error(<span class="string">&#x27;请选择要分配的角色&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 请求修改</span></span><br><span class="line">  <span class="comment">// const &#123;data:res&#125; = await this.$axios.put(`users/$&#123;this.userInfo.id&#125;/role`,&#123;</span></span><br><span class="line">  <span class="keyword">const</span> &#123;<span class="attr">data</span>:res&#125; = <span class="keyword">await</span> putUserRole(<span class="built_in">this</span>.userInfo.id,&#123;<span class="attr">rid</span>:<span class="built_in">this</span>.selectedRoleId&#125;)</span><br><span class="line">  <span class="keyword">if</span>(res.meta.status !== <span class="number">200</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.$message.error(<span class="string">&#x27;更新角色失败&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.$message.success(<span class="string">&#x27;更新角色成功&#x27;</span>)</span><br><span class="line">  <span class="built_in">this</span>.getUserList()</span><br><span class="line">  <span class="built_in">this</span>.setRoleDialogVisible = <span class="literal">false</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><h3 id="角色列表"><a href="#角色列表" class="headerlink" title="角色列表"></a>角色列表</h3><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210831225148.png"></p><p>在 <code>./netWork</code>文件下，创建<code>roles.js</code> 角色列表请求数据文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&quot;./request&quot;</span>;</span><br><span class="line"><span class="comment">// 传值型</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getRoleList</span>(<span class="params">method,url</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    method,</span><br><span class="line">    url,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除权限</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteRoleRights</span>(<span class="params">roleId,rightId</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`roles/<span class="subst">$&#123;roleId&#125;</span>/rights/<span class="subst">$&#123;rightId&#125;</span>`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改权限提交</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">editRoleRights</span>(<span class="params">roleId,rids</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`roles/<span class="subst">$&#123;roleId&#125;</span>/rights`</span>,</span><br><span class="line">    <span class="attr">data</span>: rids</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="权限列表"><a href="#权限列表" class="headerlink" title="权限列表"></a>权限列表</h3><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210831225210.png"></p><p>在 <code>./netWork</code>文件下，创建<code>rights.js</code> 权限管理请求数据文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&quot;./request&quot;</span>;</span><br><span class="line"><span class="comment">// 传值型</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getRightsList</span>(<span class="params">method,url</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    method,</span><br><span class="line">    url</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*获取权限列表的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">getRightsList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;<span class="attr">data</span>:res&#125; = <span class="keyword">await</span> getRightsList(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;rights/list&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(res.meta.status !== <span class="number">200</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.$message.error(<span class="string">&#x27;获取权限列表失败&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 保留权限列表</span></span><br><span class="line">  <span class="built_in">this</span>.rightsList = res.data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
          <category> 电商项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> 电商项目总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端开发</title>
      <link href="2021/08/04/Mobile_terminal/"/>
      <url>2021/08/04/Mobile_terminal/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="学习内容"><a href="#学习内容" class="headerlink" title="学习内容"></a>学习内容</h2><ul><li>移动端开发相关基础知识</li><li>项目案例实战</li></ul><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>掌握移动端开发的相关概念和名词</li><li><a href="https://lanhuapp.com/web/#/item/project/board/detail?pid=95ae801d-5f01-4a4c-a65a-600726f440f4&project_id=95ae801d-5f01-4a4c-a65a-600726f440f4&image_id=426b580e-2f27-4404-a5ef-edf3546adf6f">设计稿</a>静态化，并适配绝大多数的移动设备</li></ul><h2 id="移动端特点"><a href="#移动端特点" class="headerlink" title="移动端特点"></a>移动端特点</h2><p>移动端与 PC 端网页有所不同，有以下几个特点</p><ul><li>小屏幕</li><li>触摸交互</li><li><a href="http://screensiz.es/">屏幕尺寸繁多</a></li></ul><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>移动端开发包含一些概念和专有名词，面试题以及以后的工作沟通经常会用到。</p><h3 id="屏幕相关"><a href="#屏幕相关" class="headerlink" title="屏幕相关"></a>屏幕相关</h3><h4 id="屏幕大小"><a href="#屏幕大小" class="headerlink" title="屏幕大小"></a>屏幕大小</h4><p>​        屏幕大小指屏幕的对角线的长度，单位一般是英寸。常见的手机屏幕大小 3.5、4、4.7、5.0、5.5、6.0等。常见手机屏幕查看网址 <a href="http://screensiz.es/">http://screensiz.es/</a> </p><p><img src="http://cdn.xiaohigh.com/0e282600899877b3bae812bda0b78d92.png" alt="image"></p><p>注意:</p><ul><li><p>英寸的英文为 inch , 英尺的英文是 foot          4.7inch</p></li><li><p>1foot = 12inch        1inch=2.54cm</p></li></ul><h4 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h4><p>​        屏幕分辨率是指屏幕横纵向上的像素点数。一般表示形式 x * y 或者 y * x 表示。例如 IPhone 6 的屏幕分辨率为 750 * 1334，华为 P30 的分辨率为 2340 * 1080。</p><p><img src="http://cdn.xiaohigh.com/77143261161a1e8dda9ecceaacb08baa.png" alt="image"></p><p>注意:</p><ul><li>屏幕分辨率是一个固定值，生产出来就固定了，无论手机屏幕还是电脑屏幕。</li><li>屏幕分辨率与显示分辨率不同。计算机可以修改显示分辨率，信号传递给屏幕，屏幕会进行计算，在屏幕上显示。</li><li>1080P 的分辨率是1920x1080   720P   1280 * 720</li><li>2K 屏幕是单一方向分辨率具有约 2000 像素的显示设备。最标准的 2K 分辨率为 2048×1024</li></ul><p>几款手机的分辨率</p><table><thead><tr><th>型号</th><th>分辨率</th></tr></thead><tbody><tr><td>IPhone 3GS</td><td>320 * 480</td></tr><tr><td>IPhone 4 / 4s</td><td>640 * 960</td></tr><tr><td>IPhone 5 / 5s</td><td>640 * 1136</td></tr><tr><td>IPhone 6 / 7 / 8</td><td>750 * 1334</td></tr><tr><td>华为 P30</td><td>1080 * 2340</td></tr><tr><td>IPhone X</td><td>1125 * 2436</td></tr></tbody></table><h3 id="像素相关"><a href="#像素相关" class="headerlink" title="像素相关"></a>像素相关</h3><h4 id="物理像素-设备像素"><a href="#物理像素-设备像素" class="headerlink" title="物理像素 / 设备像素"></a>物理像素 / 设备像素</h4><p>设备像素 / 物理像素是一个长度单位。 1 物理像素对应显示设备中一个微小的物理部件。</p><p>设备像素是手机屏幕的一个参数，由手机制造商决定。例如 IPhone 6 的物理像素为 750 * 1334</p><p><img src="http://cdn.xiaohigh.com/ce6d1ac7b1aceb99ffc5ae0ec4300702.png" alt="像素"></p><h4 id="设备独立像素-设备无关像素"><a href="#设备独立像素-设备无关像素" class="headerlink" title="设备独立像素  /  设备无关像素"></a>设备独立像素  /  设备无关像素</h4><p>设备独立像素，简称 DIP（device-independent pixel）,又称为设备无关像素，是一个长度计量单位。</p><p>设备独立像素也是手机屏幕的一个参数，由手机制造商决定。例如IPhone 6 的设备独立像素为 375 * 667</p><p>1 个设备独立像素可以认为是计算机坐标系统中的一个点，代表可以通过程序控制使用的虚拟像素。</p><ul><li>普通屏幕下 1 设备独立像素 等于 1 物理像素</li><li>高清屏幕下 1 设备独立像素 等于 N 物理像素</li></ul><h5 id="Retina-屏幕"><a href="#Retina-屏幕" class="headerlink" title="Retina 屏幕"></a>Retina 屏幕</h5><p>​        Retina 是苹果公司 2010 年推出的一种显示标准，是把更多的像素点压缩至一块屏幕里，从而达到更高的分辨率并提高屏幕显示的细腻程度。</p><br><p><img src="http://cdn.xiaohigh.com/aedb4168bfc327206143d25d129dc84f.png" alt="image"></p><p><img src="http://cdn.xiaohigh.com/bd8667ac17c9d1cbbde0df71bef47655.png"></p><p><span style="color:#ee0b41">设备独立像素的出现，使得即使在高分辨率的屏幕下，也可以正常尺寸的显示元素，代码不受到设备的影响。</span></p><p>几款手机的屏幕像素参数，<a href="https://uiiiuiii.com/screen/">点击这里查看更多</a></p><table><thead><tr><th>型号</th><th>设备像素总和</th><th>设备独立像素总和</th></tr></thead><tbody><tr><td>IPhone 3GS</td><td>320 * 480</td><td>320 * 480</td></tr><tr><td>IPhone 4 / 4s</td><td>640 * 960</td><td>320 * 480</td></tr><tr><td>IPhone 5 / 5s</td><td>640 * 1136</td><td>320 * 568</td></tr><tr><td>IPhone 6 / 7 / 8</td><td>750 * 1334</td><td>375 * 667</td></tr><tr><td>HUAWEI P10</td><td>1080 x 1920</td><td>360 x 640</td></tr><tr><td>IPhone X</td><td>1125 * 2436</td><td>375 * 812</td></tr></tbody></table><h4 id="CSS-像素-逻辑像素"><a href="#CSS-像素-逻辑像素" class="headerlink" title="CSS 像素 / 逻辑像素"></a>CSS 像素 / 逻辑像素</h4><p>CSS 像素是 CSS 语言中用来表示长度的一个单位，单位为 px。</p><ul><li>CSS 像素不能直接跟现实中的长度单位换算</li><li>CSS 像素主要用在 CSS 与 JS 中控制元素的大小与位置</li></ul><h4 id="位图像素"><a href="#位图像素" class="headerlink" title="位图像素"></a>位图像素</h4><p>位图和矢量图</p><ul><li>位图图像亦称为点阵图像或栅格图像，是由单个的像素点组成的。放大后会失真。</li><li>矢量图，也称为面向对象的图像或绘图图像，在数学上定义为一系列由线连接的点。放大后不会失真。软件有Adobe Illustrator，Sketch</li></ul><p>位图像素也是一个长度单位。位图像素是栅格图像（如：png，jpg，gif等）最小的数据单元。</p><p><img src="http://cdn.xiaohigh.com/a59e43143986e975993fdb4ec838fe05.png"></p><blockquote><p><span style="color:red">1个位图像素对应于1个物理像素，图片才能得到完美清晰的展示</span></p></blockquote><h4 id="像素之间的关系"><a href="#像素之间的关系" class="headerlink" title="像素之间的关系"></a>像素之间的关系</h4><ul><li><span style="color:#ee0b41">页面不缩放的情况下，CSS 像素 == 独立设备像素 == 逻辑像素 == DIP == 位图像素</span></li><li>在一个标准的显示密度下(普通屏)，一个 CSS 像素对应着一个设备像素，高清屏幕下一个 CSS 像素 等于 N 个物理像素   </li></ul><h4 id="像素密度"><a href="#像素密度" class="headerlink" title="像素密度"></a>像素密度</h4><p>​        屏幕上每英寸可以显示的像素点的数量，单位是 ppi （pixels per inch ），这里还有另一个单位 dpi（dots per inch），两个值的计算方式都一样，只是使用的场景不同。 PPI 主要用来衡量屏幕，DPI 用来衡量打印机，鼠标等设备。</p><p><img src="http://cdn.xiaohigh.com/73a9400a3cf125d517b34be2acfb076a.png" alt="image"></p><p>苹果曾经给出个一个标准：手机屏幕达到 300PPI、平板屏幕达到 220PPI、笔记本电脑屏幕达到 200PPI 即可认为是 Retina 屏幕。</p><h4 id="像素比-N倍屏"><a href="#像素比-N倍屏" class="headerlink" title="像素比 / N倍屏"></a>像素比 / N倍屏</h4><p>像素比（DPR    dpr）： 单一方向上设备物理像素和设备独立像素的比例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.devicePixelRatio</span><br></pre></td></tr></table></figure><p>像素比的作用</p><p><span style="color:#ee0b41">程序可以根据像素比来显示不同的图片，达到清晰显示网页的效果。</span></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="selector-class">.logo</span> &#123;</span><br><span class="line">        <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;./image/logo@2x.png&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> <span style="color:#ee0b41">并不是所有的图片都这样处理，只需要处理那些页面布局需要的图片和图标即可</span></p></blockquote><h3 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h3><h4 id="PC-端"><a href="#PC-端" class="headerlink" title="PC 端"></a>PC 端</h4><p>​        在 PC 端，视口指的是浏览器的可视区域。其宽度和浏览器窗口的宽度保持一致。在 CSS 标准文档中，视口也被称为初始包含块，它是所有 CSS 百分比宽度推算的根源。</p><h4 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h4><p>移动端的视口与 PC 端不同，有三个视口</p><ul><li>布局视口</li><li>视觉视口</li><li>理想视口</li></ul><h5 id="布局视口"><a href="#布局视口" class="headerlink" title="布局视口"></a>布局视口</h5><p>布局视口是用来放置网页内容的区域。</p><p>​        一般移动设备的浏览器都默认定义一个虚拟的布局视口（layout viewport），用于解决<a href="http://www.shindoo.com/index.asp">早期的页面</a>在手机上显示的问题。 视口大小由浏览器厂商决定，<span style="color:#ee0b41">大多数设备的布局视口大小为 980px</span>。</p><p>获取方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.clientWidth </span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight</span><br></pre></td></tr></table></figure><h5 id="视觉视口"><a href="#视觉视口" class="headerlink" title="视觉视口"></a>视觉视口</h5><p>视觉视口就是用户可见的区域。</p><p>获取方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.innerWidth</span><br><span class="line"><span class="built_in">window</span>.innerHeight</span><br></pre></td></tr></table></figure><p><span style="color:#ee0b41">注：不缩放的情况下，视觉视口宽度 == 布局视口宽度。</span></p><h5 id="理想视口"><a href="#理想视口" class="headerlink" title="理想视口"></a>理想视口</h5><p>宽度与屏幕同宽的布局视口称为理想视口。 理想视口的好处</p><ul><li>用户不需要缩放和滚动条就能看到网站的全部内容。</li><li>针对移动端的设计稿更容易开发。</li></ul><p><span style="color:#ee0b41">注意：理想视口不是真实存在的视口</span></p><p>设置理想视口的方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span> /&gt;</span></span><br><span class="line">// 或者</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">// 合体</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a><span style="color:blue">缩放</span></h2><h3 id="PC-端-1"><a href="#PC-端-1" class="headerlink" title="PC 端"></a>PC 端</h3><p>放大时</p><ul><li>布局视口变小</li><li>视觉视口变小</li><li>元素的像素大小不变</li></ul><p>缩小时</p><ul><li>布局视口变大</li><li>视觉视口变大</li><li>元素的像素大小不变</li></ul><h3 id="移动端-1"><a href="#移动端-1" class="headerlink" title="移动端"></a>移动端</h3><p>放大时</p><ul><li>布局视口不变</li><li>视觉视口变小</li></ul><p>缩小时</p><ul><li>布局视口不变</li><li>视觉视口变大</li></ul><p><span style="color:#ee0b41">注意：移动端缩放不会影响页面布局</span></p><h3 id="真机测试流程"><a href="#真机测试流程" class="headerlink" title="真机测试流程"></a><span style="color:#ee0b41">真机测试流程</span></h3><p>真机测试是项目测试必需的一个流程，一定要掌握！！！</p><ol start="0"><li><p>关闭防火墙</p></li><li><p>webstorm -&gt; ctrl + alt + s -&gt; 搜索 debugger -&gt; 修改端口并选中两个多选框  端口要大于 1024  建议用 8000 8888</p></li><li><p>使 PC 与手机处于同一个网络。手机连接电脑 wifi，或者电脑连接手机热点，<span style="color:#ee0b41">两者在同一个 wifi 下最方便</span>。</p></li><li><p>cmd 查看电脑无线网卡的 IP（ipconfig）</p></li><li><p>webstorm 在浏览器中预览文件，将 localhost 更改为 IP  </p></li><li><p>打开草料网址 <a href="https://cli.im/">https://cli.im/</a> 将 URL 转化为二维码，手机扫描即可 😎</p></li></ol><h2 id="viewport-控制"><a href="#viewport-控制" class="headerlink" title="viewport 控制"></a>viewport 控制</h2><p>viewport 标签是苹果公司在 2007 年引进的，用于移动端布局视口的控制。</p><p><span style="color:#ee0b41">使用示例</span></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, user-scaleable=no,maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>viewport 相关选项</p><ul><li>width  布局视口宽度</li><li>initial-scale  初始化缩放比例</li><li>minimum-scale  最小缩放比例</li><li>maximum-scale 最大缩放比例</li><li>user-scalable  设置是否允许用户缩放</li><li>viewport-fit   auto/contain/cover</li></ul><h4 id="width"><a href="#width" class="headerlink" title="width"></a>width</h4><p><span style="color:#ee0b41">width 值可以是数字，也可以是设备宽度表示  device-width，这样可以得到完美视口</span></p><h4 id="initial-scale"><a href="#initial-scale" class="headerlink" title="initial-scale"></a>initial-scale</h4><p>initial-scale 为页面初始化时的显示比例。</p><p>scale = 屏幕宽度独立像素  /  布局视口宽度。 // iphone6  0.5  </p><p>注意：</p><ul><li>chrome 测试该参数会有偏差，真机测试</li><li><span style="color:#ee0b41">initial-scale = 1.0 也可以得到完美视口</span></li><li>initial-scale 会影响布局视口和视觉视口的大小</li><li>width 与 initial-scale 同时设置时，会选择尺寸较大的那个</li></ul><h4 id="minimum-scale"><a href="#minimum-scale" class="headerlink" title="minimum-scale"></a>minimum-scale</h4><p>设置允许用户最小缩放比例。</p><p>minimum-scale = 屏幕独立像素宽度 / 视觉视口   //iphone 6    0.5</p><h4 id="maximum-scale"><a href="#maximum-scale" class="headerlink" title="maximum-scale"></a>maximum-scale</h4><p>设置允许用户最大缩放比例，苹果浏览器 safari 不认识该属性</p><p>maximum-scale = 屏幕独立像素宽度 / 视觉视口  // 2</p><h4 id="user-scalable"><a href="#user-scalable" class="headerlink" title="user-scalable"></a>user-scalable</h4><p>是否允许用户通过手指缩放页面。苹果浏览器 safari 不认识该属性。</p><h4 id="viewport-fit"><a href="#viewport-fit" class="headerlink" title="viewport-fit"></a>viewport-fit</h4><p>设置为 cover 可以解决『刘海屏』的留白问题</p><p><img src="http://cdn.xiaohigh.com/f7bfdd0349972720cc99672529f5ad75.png"></p><h2 id="移动端事件"><a href="#移动端事件" class="headerlink" title="移动端事件"></a>移动端事件</h2><h3 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h3><p>移动端事件列表</p><ul><li>touchstart   元素上触摸开始时触发</li><li>touchmove   元素上触摸移动时触发</li><li>touchend   手指从元素上离开时触发</li><li>touchcancel   触摸被打断时触发</li></ul><p>这几个事件最早出现于IOS safari中，为了向开发人员转达一些特殊的信息。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>touchstart 事件可用于元素触摸的交互，比如页面跳转，标签页切换</p><p>touchmove 事件可用于页面的滑动特效，网页游戏，画板</p><p>touchend 事件主要跟 touchmove 事件结合使用</p><p>touchcancel 使用率不高</p><p>注意：</p><ul><li>touchmove 事件触发后，即使手指离开了元素，touchmove 事件也会持续触发</li><li>触发 touchmove 与 touchend 事件，一定要先触发 touchstart </li><li><span style="color:#ee0b41">事件的作用在于实现移动端的界面交互</span></li></ul><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p>方式一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box.ontouchstart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;touch start&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;touch start&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里推荐使用第二种，第一种有时会失灵。</p><h3 id="点击穿透"><a href="#点击穿透" class="headerlink" title="点击穿透"></a>点击穿透</h3><p><span style="color:#ee0b41">        touch 事件结束后会默认触发元素的 click 事件</span>，如没有设置完美视口，则事件触发的时间间隔为 350ms 左右，如设置完美视口则时间间隔为 5ms 左右。</p><p>​       如果 touch 事件隐藏了元素，则 click 动作将作用到新的元素上，触发新元素的 click 事件或页面跳转，此现象称为点击穿透</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>阻止当前元素事件的默认行为。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cls.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>阻止顶级元素事件的默认行为，可以增加一个包裹元素绑定，也可以给 document 和 window 绑定，不过需要关闭被动模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">passive</span>: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用非链接的元素代替 a 标签，并绑定 touchstart 事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-href</span>=<span class="string">&quot;http://m.atguigu.com&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;holder.js/60x60?bg=#a76&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>延时隐藏遮盖元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">el.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">&#125;, <span class="number">400</span>)</span><br></pre></td></tr></table></figure><h4 id="页面跳转的选择"><a href="#页面跳转的选择" class="headerlink" title="页面跳转的选择"></a>页面跳转的选择</h4><p>移动端页面跳转可以使用 a 链接，也可以使用 touchstart 事件来触发 JS 代码完成跳转</p><ul><li>效率上，touchstart 速度更快</li><li>SEO 优化上， a 链接效果更好</li></ul><h3 id="浏览器默认行为"><a href="#浏览器默认行为" class="headerlink" title="浏览器默认行为"></a>浏览器默认行为</h3><p>这里指的浏览器默认行为主要有两个</p><ul><li>滑动露白</li><li>页面缩放</li></ul><h4 id="为什么要阻止这些默认行为"><a href="#为什么要阻止这些默认行为" class="headerlink" title="为什么要阻止这些默认行为"></a>为什么要阻止这些默认行为</h4><p>这样可以让网页在不同的浏览器都有一样的表现。</p><h4 id="如何阻止默认行为"><a href="#如何阻止默认行为" class="headerlink" title="如何阻止默认行为"></a>如何阻止默认行为</h4><p>可以给 document 绑定 touchstart 事件，并阻止默认行为，不过需要关闭被动模式。<span style="color:#ee0b41">这里推荐创建一个包裹元素，绑定 touchstart 事件并阻止默认行为。</span></p><p>CSS 代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#app</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTML 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JS 代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="后遗症"><a href="#后遗症" class="headerlink" title="后遗症"></a>后遗症</h4><p>最外层元素阻止了 touchstart 默认行为之后，会产生一些意外现象😭</p><ul><li>链接失效</li><li>内容无法选择</li><li>form 元素无法获得焦点</li></ul><h4 id="灵丹妙药"><a href="#灵丹妙药" class="headerlink" title="灵丹妙药"></a>灵丹妙药</h4><p>产生『后遗症』的原因在于 touchstart 阻止了默认行为，后续所有的操作都已经失效。解决问题只需要给目标元素绑定 touchstart 事件并阻止事件冒泡，这样当前操作的默认行为仍然可用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;a&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">link.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">e.stopPropagation();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><span style="color:#ee0b41"> 注:  不是非要阻止浏览器的默认行为，这是一种极端要求的应对方法，正常只需要设置完美视口即可。</span></p></blockquote><h3 id="事件对象属性"><a href="#事件对象属性" class="headerlink" title="事件对象属性"></a>事件对象属性</h3><p>touch 事件对象中有 3 个非常重要的属性</p><ul><li>changedTouches</li><li>targetTouches</li><li>touches</li></ul><h4 id="touchstart-事件"><a href="#touchstart-事件" class="headerlink" title="touchstart 事件"></a>touchstart 事件</h4><p>在 touchstart 事件中，</p><p>changedTouches  为当前在元素上<span style="color:#ee0b41">同时按下</span>的触点对象数组。</p><p>targetTouches  为按下后，当前元素上的触点对象数组</p><p>touches  为按下后，当前屏幕上所有的触点对象数组</p><h4 id="touchmove-事件"><a href="#touchmove-事件" class="headerlink" title="touchmove 事件"></a>touchmove 事件</h4><p>在 touchmove 事件中</p><p>changedTouches  为当前在元素上<span style="color:#ee0b41">同时滑动</span>的触点对象数组。</p><p>targetTouches  为滑动时，当前元素上的触点对象数组</p><p>touches  为滑动时，当前屏幕上所有的触点对象数组</p><h4 id="touchend-事件"><a href="#touchend-事件" class="headerlink" title="touchend 事件"></a>touchend 事件</h4><p>在 touchend 事件中</p><p>changedTouches  为当前在元素上<span style="color:#ee0b41">同时抬起</span>的触点对象数组。</p><p>targetTouches  为结束时时，当前元素上的触点对象数组</p><p>touches  为结束时时，当前屏幕上所有的触点对象数组</p><h4 id="触点对象"><a href="#触点对象" class="headerlink" title="触点对象"></a>触点对象</h4><p>每一个触点对象都包含一些位置信息，其中包括</p><ul><li>clientX  相对可视区域左侧的偏移</li><li>clientY  相对可视区域顶侧的偏移</li><li>pageX   相对文档左侧的偏移</li><li>pageY   相对文档顶部的偏移</li></ul><h3 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h3><ul><li>触摸拖拽</li><li>竖向滑屏</li><li>画板</li></ul><h2 id="适配"><a href="#适配" class="headerlink" title="适配"></a>适配</h2><p>移动端设备的屏幕尺寸繁多，要想让页面的呈现统一，需要对不同尺寸的设备进行适配。适配的方式主要有两种</p><ul><li>viewport 适配</li><li>rem 适配</li></ul><h3 id="viewport-适配"><a href="#viewport-适配" class="headerlink" title="viewport 适配"></a>viewport 适配</h3><p>拿到设计稿之后，设置布局视口宽度为设计稿宽度，然后量尺寸进行布局即可。</p><h3 id="rem适配"><a href="#rem适配" class="headerlink" title="rem适配"></a>rem适配</h3><h4 id="em-和-rem"><a href="#em-和-rem" class="headerlink" title="em 和 rem"></a>em 和 rem</h4><p>em 和 rem 都是 CSS 中的长度单位。而且两个都是相对长度单位，不过两个有点区别</p><ul><li>em 相对的是父级元素的字体大小</li><li>rem 相对的是根元素的字体大小 </li></ul><h4 id="核心是等比缩放"><a href="#核心是等比缩放" class="headerlink" title="核心是等比缩放"></a>核心是等比缩放</h4><p>rem 适配的策略有以下几种</p><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>先按照 IPhone 6 进行页面布局，再进行适配</p><ol><li>完美视口设置</li><li>设计稿总宽 375 布局</li><li>设置 font-size 100px 尺寸转为 rem</li><li>增加 JS 代码进行页面适配</li></ol><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>编写时直接使用 rem 单位进行布局</p><ol><li>完美视口设置</li><li>总宽 375 布局</li><li>以 font-size 100px 进行尺寸换算，设置 rem</li><li>增加 JS 代码进行页面适配</li></ol><h5 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h5><p>选择一个设计稿宽度的比例尺寸作为根元素的字体大小</p><ol><li>完美视口设置</li><li>通过 JS 设置页面的根元素字体大小。可以除以 10 也可以除以其他的数字</li><li>根据设计稿使用 rem 设置元素大小</li></ol><h3 id="1px-边框问题"><a href="#1px-边框问题" class="headerlink" title="1px 边框问题"></a>1px 边框问题</h3><p>高清屏幕下 1px 对应更多的物理像素，所以 1 像素边框看起来比较粗，解决方法如下</p><h4 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h4><ol><li>边框使用伪类选择器，或者单独的元素实现。例如底部边框</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box2</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在高清屏幕下设置</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="selector-class">.box2</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>:<span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="selector-class">.box2</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>:<span class="built_in">scaleY</span>(<span class="number">0.33333</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h4><ol><li>rem 页面布局</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fontSize = <span class="number">50</span>;</span><br><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = <span class="string">&#x27;50&#x27;</span>+px;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>元素的边框设置为 1px</p></li><li><p>通过 viewport 中的 initial-scale 将页面整体缩小 </p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dpr = <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">viewport.setAttribute(<span class="string">&#x27;content&#x27;</span>, </span><br><span class="line">                      <span class="string">&#x27;user-scalable=no, initial-scale=&#x27;</span>+<span class="number">1</span>/dpr + <span class="string">&#x27;,user-scalable=no&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>重新设置根元素字体</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = fontSize * dpr + <span class="string">&#x27;px&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="chrome-插件安装"><a href="#chrome-插件安装" class="headerlink" title="chrome 插件安装"></a>chrome 插件安装</h3><ol><li>下载 crx 插件文件，如 caoliao.crx</li><li>更名为 .rar 后缀， 例 caoliao.rar</li><li>解压文件，得到 caoliao 文件夹</li><li>chrome 浏览器 -&gt;  右上角 ┆ -&gt; 更多工具 -&gt; 扩展程序 -&gt;  右上角开启开发者模式  -&gt; 左侧已解压的扩展程序 -&gt; 选择 caoliao 文件夹  👌</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>电商管理后台 API 接口文档</title>
      <link href="2021/07/27/vue_api_iterator/"/>
      <url>2021/07/27/vue_api_iterator/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-电商管理后台-API-接口文档"><a href="#1-电商管理后台-API-接口文档" class="headerlink" title="1. 电商管理后台 API 接口文档"></a>1. 电商管理后台 API 接口文档</h1><h2 id="1-1-API-V1-接口说明"><a href="#1-1-API-V1-接口说明" class="headerlink" title="1.1. API V1 接口说明"></a>1.1. API V1 接口说明</h2><ul><li>接口基准地址：<code>http://127.0.0.1:8888/api/private/v1/</code></li><li>服务端已开启 CORS 跨域支持</li><li>API V1 认证统一使用 Token 认证</li><li>需要授权的 API ，必须在请求头中使用 <code>Authorization</code> 字段提供 <code>token</code> 令牌</li><li>使用 HTTP Status Code 标识状态</li><li>数据返回格式统一使用 JSON</li></ul><h3 id="1-1-1-支持的请求方法"><a href="#1-1-1-支持的请求方法" class="headerlink" title="1.1.1. 支持的请求方法"></a>1.1.1. 支持的请求方法</h3><ul><li>GET（SELECT）：从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：在服务器新建一个资源。</li><li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li><li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li><li>DELETE（DELETE）：从服务器删除资源。</li><li>HEAD：获取资源的元数据。</li><li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</li></ul><h3 id="1-1-2-通用返回状态说明"><a href="#1-1-2-通用返回状态说明" class="headerlink" title="1.1.2. 通用返回状态说明"></a>1.1.2. 通用返回状态说明</h3><table><thead><tr><th><em>状态码</em></th><th><em>含义</em></th><th><em>说明</em></th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>请求成功</td></tr><tr><td>201</td><td>CREATED</td><td>创建成功</td></tr><tr><td>204</td><td>DELETED</td><td>删除成功</td></tr><tr><td>400</td><td>BAD REQUEST</td><td>请求的地址不存在或者包含不支持的参数</td></tr><tr><td>401</td><td>UNAUTHORIZED</td><td>未授权</td></tr><tr><td>403</td><td>FORBIDDEN</td><td>被禁止访问</td></tr><tr><td>404</td><td>NOT FOUND</td><td>请求的资源不存在</td></tr><tr><td>422</td><td>Unprocesable entity</td><td>[POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误</td></tr><tr><td>500</td><td>INTERNAL SERVER ERROR</td><td>内部错误</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><hr><h2 id="1-2-登录"><a href="#1-2-登录" class="headerlink" title="1.2. 登录"></a>1.2. 登录</h2><h3 id="1-2-1-登录验证接口"><a href="#1-2-1-登录验证接口" class="headerlink" title="1.2.1. 登录验证接口"></a>1.2.1. 登录验证接口</h3><ul><li>请求路径：login</li><li>请求方法：post</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>username</td><td>用户名</td><td>不能为空</td></tr><tr><td>password</td><td>密码</td><td>不能为空</td></tr></tbody></table><ul><li>响应参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>用户 ID</td><td></td></tr><tr><td>rid</td><td>用户角色 ID</td><td></td></tr><tr><td>username</td><td>用户名</td><td></td></tr><tr><td>mobile</td><td>手机号</td><td></td></tr><tr><td>email</td><td>邮箱</td><td></td></tr><tr><td>token</td><td>令牌</td><td>基于 jwt 的令牌</td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">500</span>,</span><br><span class="line">        <span class="attr">&quot;rid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;mobile&quot;</span>: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;123@qq.com&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOjUwMCwicmlkIjowLCJpYXQiOjE1MTI1NDQyOTksImV4cCI6MTUxMjYzMDY5OX0.eGrsrvwHm-tPsO9r_pxHIQ5i5L1kX9RX444uwnRGaIM&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;登录成功&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-用户管理"><a href="#1-3-用户管理" class="headerlink" title="1.3. 用户管理"></a>1.3. 用户管理</h2><h3 id="1-3-1-用户数据列表"><a href="#1-3-1-用户数据列表" class="headerlink" title="1.3.1. 用户数据列表"></a>1.3.1. 用户数据列表</h3><ul><li>请求路径：users</li><li>请求方法：get</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>query</td><td>查询参数</td><td>可以为空</td></tr><tr><td>pagenum</td><td>当前页码</td><td>不能为空</td></tr><tr><td>pagesize</td><td>每页显示条数</td><td>不能为空</td></tr></tbody></table><ul><li>响应参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>totalpage</td><td>总记录数</td><td></td></tr><tr><td>pagenum</td><td>当前页码</td><td></td></tr><tr><td>users</td><td>用户数据集合</td><td></td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;totalpage&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">&quot;pagenum&quot;</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">&quot;users&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>: <span class="number">25</span>,</span><br><span class="line">                <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;tige117&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;mobile&quot;</span>: <span class="string">&quot;18616358651&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;tige112@163.com&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;create_time&quot;</span>: <span class="string">&quot;2017-11-09T20:36:26.000Z&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;mg_state&quot;</span>: <span class="literal">true</span>, <span class="comment">// 当前用户的状态</span></span><br><span class="line">                <span class="attr">&quot;role_name&quot;</span>: <span class="string">&quot;炒鸡管理员&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;获取成功&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-添加用户"><a href="#1-3-2-添加用户" class="headerlink" title="1.3.2. 添加用户"></a>1.3.2. 添加用户</h3><ul><li>请求路径：users</li><li>请求方法：post</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>username</td><td>用户名称</td><td>不能为空</td></tr><tr><td>password</td><td>用户密码</td><td>不能为空</td></tr><tr><td>email</td><td>邮箱</td><td>可以为空</td></tr><tr><td>mobile</td><td>手机号</td><td>可以为空</td></tr></tbody></table><ul><li>响应参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>用户 ID</td><td></td></tr><tr><td>rid</td><td>用户角色 ID</td><td></td></tr><tr><td>username</td><td>用户名</td><td></td></tr><tr><td>mobile</td><td>手机号</td><td></td></tr><tr><td>email</td><td>邮箱</td><td></td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">28</span>,</span><br><span class="line">        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;tige1200&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;mobile&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;openid&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;test@test.com&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;create_time&quot;</span>: <span class="string">&quot;2017-11-10T03:47:13.533Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;modify_time&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;is_delete&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;is_active&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;用户创建成功&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">201</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-修改用户状态"><a href="#1-3-3-修改用户状态" class="headerlink" title="1.3.3. 修改用户状态"></a>1.3.3. 修改用户状态</h3><ul><li>请求路径：users/:uId/state/:type</li><li>请求方法：put</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>uId</td><td>用户 ID</td><td>不能为空<code>携带在url中</code></td></tr><tr><td>type</td><td>用户状态</td><td>不能为空<code>携带在url中</code>，值为 true 或者 false</td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">566</span>,</span><br><span class="line">    <span class="attr">&quot;rid&quot;</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;mobile&quot;</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;bb@itcast.com&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;mg_state&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;设置状态成功&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-4-根据-ID-查询用户信息"><a href="#1-3-4-根据-ID-查询用户信息" class="headerlink" title="1.3.4. 根据 ID 查询用户信息"></a>1.3.4. 根据 ID 查询用户信息</h3><ul><li>请求路径：users/:id</li><li>请求方法：get</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>用户 ID</td><td>不能为空<code>携带在url中</code></td></tr></tbody></table><ul><li>响应参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>用户 ID</td><td></td></tr><tr><td>role_id</td><td>角色 ID</td><td></td></tr><tr><td>mobile</td><td>手机号</td><td></td></tr><tr><td>email</td><td>邮箱</td><td></td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">503</span>,</span><br><span class="line">        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;admin3&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;role_id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;mobile&quot;</span>: <span class="string">&quot;00000&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;new@new.com&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;查询成功&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-5-编辑用户提交"><a href="#1-3-5-编辑用户提交" class="headerlink" title="1.3.5. 编辑用户提交"></a>1.3.5. 编辑用户提交</h3><ul><li>请求路径：users/:id</li><li>请求方法：put</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>用户 id</td><td>不能为空 <code>参数是url参数:id</code></td></tr><tr><td>email</td><td>邮箱</td><td>可以为空</td></tr><tr><td>mobile</td><td>手机号</td><td>可以为空</td></tr></tbody></table><ul><li>响应参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>用户 ID</td><td></td></tr><tr><td>role_id</td><td>角色 ID</td><td></td></tr><tr><td>mobile</td><td>手机号</td><td></td></tr><tr><td>email</td><td>邮箱</td><td></td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 200表示成功，500表示失败 */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">503</span>,</span><br><span class="line">        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;admin3&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;role_id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;mobile&quot;</span>: <span class="string">&quot;111&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;123@123.com&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;更新成功&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-6-删除单个用户"><a href="#1-3-6-删除单个用户" class="headerlink" title="1.3.6. 删除单个用户"></a>1.3.6. 删除单个用户</h3><ul><li>请求路径：users/:id</li><li>请求方法：delete</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>用户 id</td><td>不能为空<code>参数是url参数:id</code></td></tr></tbody></table><ul><li>响应参数</li><li>响应数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;删除成功&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-7-分配用户角色"><a href="#1-3-7-分配用户角色" class="headerlink" title="1.3.7. 分配用户角色"></a>1.3.7. 分配用户角色</h3><ul><li>请求路径：users/:id/role</li><li>请求方法：put</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>用户 ID</td><td>不能为空<code>参数是url参数:id</code></td></tr><tr><td>rid</td><td>角色 id</td><td>不能为空<code>参数body参数</code></td></tr></tbody></table><ul><li>响应参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>用户 ID</td><td></td></tr><tr><td>role_id</td><td>角色 ID</td><td></td></tr><tr><td>mobile</td><td>手机号</td><td></td></tr><tr><td>email</td><td>邮箱</td><td></td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">508</span>,</span><br><span class="line">        <span class="attr">&quot;rid&quot;</span>: <span class="string">&quot;30&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;asdf1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;mobile&quot;</span>: <span class="string">&quot;123123&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;adfsa@qq.com&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;设置角色成功&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-权限管理"><a href="#1-4-权限管理" class="headerlink" title="1.4. 权限管理"></a>1.4. 权限管理</h2><h3 id="1-4-1-所有权限列表"><a href="#1-4-1-所有权限列表" class="headerlink" title="1.4.1. 所有权限列表"></a>1.4.1. 所有权限列表</h3><ul><li>请求路径：rights/:type</li><li>请求方法：get</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>type</td><td>类型</td><td>值 list 或 tree , list 列表显示权限, tree 树状显示权限,<code>参数是url参数:type</code></td></tr></tbody></table><ul><li>响应参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>权限 ID</td><td></td></tr><tr><td>authName</td><td>权限说明</td><td></td></tr><tr><td>level</td><td>权限层级</td><td></td></tr><tr><td>pid</td><td>权限父 ID</td><td></td></tr><tr><td>path</td><td>对应访问路径</td><td></td></tr></tbody></table><ul><li>响应数据 type=list</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="number">101</span>,</span><br><span class="line">            <span class="attr">&quot;authName&quot;</span>: <span class="string">&quot;商品管理&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;level&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;path&quot;</span>: <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="number">102</span>,</span><br><span class="line">            <span class="attr">&quot;authName&quot;</span>: <span class="string">&quot;订单管理&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;level&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;path&quot;</span>: <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;获取权限列表成功&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>type=tree</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  data: [</span><br><span class="line">    &#123;</span><br><span class="line">      id: <span class="number">101</span>,</span><br><span class="line">      authName: &#x27;商品管理&#x27;,</span><br><span class="line">      path: <span class="literal">null</span>,</span><br><span class="line">      pid: <span class="number">0</span>,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="number">104</span>,</span><br><span class="line">          authName: &#x27;商品列表&#x27;,</span><br><span class="line">          path: <span class="literal">null</span>,</span><br><span class="line">          pid: <span class="number">101</span>,</span><br><span class="line">          children: [</span><br><span class="line">            &#123;</span><br><span class="line">              id: <span class="number">105</span>,</span><br><span class="line">              authName: &#x27;添加商品&#x27;,</span><br><span class="line">              path: <span class="literal">null</span>,</span><br><span class="line">              pid: &#x27;<span class="number">104</span>,101&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  meta: &#123;</span><br><span class="line">    msg: &#x27;获取权限列表成功&#x27;,</span><br><span class="line">    status: <span class="number">200</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-左侧菜单权限"><a href="#1-4-2-左侧菜单权限" class="headerlink" title="1.4.2. 左侧菜单权限"></a>1.4.2. 左侧菜单权限</h3><ul><li>请求路径：menus</li><li>请求方法：get</li><li>响应数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="number">101</span>,</span><br><span class="line">            <span class="attr">&quot;authName&quot;</span>: <span class="string">&quot;商品管理&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;path&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;children&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;id&quot;</span>: <span class="number">104</span>,</span><br><span class="line">                    <span class="attr">&quot;authName&quot;</span>: <span class="string">&quot;商品列表&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;path&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">&quot;children&quot;</span>: []</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="string">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;获取菜单列表成功&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-角色管理"><a href="#1-5-角色管理" class="headerlink" title="1.5. 角色管理"></a>1.5. 角色管理</h2><h3 id="1-5-1-角色列表"><a href="#1-5-1-角色列表" class="headerlink" title="1.5.1. 角色列表"></a>1.5.1. 角色列表</h3><ul><li><p>请求路径：roles</p></li><li><p>请求方法：get</p></li><li><p>响应数据说明</p><ul><li>第一层为角色信息</li></ul><ul><li>第二层开始为权限说明，权限一共有 3 层权限</li><li>最后一层权限，不包含 <code>children</code> 属性</li></ul></li><li><p>响应数据</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="number">30</span>,</span><br><span class="line">            <span class="attr">&quot;roleName&quot;</span>: <span class="string">&quot;主管&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;roleDesc&quot;</span>: <span class="string">&quot;技术负责人&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;children&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;id&quot;</span>: <span class="number">101</span>,</span><br><span class="line">                    <span class="attr">&quot;authName&quot;</span>: <span class="string">&quot;商品管理&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;path&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">&quot;children&quot;</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;id&quot;</span>: <span class="number">104</span>,</span><br><span class="line">                            <span class="attr">&quot;authName&quot;</span>: <span class="string">&quot;商品列表&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;path&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                            <span class="attr">&quot;children&quot;</span>: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">&quot;id&quot;</span>: <span class="number">105</span>,</span><br><span class="line">                                    <span class="attr">&quot;authName&quot;</span>: <span class="string">&quot;添加商品&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;path&quot;</span>: <span class="literal">null</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;获取成功&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-2-添加角色"><a href="#1-5-2-添加角色" class="headerlink" title="1.5.2. 添加角色"></a>1.5.2. 添加角色</h3><ul><li>请求路径：roles</li><li>请求方法：post</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>roleName</td><td>角色名称</td><td>不能为空</td></tr><tr><td>roleDesc</td><td>角色描述</td><td>可以为空</td></tr></tbody></table><ul><li>响应参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>roleId</td><td>角色 ID</td><td></td></tr><tr><td>roleName</td><td>角色名称</td><td></td></tr><tr><td>roleDesc</td><td>角色描述</td><td></td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;roleId&quot;</span>: <span class="number">40</span>,</span><br><span class="line">        <span class="attr">&quot;roleName&quot;</span>: <span class="string">&quot;admin2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;roleDesc&quot;</span>: <span class="string">&quot;admin2Desc&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;创建成功&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">201</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-3-根据-ID-查询角色"><a href="#1-5-3-根据-ID-查询角色" class="headerlink" title="1.5.3. 根据 ID 查询角色"></a>1.5.3. 根据 ID 查询角色</h3><ul><li>请求路径：roles/:id</li><li>请求方法：get</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>:id</td><td>角色 ID</td><td>不能为空<code>携带在url中</code></td></tr></tbody></table><ul><li>响应参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>roleId</td><td>角色 ID</td><td></td></tr><tr><td>roleName</td><td>角色名称</td><td></td></tr><tr><td>roleDesc</td><td>角色描述</td><td></td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;roleId&quot;</span>: <span class="number">31</span>,</span><br><span class="line">        <span class="attr">&quot;roleName&quot;</span>: <span class="string">&quot;测试角色&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;roleDesc&quot;</span>: <span class="string">&quot;测试负责人&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;获取成功&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-4-编辑提交角色"><a href="#1-5-4-编辑提交角色" class="headerlink" title="1.5.4. 编辑提交角色"></a>1.5.4. 编辑提交角色</h3><ul><li>请求路径：roles/:id</li><li>请求方法：put</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>:id</td><td>角色 ID</td><td>不能为空<code>携带在url中</code></td></tr><tr><td>roleName</td><td>角色名称</td><td>不能为空</td></tr><tr><td>roleDesc</td><td>角色描述</td><td>可以为空</td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;roleId&quot;</span>: <span class="number">31</span>,</span><br><span class="line">        <span class="attr">&quot;roleName&quot;</span>: <span class="string">&quot;测试角色&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;roleDesc&quot;</span>: <span class="string">&quot;测试角色描述&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;获取成功&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-5-删除角色"><a href="#1-5-5-删除角色" class="headerlink" title="1.5.5. 删除角色"></a>1.5.5. 删除角色</h3><ul><li>请求路径：roles/:id</li><li>请求方法：delete</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>:id</td><td>角色 ID</td><td>不能为空<code>携带在url中</code></td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;删除成功&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-6-角色授权"><a href="#1-5-6-角色授权" class="headerlink" title="1.5.6. 角色授权"></a>1.5.6. 角色授权</h3><ul><li>请求路径：roles/:roleId/rights</li><li>请求方法：post</li><li>请求参数：通过 <code>请求体</code> 发送给后端</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>:roleId</td><td>角色 ID</td><td>不能为空<code>携带在url中</code></td></tr><tr><td>rids</td><td>权限 ID 列表（字符串）</td><td>以 <code>,</code> 分割的权限 ID 列表（获取所有被选中、叶子节点的key和半选中节点的key, 包括 1，2，3级节点）</td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;更新成功&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-7-删除角色指定权限"><a href="#1-5-7-删除角色指定权限" class="headerlink" title="1.5.7. 删除角色指定权限"></a>1.5.7. 删除角色指定权限</h3><ul><li><p>请求路径：roles/:roleId/rights/:rightId</p></li><li><p>请求方法：delete</p></li><li><p>请求参数</p><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>:roleId</td><td>角色 ID</td><td>不能为空<code>携带在url中</code></td></tr><tr><td>:rightId</td><td>权限 ID</td><td>不能为空<code>携带在url中</code></td></tr></tbody></table></li><li><p>响应数据说明 </p><ul><li>返回的data, 是当前角色下最新的权限数据</li></ul></li><li><p>响应数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="number">101</span>,</span><br><span class="line">            <span class="attr">&quot;authName&quot;</span>: <span class="string">&quot;商品管理&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;path&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;children&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;id&quot;</span>: <span class="number">104</span>,</span><br><span class="line">                    <span class="attr">&quot;authName&quot;</span>: <span class="string">&quot;商品列表&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;path&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">&quot;children&quot;</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;id&quot;</span>: <span class="number">105</span>,</span><br><span class="line">                            <span class="attr">&quot;authName&quot;</span>: <span class="string">&quot;添加商品&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;path&quot;</span>: <span class="literal">null</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;id&quot;</span>: <span class="number">116</span>,</span><br><span class="line">                            <span class="attr">&quot;authName&quot;</span>: <span class="string">&quot;修改&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;path&quot;</span>: <span class="literal">null</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;取消权限成功&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-6-商品分类管理"><a href="#1-6-商品分类管理" class="headerlink" title="1.6. 商品分类管理"></a>1.6. 商品分类管理</h2><h3 id="1-6-1-商品分类数据列表"><a href="#1-6-1-商品分类数据列表" class="headerlink" title="1.6.1. 商品分类数据列表"></a>1.6.1. 商品分类数据列表</h3><ul><li>请求路径：categories</li><li>请求方法：get</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>type</td><td>[1,2,3]</td><td>值：1，2，3 分别表示显示一层二层三层分类列表<br />【可选参数】如果不传递，则默认获取所有级别的分类</td></tr><tr><td>pagenum</td><td>当前页码值</td><td>【可选参数】如果不传递，则默认获取所有分类</td></tr><tr><td>pagesize</td><td>每页显示多少条数据</td><td>【可选参数】如果不传递，则默认获取所有分类</td></tr></tbody></table><ul><li>响应参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>cat_id</td><td>分类 ID</td><td></td></tr><tr><td>cat_name</td><td>分类名称</td><td></td></tr><tr><td>cat_pid</td><td>分类父 ID</td><td></td></tr><tr><td>cat_level</td><td>分类当前层级</td><td></td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;cat_id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;cat_name&quot;</span>: <span class="string">&quot;大家电&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cat_pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;cat_level&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;cat_deleted&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;children&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;cat_id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                    <span class="attr">&quot;cat_name&quot;</span>: <span class="string">&quot;电视&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;cat_pid&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">&quot;cat_level&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">&quot;cat_deleted&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">&quot;children&quot;</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;cat_id&quot;</span>: <span class="number">6</span>,</span><br><span class="line">                            <span class="attr">&quot;cat_name&quot;</span>: <span class="string">&quot;曲面电视&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;cat_pid&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                            <span class="attr">&quot;cat_level&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                            <span class="attr">&quot;cat_deleted&quot;</span>: <span class="literal">false</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;cat_id&quot;</span>: <span class="number">7</span>,</span><br><span class="line">                            <span class="attr">&quot;cat_name&quot;</span>: <span class="string">&quot;海信&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;cat_pid&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                            <span class="attr">&quot;cat_level&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                            <span class="attr">&quot;cat_deleted&quot;</span>: <span class="literal">false</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;获取成功&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-2-添加分类"><a href="#1-6-2-添加分类" class="headerlink" title="1.6.2. 添加分类"></a>1.6.2. 添加分类</h3><ul><li>请求路径：categories</li><li>请求方法：post</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>cat_pid</td><td>分类父 ID</td><td>不能为空，如果要添加1级分类，则父分类Id应该设置为  <code>0</code></td></tr><tr><td>cat_name</td><td>分类名称</td><td>不能为空</td></tr><tr><td>cat_level</td><td>分类层级</td><td>不能为空，<code>0</code>表示一级分类；<code>1</code>表示二级分类；<code>2</code>表示三级分类</td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;cat_id&quot;</span>: <span class="number">62</span>,</span><br><span class="line">        <span class="attr">&quot;cat_name&quot;</span>: <span class="string">&quot;相框&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cat_pid&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cat_level&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;创建成功&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">201</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-3-根据-id-查询分类"><a href="#1-6-3-根据-id-查询分类" class="headerlink" title="1.6.3. 根据 id 查询分类"></a>1.6.3. 根据 id 查询分类</h3><ul><li>请求路径：categories/:id</li><li>请求方法：get</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>:id</td><td>分类 ID</td><td>不能为空<code>携带在url中</code></td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;cat_id&quot;: 3,</span><br><span class="line">        &quot;cat_name&quot;: &quot;厨卫电器&quot;,</span><br><span class="line">        &quot;cat_pid&quot;: 0,</span><br><span class="line">        &quot;cat_level&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;msg&quot;: &quot;获取成功&quot;,</span><br><span class="line">        &quot;status&quot;: 200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-4-编辑提交分类"><a href="#1-6-4-编辑提交分类" class="headerlink" title="1.6.4. 编辑提交分类"></a>1.6.4. 编辑提交分类</h3><ul><li>请求路径：categories/:id</li><li>请求方法：put</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>:id</td><td>分类 ID</td><td>不能为空<code>携带在url中</code></td></tr><tr><td>cat_name</td><td>分类名称</td><td>不能为空【此参数，放到请求体中】</td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;cat_id&quot;: 22,</span><br><span class="line">        &quot;cat_name&quot;: &quot;自拍杆&quot;,</span><br><span class="line">        &quot;cat_pid&quot;: 7,</span><br><span class="line">        &quot;cat_level&quot;: 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;msg&quot;: &quot;更新成功&quot;,</span><br><span class="line">        &quot;status&quot;: 200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-5-删除分类"><a href="#1-6-5-删除分类" class="headerlink" title="1.6.5. 删除分类"></a>1.6.5. 删除分类</h3><ul><li>请求路径：categories/:id</li><li>请求方法：delete</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>:id</td><td>分类 ID</td><td>不能为空<code>携带在url中</code></td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: null,</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;msg&quot;: &quot;删除成功&quot;,</span><br><span class="line">        &quot;status&quot;: 200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-7-分类参数管理"><a href="#1-7-分类参数管理" class="headerlink" title="1.7. 分类参数管理"></a>1.7. 分类参数管理</h2><h3 id="1-7-1-参数列表"><a href="#1-7-1-参数列表" class="headerlink" title="1.7.1. 参数列表"></a>1.7.1. 参数列表</h3><ul><li>请求路径：categories/:id/attributes</li><li>请求方法：get</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>:id</td><td>分类 ID</td><td>不能为空<code>携带在url中</code></td></tr><tr><td>sel</td><td>[only,many]</td><td>不能为空,通过 only 或 many 来获取分类静态参数还是动态参数</td></tr></tbody></table><ul><li>响应参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>attr_id</td><td>分类参数 ID</td><td></td></tr><tr><td>attr_name</td><td>分类参数名称</td><td></td></tr><tr><td>cat_id</td><td>分类参数所属分类</td><td></td></tr><tr><td>attr_sel</td><td>only:输入框(唯一) many:后台下拉列表/前台单选框</td><td></td></tr><tr><td>attr_write</td><td>manual:手工录入 list:从列表选择</td><td></td></tr><tr><td>attr_vals</td><td>如果 attr_write:list,那么有值，该值以逗号分隔</td><td></td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;attr_id&quot;: 1,</span><br><span class="line">            &quot;attr_name&quot;: &quot;cpu&quot;,</span><br><span class="line">            &quot;cat_id&quot;: 22,</span><br><span class="line">            &quot;attr_sel&quot;: &quot;only&quot;,</span><br><span class="line">            &quot;attr_write&quot;: &quot;manual&quot;,</span><br><span class="line">            &quot;attr_vals&quot;: &quot;ffff&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;msg&quot;: &quot;获取成功&quot;,</span><br><span class="line">        &quot;status&quot;: 200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-7-2-添加动态参数或者静态属性"><a href="#1-7-2-添加动态参数或者静态属性" class="headerlink" title="1.7.2. 添加动态参数或者静态属性"></a>1.7.2. 添加动态参数或者静态属性</h3><ul><li>请求路径：categories/:id/attributes</li><li>请求方法：post</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>:id</td><td>分类 ID</td><td>不能为空<code>携带在url中</code></td></tr><tr><td>attr_name</td><td>参数名称</td><td>不能为空</td></tr><tr><td>attr_sel</td><td>[only,many]</td><td>不能为空</td></tr><tr><td>attr_vals</td><td>如果是 many 就需要填写值的选项，以逗号分隔</td><td>【可选参数】</td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;attr_id&quot;: 44,</span><br><span class="line">        &quot;attr_name&quot;: &quot;测试参数&quot;,</span><br><span class="line">        &quot;cat_id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;attr_sel&quot;: &quot;many&quot;,</span><br><span class="line">        &quot;attr_write&quot;: &quot;list&quot;,</span><br><span class="line">        &quot;attr_vals&quot;: &quot;a,b,c&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;msg&quot;: &quot;创建成功&quot;,</span><br><span class="line">        &quot;status&quot;: 201</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-7-3-删除参数"><a href="#1-7-3-删除参数" class="headerlink" title="1.7.3. 删除参数"></a>1.7.3. 删除参数</h3><ul><li>请求路径： categories/:id/attributes/:attrid</li><li>请求方法：delete</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>:id</td><td>分类 ID</td><td>不能为空<code>携带在url中</code></td></tr><tr><td>:attrid</td><td>参数 ID</td><td>不能为空<code>携带在url中</code></td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: null,</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;msg&quot;: &quot;删除成功&quot;,</span><br><span class="line">        &quot;status&quot;: 200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-7-4-根据-ID-查询参数"><a href="#1-7-4-根据-ID-查询参数" class="headerlink" title="1.7.4. 根据 ID 查询参数"></a>1.7.4. 根据 ID 查询参数</h3><ul><li>请求路径：categories/:id/attributes/:attrId</li><li>请求方法：get</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>:id</td><td>分类 ID</td><td>不能为空<code>携带在url中</code></td></tr><tr><td>:attrId</td><td>属性 ID</td><td>不能为空<code>携带在url中</code></td></tr><tr><td>attr_sel</td><td>[only,many]</td><td>不能为空</td></tr><tr><td>attr_vals</td><td>如果是 many 就需要填写值的选项，以逗号分隔</td><td></td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;attr_id&quot;: 1,</span><br><span class="line">        &quot;attr_name&quot;: &quot;cpu&quot;,</span><br><span class="line">        &quot;cat_id&quot;: 22,</span><br><span class="line">        &quot;attr_sel&quot;: &quot;only&quot;,</span><br><span class="line">        &quot;attr_write&quot;: &quot;manual&quot;,</span><br><span class="line">        &quot;attr_vals&quot;: &quot;ffff&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;msg&quot;: &quot;获取成功&quot;,</span><br><span class="line">        &quot;status&quot;: 200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-7-5-编辑提交参数"><a href="#1-7-5-编辑提交参数" class="headerlink" title="1.7.5. 编辑提交参数"></a>1.7.5. 编辑提交参数</h3><ul><li>请求路径：categories/:id/attributes/:attrId</li><li>请求方法：put</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>:id</td><td>分类 ID</td><td>不能为空<code>携带在url中</code></td></tr><tr><td>:attrId</td><td>属性 ID</td><td>不能为空<code>携带在url中</code></td></tr><tr><td>attr_name</td><td>新属性的名字</td><td>不能为空，携带在<code>请求体</code>中</td></tr><tr><td>attr_sel</td><td>属性的类型[many或only]</td><td>不能为空，携带在<code>请求体</code>中</td></tr><tr><td>attr_vals</td><td>参数的属性值</td><td>可选参数，携带在<code>请求体</code>中</td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;attr_id&quot;: 9,</span><br><span class="line">        &quot;attr_name&quot;: &quot;测试更新&quot;,</span><br><span class="line">        &quot;cat_id&quot;: &quot;43&quot;,</span><br><span class="line">        &quot;attr_sel&quot;: &quot;only&quot;,</span><br><span class="line">        &quot;attr_write&quot;: &quot;manual&quot;,</span><br><span class="line">        &quot;attr_vals&quot;: &quot;abc&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;msg&quot;: &quot;更新成功&quot;,</span><br><span class="line">        &quot;status&quot;: 200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-8-商品管理"><a href="#1-8-商品管理" class="headerlink" title="1.8. 商品管理"></a>1.8. 商品管理</h2><h3 id="1-8-1-商品列表数据"><a href="#1-8-1-商品列表数据" class="headerlink" title="1.8.1. 商品列表数据"></a>1.8.1. 商品列表数据</h3><ul><li>请求路径：goods</li><li>请求方法：get</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>query</td><td>查询参数</td><td>可以为空</td></tr><tr><td>pagenum</td><td>当前页码</td><td>不能为空</td></tr><tr><td>pagesize</td><td>每页显示条数</td><td>不能为空</td></tr></tbody></table><ul><li>响应参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>total</td><td>总共商品条数</td><td></td></tr><tr><td>pagenum</td><td>当前商品页数</td><td></td></tr><tr><td>goods_id</td><td>商品 ID</td><td></td></tr><tr><td>goods_name</td><td>商品名称</td><td></td></tr><tr><td>goods_price</td><td>价格</td><td></td></tr><tr><td>goods_number</td><td>数量</td><td></td></tr><tr><td>goods_weight</td><td>重量</td><td>不能为空</td></tr><tr><td>goods_state</td><td>商品状态</td><td>商品状态 0: 未通过 1: 审核中 2: 已审核</td></tr><tr><td>add_time</td><td>添加时间</td><td></td></tr><tr><td>upd_time</td><td>更新时间</td><td></td></tr><tr><td>hot_mumber</td><td>热销品数量</td><td></td></tr><tr><td>is_promote</td><td>是否是热销品</td><td></td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 50,</span><br><span class="line">        &quot;pagenum&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;goods&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;goods_id&quot;: 144,</span><br><span class="line">                &quot;goods_name&quot;: &quot;asfdsd&quot;,</span><br><span class="line">                &quot;goods_price&quot;: 1,</span><br><span class="line">                &quot;goods_number&quot;: 1,</span><br><span class="line">                &quot;goods_weight&quot;: 1,</span><br><span class="line">                &quot;goods_state&quot;: null,</span><br><span class="line">                &quot;add_time&quot;: 1512954923,</span><br><span class="line">                &quot;upd_time&quot;: 1512954923,</span><br><span class="line">                &quot;hot_mumber&quot;: 0,</span><br><span class="line">                &quot;is_promote&quot;: false</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;msg&quot;: &quot;获取成功&quot;,</span><br><span class="line">        &quot;status&quot;: 200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-2-添加商品"><a href="#1-8-2-添加商品" class="headerlink" title="1.8.2. 添加商品"></a>1.8.2. 添加商品</h3><ul><li>请求路径：goods</li><li>请求方法：post</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>goods_name</td><td>商品名称</td><td>不能为空</td></tr><tr><td>goods_cat</td><td>以为’,’分割的分类列表</td><td>不能为空</td></tr><tr><td>goods_price</td><td>价格</td><td>不能为空</td></tr><tr><td>goods_number</td><td>数量</td><td>不能为空</td></tr><tr><td>goods_weight</td><td>重量</td><td>不能为空</td></tr><tr><td>goods_introduce</td><td>介绍</td><td>可以为空</td></tr><tr><td>pics</td><td>上传的图片临时路径（对象）</td><td>可以为空</td></tr><tr><td>attrs</td><td>商品的参数（数组），包含 <code>动态参数</code> 和 <code>静态属性</code></td><td>可以为空</td></tr></tbody></table><ul><li>请求数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;goods_name&quot;</span>:<span class="string">&quot;test_goods_name2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;goods_cat&quot;</span>: <span class="string">&quot;1,2,3&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;goods_price&quot;</span>:<span class="number">20</span>,</span><br><span class="line">  <span class="attr">&quot;goods_number&quot;</span>:<span class="number">30</span>,</span><br><span class="line">  <span class="attr">&quot;goods_weight&quot;</span>:<span class="number">40</span>,</span><br><span class="line">  <span class="attr">&quot;goods_introduce&quot;</span>:<span class="string">&quot;abc&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;pics&quot;</span>:[</span><br><span class="line">    &#123;<span class="attr">&quot;pic&quot;</span>:<span class="string">&quot;/tmp_uploads/30f08d52c551ecb447277eae232304b8&quot;</span>&#125;</span><br><span class="line">    ],</span><br><span class="line">  <span class="attr">&quot;attrs&quot;</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;attr_id&quot;</span>:<span class="number">15</span>,</span><br><span class="line">      <span class="attr">&quot;attr_value&quot;</span>:<span class="string">&quot;ddd&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;attr_id&quot;</span>:<span class="number">15</span>,</span><br><span class="line">      <span class="attr">&quot;attr_value&quot;</span>:<span class="string">&quot;eee&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>响应参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>total</td><td>总共商品条数</td><td></td></tr><tr><td>pagenum</td><td>当前商品页数</td><td></td></tr><tr><td>goods_id</td><td>商品 ID</td><td></td></tr><tr><td>goods_cat</td><td>以为’,’分割的分类列表</td><td></td></tr><tr><td>goods_name</td><td>商品名称</td><td></td></tr><tr><td>goods_price</td><td>价格</td><td></td></tr><tr><td>goods_number</td><td>数量</td><td></td></tr><tr><td>goods_weight</td><td>重量</td><td>不能为空</td></tr><tr><td>goods_state</td><td>商品状态</td><td>商品状态 0: 未通过 1: 审核中 2: 已审核</td></tr><tr><td>add_time</td><td>添加时间</td><td></td></tr><tr><td>upd_time</td><td>更新时间</td><td></td></tr><tr><td>hot_mumber</td><td>热销品数量</td><td></td></tr><tr><td>is_promote</td><td>是否是热销品</td><td></td></tr><tr><td>pics</td><td>上传的图片临时路径（对象）</td><td>pics_id:图片 ID,goods_id:商品 ID,pics_big:大图,pics_mid:中图,pics_sma:小图</td></tr><tr><td>attrs</td><td>商品的参数（数组）</td><td>goods_id:商品 ID,attr_value:当前商品的参数值,add_price:浮动价格,attr_vals:预定义的参数值,attr_sel:手动输入，还是单选,</td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;goods_id&quot;</span>: <span class="number">145</span>,</span><br><span class="line">        <span class="attr">&quot;goods_name&quot;</span>: <span class="string">&quot;test_goods_name2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;goods_price&quot;</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">&quot;cat_id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;goods_number&quot;</span>: <span class="number">30</span>,</span><br><span class="line">        <span class="attr">&quot;goods_weight&quot;</span>: <span class="number">40</span>,</span><br><span class="line">        <span class="attr">&quot;goods_introduce&quot;</span>: <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;goods_big_logo&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;goods_small_logo&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;goods_state&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;add_time&quot;</span>: <span class="number">1512962370</span>,</span><br><span class="line">        <span class="attr">&quot;upd_time&quot;</span>: <span class="number">1512962370</span>,</span><br><span class="line">        <span class="attr">&quot;hot_mumber&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;is_promote&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;pics&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;pics_id&quot;</span>: <span class="number">397</span>,</span><br><span class="line">                <span class="attr">&quot;goods_id&quot;</span>: <span class="number">145</span>,</span><br><span class="line">                <span class="attr">&quot;pics_big&quot;</span>: <span class="string">&quot;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;pics_mid&quot;</span>: <span class="string">&quot;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;pics_sma&quot;</span>: <span class="string">&quot;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;attrs&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;goods_id&quot;</span>: <span class="number">145</span>,</span><br><span class="line">                <span class="attr">&quot;attr_id&quot;</span>: <span class="number">15</span>,</span><br><span class="line">                <span class="attr">&quot;attr_value&quot;</span>: <span class="string">&quot;ddd&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;add_price&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">&quot;attr_name&quot;</span>: <span class="string">&quot;fffffff&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;attr_sel&quot;</span>: <span class="string">&quot;many&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;attr_write&quot;</span>: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;attr_vals&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;goods_id&quot;</span>: <span class="number">145</span>,</span><br><span class="line">                <span class="attr">&quot;attr_id&quot;</span>: <span class="number">15</span>,</span><br><span class="line">                <span class="attr">&quot;attr_value&quot;</span>: <span class="string">&quot;eee&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;add_price&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">&quot;attr_name&quot;</span>: <span class="string">&quot;fffffff&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;attr_sel&quot;</span>: <span class="string">&quot;many&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;attr_write&quot;</span>: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;attr_vals&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;创建商品成功&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">201</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-3-根据-ID-查询商品"><a href="#1-8-3-根据-ID-查询商品" class="headerlink" title="1.8.3. 根据 ID 查询商品"></a>1.8.3. 根据 ID 查询商品</h3><ul><li>请求路径：goods/:id</li><li>请求方法：get</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>商品 ID</td><td>不能为空<code>携带在url中</code></td></tr></tbody></table><ul><li>响应参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>total</td><td>总共商品条数</td><td></td></tr><tr><td>pagenum</td><td>当前商品页数</td><td></td></tr><tr><td>goods_id</td><td>商品 ID</td><td></td></tr><tr><td>goods_name</td><td>商品名称</td><td></td></tr><tr><td>goods_price</td><td>价格</td><td></td></tr><tr><td>goods_number</td><td>数量</td><td></td></tr><tr><td>goods_weight</td><td>重量</td><td>不能为空</td></tr><tr><td>goods_state</td><td>商品状态</td><td>商品状态 0: 未通过 1: 审核中 2: 已审核</td></tr><tr><td>add_time</td><td>添加时间</td><td></td></tr><tr><td>upd_time</td><td>更新时间</td><td></td></tr><tr><td>hot_mumber</td><td>热销品数量</td><td></td></tr><tr><td>is_promote</td><td>是否是热销品</td><td></td></tr><tr><td>pics</td><td>上传的图片临时路径（对象）</td><td>pics_id:图片 ID,goods_id:商品 ID,pics_big:大图,pics_mid:中图,pics_sma:小图</td></tr><tr><td>attrs</td><td>商品的参数（数组）</td><td>goods_id:商品 ID,attr_value:当前商品的参数值,add_price:浮动价格,attr_vals:预定义的参数值,attr_sel:手动输入，还是单选,</td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;goods_id&quot;: 145,</span><br><span class="line">        &quot;goods_name&quot;: &quot;test_goods_name2&quot;,</span><br><span class="line">        &quot;goods_price&quot;: 20,</span><br><span class="line">        &quot;goods_number&quot;: 30,</span><br><span class="line">        &quot;goods_weight&quot;: 40,</span><br><span class="line">        &quot;goods_introduce&quot;: &quot;abc&quot;,</span><br><span class="line">        &quot;goods_big_logo&quot;: &quot;&quot;,</span><br><span class="line">        &quot;goods_small_logo&quot;: &quot;&quot;,</span><br><span class="line">        &quot;goods_state&quot;: 1,</span><br><span class="line">        &quot;add_time&quot;: 1512962370,</span><br><span class="line">        &quot;upd_time&quot;: 1512962370,</span><br><span class="line">        &quot;hot_mumber&quot;: 0,</span><br><span class="line">        &quot;is_promote&quot;: false,</span><br><span class="line">        &quot;pics&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;pics_id&quot;: 397,</span><br><span class="line">                &quot;goods_id&quot;: 145,</span><br><span class="line">                &quot;pics_big&quot;: &quot;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8&quot;,</span><br><span class="line">                &quot;pics_mid&quot;: &quot;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8&quot;,</span><br><span class="line">                &quot;pics_sma&quot;: &quot;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;attrs&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;goods_id&quot;: 145,</span><br><span class="line">                &quot;attr_id&quot;: 15,</span><br><span class="line">                &quot;attr_value&quot;: &quot;ddd&quot;,</span><br><span class="line">                &quot;add_price&quot;: null,</span><br><span class="line">                &quot;attr_name&quot;: &quot;fffffff&quot;,</span><br><span class="line">                &quot;attr_sel&quot;: &quot;many&quot;,</span><br><span class="line">                &quot;attr_write&quot;: &quot;list&quot;,</span><br><span class="line">                &quot;attr_vals&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;goods_id&quot;: 145,</span><br><span class="line">                &quot;attr_id&quot;: 15,</span><br><span class="line">                &quot;attr_value&quot;: &quot;eee&quot;,</span><br><span class="line">                &quot;add_price&quot;: null,</span><br><span class="line">                &quot;attr_name&quot;: &quot;fffffff&quot;,</span><br><span class="line">                &quot;attr_sel&quot;: &quot;many&quot;,</span><br><span class="line">                &quot;attr_write&quot;: &quot;list&quot;,</span><br><span class="line">                &quot;attr_vals&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;msg&quot;: &quot;创建商品成功&quot;,</span><br><span class="line">        &quot;status&quot;: 201</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-4-编辑提交商品"><a href="#1-8-4-编辑提交商品" class="headerlink" title="1.8.4. 编辑提交商品"></a>1.8.4. 编辑提交商品</h3><ul><li>请求路径：goods/:id</li><li>请求方法：put</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>商品 ID</td><td>不能为空<code>携带在url中</code></td></tr><tr><td>goods_name</td><td>商品名称</td><td>不能为空</td></tr><tr><td>goods_price</td><td>价格</td><td>不能为空</td></tr><tr><td>goods_number</td><td>数量</td><td>不能为空</td></tr><tr><td>goods_weight</td><td>重量</td><td>不能为空</td></tr><tr><td>goods_introduce</td><td>介绍</td><td>可以为空</td></tr><tr><td>pics</td><td>上传的图片临时路径（对象）</td><td>可以为空</td></tr><tr><td>attrs</td><td>商品的参数（数组）</td><td>可以为空</td></tr></tbody></table><ul><li>请求数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;goods_name&quot;:&quot;test_goods_name2&quot;,</span><br><span class="line">  &quot;goods_price&quot;:20,</span><br><span class="line">  &quot;goods_number&quot;:30,</span><br><span class="line">  &quot;goods_weight&quot;:40,</span><br><span class="line">  &quot;goods_introduce&quot;:&quot;abc&quot;,</span><br><span class="line">  &quot;pics&quot;:[</span><br><span class="line">    &#123;&quot;pic&quot;:&quot;/tmp_uploads/30f08d52c551ecb447277eae232304b8&quot;&#125;</span><br><span class="line">    ],</span><br><span class="line">  &quot;attrs&quot;:[</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;attr_id&quot;:15,</span><br><span class="line">      &quot;attr_value&quot;:&quot;ddd&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;attr_id&quot;:15,</span><br><span class="line">      &quot;attr_value&quot;:&quot;eee&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>响应参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>total</td><td>总共商品条数</td><td></td></tr><tr><td>pagenum</td><td>当前商品页数</td><td></td></tr><tr><td>goods_id</td><td>商品 ID</td><td></td></tr><tr><td>goods_name</td><td>商品名称</td><td></td></tr><tr><td>goods_price</td><td>价格</td><td></td></tr><tr><td>goods_number</td><td>数量</td><td></td></tr><tr><td>goods_weight</td><td>重量</td><td>不能为空</td></tr><tr><td>goods_state</td><td>商品状态</td><td>商品状态 0: 未通过 1: 审核中 2: 已审核</td></tr><tr><td>add_time</td><td>添加时间</td><td></td></tr><tr><td>upd_time</td><td>更新时间</td><td></td></tr><tr><td>hot_mumber</td><td>热销品数量</td><td></td></tr><tr><td>is_promote</td><td>是否是热销品</td><td></td></tr><tr><td>pics</td><td>上传的图片临时路径（对象）</td><td>pics_id:图片 ID,goods_id:商品 ID,pics_big:大图,pics_mid:中图,pics_sma:小图</td></tr><tr><td>attrs</td><td>商品的参数（数组）</td><td>goods_id:商品 ID,attr_value:当前商品的参数值,add_price:浮动价格,attr_vals:预定义的参数值,attr_sel:手动输入，还是单选,</td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;goods_id&quot;: 145,</span><br><span class="line">        &quot;goods_name&quot;: &quot;test_goods_name2&quot;,</span><br><span class="line">        &quot;goods_price&quot;: 20,</span><br><span class="line">        &quot;goods_number&quot;: 30,</span><br><span class="line">        &quot;goods_weight&quot;: 40,</span><br><span class="line">        &quot;goods_introduce&quot;: &quot;abc&quot;,</span><br><span class="line">        &quot;goods_big_logo&quot;: &quot;&quot;,</span><br><span class="line">        &quot;goods_small_logo&quot;: &quot;&quot;,</span><br><span class="line">        &quot;goods_state&quot;: 1,</span><br><span class="line">        &quot;add_time&quot;: 1512962370,</span><br><span class="line">        &quot;upd_time&quot;: 1512962370,</span><br><span class="line">        &quot;hot_mumber&quot;: 0,</span><br><span class="line">        &quot;is_promote&quot;: false,</span><br><span class="line">        &quot;pics&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;pics_id&quot;: 397,</span><br><span class="line">                &quot;goods_id&quot;: 145,</span><br><span class="line">                &quot;pics_big&quot;: &quot;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8&quot;,</span><br><span class="line">                &quot;pics_mid&quot;: &quot;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8&quot;,</span><br><span class="line">                &quot;pics_sma&quot;: &quot;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;attrs&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;goods_id&quot;: 145,</span><br><span class="line">                &quot;attr_id&quot;: 15,</span><br><span class="line">                &quot;attr_value&quot;: &quot;ddd&quot;,</span><br><span class="line">                &quot;add_price&quot;: null,</span><br><span class="line">                &quot;attr_name&quot;: &quot;fffffff&quot;,</span><br><span class="line">                &quot;attr_sel&quot;: &quot;many&quot;,</span><br><span class="line">                &quot;attr_write&quot;: &quot;list&quot;,</span><br><span class="line">                &quot;attr_vals&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;goods_id&quot;: 145,</span><br><span class="line">                &quot;attr_id&quot;: 15,</span><br><span class="line">                &quot;attr_value&quot;: &quot;eee&quot;,</span><br><span class="line">                &quot;add_price&quot;: null,</span><br><span class="line">                &quot;attr_name&quot;: &quot;fffffff&quot;,</span><br><span class="line">                &quot;attr_sel&quot;: &quot;many&quot;,</span><br><span class="line">                &quot;attr_write&quot;: &quot;list&quot;,</span><br><span class="line">                &quot;attr_vals&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;msg&quot;: &quot;创建商品成功&quot;,</span><br><span class="line">        &quot;status&quot;: 201</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-5-删除商品"><a href="#1-8-5-删除商品" class="headerlink" title="1.8.5. 删除商品"></a>1.8.5. 删除商品</h3><ul><li>请求路径：goods/:id</li><li>请求方法：delete</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>商品 ID</td><td>不能为空<code>携带在url中</code></td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: null,</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;msg&quot;: &quot;删除成功&quot;,</span><br><span class="line">        &quot;status&quot;: 200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###同步商品图片</p><ul><li>请求路径：goods/:id/pics</li><li>请求方法：put</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>商品 ID</td><td>不能为空<code>携带在url中</code></td></tr><tr><td>pics</td><td>商品图片集合</td><td>如果有 pics_id 字段会保留该图片，如果没有 pics_id 但是有 pic 字段就会新生成图片数据</td></tr></tbody></table><ul><li>请求数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">;[</span><br><span class="line">  &#123; pic: &#x27;tmp_uploads/db28f6316835836e97653b5c75e418be.png&#x27; &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    pics_id: 397,</span><br><span class="line">    goods_id: 145,</span><br><span class="line">    pics_big: &#x27;uploads/goodspics/big_30f08d52c551ecb447277eae232304b8&#x27;,</span><br><span class="line">    pics_mid: &#x27;uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8&#x27;,</span><br><span class="line">    pics_sma: &#x27;uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>响应数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;goods_id&quot;: 96,</span><br><span class="line">        &quot;goods_name&quot;: &quot;iphoneXX&quot;,</span><br><span class="line">        &quot;goods_price&quot;: 2,</span><br><span class="line">        &quot;goods_number&quot;: 22,</span><br><span class="line">        &quot;goods_weight&quot;: 22,</span><br><span class="line">        &quot;goods_introduce&quot;: null,</span><br><span class="line">        &quot;goods_big_logo&quot;: &quot;./uploads/goods/20171113/483a3b8e99e534ec3e4312dbbaee7c9d.jpg&quot;,</span><br><span class="line">        &quot;goods_small_logo&quot;: &quot;./uploads/goods/20171113/small_483a3b8e99e534ec3e4312dbbaee7c9d.jpg&quot;,</span><br><span class="line">        &quot;goods_state&quot;: 0,</span><br><span class="line">        &quot;is_del&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;add_time&quot;: 1510045904,</span><br><span class="line">        &quot;upd_time&quot;: 1512635159,</span><br><span class="line">        &quot;delete_time&quot;: 1512635159,</span><br><span class="line">        &quot;hot_mumber&quot;: 0,</span><br><span class="line">        &quot;is_promote&quot;: false,</span><br><span class="line">        &quot;pics&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;pics_id&quot;: 383,</span><br><span class="line">                &quot;goods_id&quot;: 96,</span><br><span class="line">                &quot;pics_big&quot;: &quot;uploads/goodspics/big_6f5750132abd3f5b2b93dd722fcde653.jpg&quot;,</span><br><span class="line">                &quot;pics_mid&quot;: &quot;uploads/goodspics/mid_6f5750132abd3f5b2b93dd722fcde653.jpg&quot;,</span><br><span class="line">                &quot;pics_sma&quot;: &quot;uploads/goodspics/sma_6f5750132abd3f5b2b93dd722fcde653.jpg&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;attrs&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;goods_id&quot;: 96,</span><br><span class="line">                &quot;attr_id&quot;: 15,</span><br><span class="line">                &quot;attr_value&quot;: &quot;eee&quot;,</span><br><span class="line">                &quot;add_price&quot;: null,</span><br><span class="line">                &quot;attr_name&quot;: &quot;fffffff&quot;,</span><br><span class="line">                &quot;attr_sel&quot;: &quot;many&quot;,</span><br><span class="line">                &quot;attr_write&quot;: &quot;list&quot;,</span><br><span class="line">                &quot;attr_vals&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;goods_id&quot;: 96,</span><br><span class="line">                &quot;attr_id&quot;: 15,</span><br><span class="line">                &quot;attr_value&quot;: &quot;ddd&quot;,</span><br><span class="line">                &quot;add_price&quot;: null,</span><br><span class="line">                &quot;attr_name&quot;: &quot;fffffff&quot;,</span><br><span class="line">                &quot;attr_sel&quot;: &quot;many&quot;,</span><br><span class="line">                &quot;attr_write&quot;: &quot;list&quot;,</span><br><span class="line">                &quot;attr_vals&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;msg&quot;: &quot;更新成功&quot;,</span><br><span class="line">        &quot;status&quot;: 200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###同步商品属性</p><ul><li>请求路径：goods/:id/attributes</li><li>请求方法：put</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>商品 ID</td><td>不能为空<code>携带在url中</code></td></tr></tbody></table><ul><li>请求数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">;[</span><br><span class="line">  &#123;</span><br><span class="line">    attr_id: 15,</span><br><span class="line">    attr_value: &#x27;ddd&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    attr_id: 15,</span><br><span class="line">    attr_value: &#x27;eee&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>响应数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;goods_id&quot;: 96,</span><br><span class="line">        &quot;goods_name&quot;: &quot;iphoneXX&quot;,</span><br><span class="line">        &quot;goods_price&quot;: 2,</span><br><span class="line">        &quot;goods_number&quot;: 22,</span><br><span class="line">        &quot;goods_weight&quot;: 22,</span><br><span class="line">        &quot;goods_introduce&quot;: null,</span><br><span class="line">        &quot;goods_big_logo&quot;: &quot;./uploads/goods/20171113/483a3b8e99e534ec3e4312dbbaee7c9d.jpg&quot;,</span><br><span class="line">        &quot;goods_small_logo&quot;: &quot;./uploads/goods/20171113/small_483a3b8e99e534ec3e4312dbbaee7c9d.jpg&quot;,</span><br><span class="line">        &quot;goods_state&quot;: 0,</span><br><span class="line">        &quot;is_del&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;add_time&quot;: 1510045904,</span><br><span class="line">        &quot;upd_time&quot;: 1512635159,</span><br><span class="line">        &quot;delete_time&quot;: 1512635159,</span><br><span class="line">        &quot;hot_mumber&quot;: 0,</span><br><span class="line">        &quot;is_promote&quot;: false,</span><br><span class="line">        &quot;pics&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;pics_id&quot;: 383,</span><br><span class="line">                &quot;goods_id&quot;: 96,</span><br><span class="line">                &quot;pics_big&quot;: &quot;uploads/goodspics/big_6f5750132abd3f5b2b93dd722fcde653.jpg&quot;,</span><br><span class="line">                &quot;pics_mid&quot;: &quot;uploads/goodspics/mid_6f5750132abd3f5b2b93dd722fcde653.jpg&quot;,</span><br><span class="line">                &quot;pics_sma&quot;: &quot;uploads/goodspics/sma_6f5750132abd3f5b2b93dd722fcde653.jpg&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;attrs&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;goods_id&quot;: 96,</span><br><span class="line">                &quot;attr_id&quot;: 15,</span><br><span class="line">                &quot;attr_value&quot;: &quot;eee&quot;,</span><br><span class="line">                &quot;add_price&quot;: null,</span><br><span class="line">                &quot;attr_name&quot;: &quot;fffffff&quot;,</span><br><span class="line">                &quot;attr_sel&quot;: &quot;many&quot;,</span><br><span class="line">                &quot;attr_write&quot;: &quot;list&quot;,</span><br><span class="line">                &quot;attr_vals&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;goods_id&quot;: 96,</span><br><span class="line">                &quot;attr_id&quot;: 15,</span><br><span class="line">                &quot;attr_value&quot;: &quot;ddd&quot;,</span><br><span class="line">                &quot;add_price&quot;: null,</span><br><span class="line">                &quot;attr_name&quot;: &quot;fffffff&quot;,</span><br><span class="line">                &quot;attr_sel&quot;: &quot;many&quot;,</span><br><span class="line">                &quot;attr_write&quot;: &quot;list&quot;,</span><br><span class="line">                &quot;attr_vals&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;msg&quot;: &quot;更新成功&quot;,</span><br><span class="line">        &quot;status&quot;: 200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###商品图片处理必须安装 GraphicsMagick</p><ul><li>linux</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install GraphicsMagick</span><br></pre></td></tr></table></figure><ul><li>Mac OS X</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install GraphicsMagick</span><br></pre></td></tr></table></figure><ul><li>Windows <a href="https://sourceforge.net/projects/graphicsmagick/files/graphicsmagick-binaries/1.3.27/GraphicsMagick-1.3.27-Q8-win64-dll.exe/download">点击下载</a></li></ul><h2 id="1-9-图片上传"><a href="#1-9-图片上传" class="headerlink" title="1.9. 图片上传"></a>1.9. 图片上传</h2><ul><li>请求路径：upload</li><li>请求方法：post</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>file</td><td>上传文件</td><td></td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;tmp_path&quot;: &quot;tmp_uploads/ccfc5179a914e94506bcbb7377e8985f.png&quot;,</span><br><span class="line">        &quot;url&quot;: &quot;http://127.0.0.1:8888tmp_uploads/ccfc5179a914e94506bcbb7377e8985f.png&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;msg&quot;: &quot;上传成功&quot;,</span><br><span class="line">        &quot;status&quot;: 200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-10-订单管理"><a href="#1-10-订单管理" class="headerlink" title="1.10. 订单管理"></a>1.10. 订单管理</h2><h3 id="1-10-1-订单数据列表"><a href="#1-10-1-订单数据列表" class="headerlink" title="1.10.1. 订单数据列表"></a>1.10.1. 订单数据列表</h3><ul><li>请求路径：orders</li><li>请求方法：get</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>query</td><td>查询参数</td><td>可以为空</td></tr><tr><td>pagenum</td><td>当前页码</td><td>不能为空</td></tr><tr><td>pagesize</td><td>每页显示条数</td><td>不能为空</td></tr><tr><td>user_id</td><td>用户 ID</td><td>可以为空</td></tr><tr><td>pay_status</td><td>支付状态</td><td>可以为空</td></tr><tr><td>is_send</td><td>是否发货</td><td>可以为空</td></tr><tr><td>order_fapiao_title</td><td>[‘个人’,’公司’]</td><td>可以为空</td></tr><tr><td>order_fapiao_company</td><td>公司名称</td><td>可以为空</td></tr><tr><td>order_fapiao_content</td><td>发票内容</td><td>可以为空</td></tr><tr><td>consignee_addr</td><td>发货地址</td><td>可以为空</td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 1,</span><br><span class="line">        &quot;pagenum&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;goods&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;order_id&quot;: 47,</span><br><span class="line">                &quot;user_id&quot;: 133,</span><br><span class="line">                &quot;order_number&quot;: &quot;itcast-59e7502d7993d&quot;,</span><br><span class="line">                &quot;order_price&quot;: 322,</span><br><span class="line">                &quot;order_pay&quot;: &quot;1&quot;,</span><br><span class="line">                &quot;is_send&quot;: &quot;是&quot;,</span><br><span class="line">                &quot;trade_no&quot;: &quot;&quot;,</span><br><span class="line">                &quot;order_fapiao_title&quot;: &quot;个人&quot;,</span><br><span class="line">                &quot;order_fapiao_company&quot;: &quot;&quot;,</span><br><span class="line">                &quot;order_fapiao_content&quot;: &quot;办公用品&quot;,</span><br><span class="line">                &quot;consignee_addr&quot;: &quot;a:7:&#123;s:6:\&quot;cgn_id\&quot;;i:1;s:7:\&quot;user_id\&quot;;i:133;s:8:\&quot;cgn_name\&quot;;s:9:\&quot;王二柱\&quot;;s:11:\&quot;cgn_address\&quot;;s:51:\&quot;北京市海淀区苏州街长远天地大厦305室\&quot;;s:7:\&quot;cgn_tel\&quot;;s:11:\&quot;13566771298\&quot;;s:8:\&quot;cgn_code\&quot;;s:6:\&quot;306810\&quot;;s:11:\&quot;delete_time\&quot;;N;&#125;&quot;,</span><br><span class="line">                &quot;pay_status&quot;: &quot;1&quot;,</span><br><span class="line">                &quot;create_time&quot;: 1508331565,</span><br><span class="line">                &quot;update_time&quot;: 1508331565</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;msg&quot;: &quot;获取成功&quot;,</span><br><span class="line">        &quot;status&quot;: 200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-10-2-修改订单状态"><a href="#1-10-2-修改订单状态" class="headerlink" title="1.10.2. 修改订单状态"></a>1.10.2. 修改订单状态</h3><ul><li>请求路径：orders/:id</li><li>请求方法：put</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>订单 ID</td><td>不能为空<code>携带在url中</code></td></tr><tr><td>is_send</td><td>订单是否发货</td><td>1:已经发货，0:未发货</td></tr><tr><td>order_pay</td><td>订单支付</td><td>支付方式 0 未支付 1 支付宝 2 微信 3 银行卡</td></tr><tr><td>order_price</td><td>订单价格</td><td></td></tr><tr><td>order_number</td><td>订单数量</td><td></td></tr><tr><td>pay_status</td><td>支付状态</td><td>订单状态： 0 未付款、1 已付款</td></tr></tbody></table><ul><li>请求数据说明<ul><li>所有请求数据都是增量更新，如果参数不填写，就不会更新该字段</li></ul></li><li>响应数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;order_id&quot;: 67,</span><br><span class="line">        &quot;user_id&quot;: 1,</span><br><span class="line">        &quot;order_number&quot;: &quot;itcast-g7kmck71vjaujfgoi&quot;,</span><br><span class="line">        &quot;order_price&quot;: 20,</span><br><span class="line">        &quot;order_pay&quot;: &quot;0&quot;,</span><br><span class="line">        &quot;is_send&quot;: &quot;否&quot;,</span><br><span class="line">        &quot;trade_no&quot;: &quot;&quot;,</span><br><span class="line">        &quot;order_fapiao_title&quot;: &quot;个人&quot;,</span><br><span class="line">        &quot;order_fapiao_company&quot;: &quot;&quot;,</span><br><span class="line">        &quot;order_fapiao_content&quot;: &quot;&quot;,</span><br><span class="line">        &quot;consignee_addr&quot;: &quot;&quot;,</span><br><span class="line">        &quot;pay_status&quot;: &quot;0&quot;,</span><br><span class="line">        &quot;create_time&quot;: 1512533560,</span><br><span class="line">        &quot;update_time&quot;: 1512533560,</span><br><span class="line">        &quot;goods&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;id&quot;: 82,</span><br><span class="line">                &quot;order_id&quot;: 67,</span><br><span class="line">                &quot;goods_id&quot;: 96,</span><br><span class="line">                &quot;goods_price&quot;: 333,</span><br><span class="line">                &quot;goods_number&quot;: 2,</span><br><span class="line">                &quot;goods_total_price&quot;: 999</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;id&quot;: 83,</span><br><span class="line">                &quot;order_id&quot;: 67,</span><br><span class="line">                &quot;goods_id&quot;: 95,</span><br><span class="line">                &quot;goods_price&quot;: 666,</span><br><span class="line">                &quot;goods_number&quot;: 5,</span><br><span class="line">                &quot;goods_total_price&quot;: 999</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;msg&quot;: &quot;获取成功&quot;,</span><br><span class="line">        &quot;status&quot;: 200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-10-3-查看订单详情"><a href="#1-10-3-查看订单详情" class="headerlink" title="1.10.3. 查看订单详情"></a>1.10.3. 查看订单详情</h3><ul><li>请求路径：orders/:id</li><li>请求方法：get</li><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>参数说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>订单 ID</td><td>不能为空<code>携带在url中</code></td></tr></tbody></table><ul><li>响应数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;order_id&quot;: 67,</span><br><span class="line">        &quot;user_id&quot;: 1,</span><br><span class="line">        &quot;order_number&quot;: &quot;itcast-g7kmck71vjaujfgoi&quot;,</span><br><span class="line">        &quot;order_price&quot;: 20,</span><br><span class="line">        &quot;order_pay&quot;: &quot;0&quot;,</span><br><span class="line">        &quot;is_send&quot;: &quot;否&quot;,</span><br><span class="line">        &quot;trade_no&quot;: &quot;&quot;,</span><br><span class="line">        &quot;order_fapiao_title&quot;: &quot;个人&quot;,</span><br><span class="line">        &quot;order_fapiao_company&quot;: &quot;&quot;,</span><br><span class="line">        &quot;order_fapiao_content&quot;: &quot;&quot;,</span><br><span class="line">        &quot;consignee_addr&quot;: &quot;&quot;,</span><br><span class="line">        &quot;pay_status&quot;: &quot;0&quot;,</span><br><span class="line">        &quot;create_time&quot;: 1512533560,</span><br><span class="line">        &quot;update_time&quot;: 1512533560,</span><br><span class="line">        &quot;goods&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;id&quot;: 82,</span><br><span class="line">                &quot;order_id&quot;: 67,</span><br><span class="line">                &quot;goods_id&quot;: 96,</span><br><span class="line">                &quot;goods_price&quot;: 333,</span><br><span class="line">                &quot;goods_number&quot;: 2,</span><br><span class="line">                &quot;goods_total_price&quot;: 999</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;id&quot;: 83,</span><br><span class="line">                &quot;order_id&quot;: 67,</span><br><span class="line">                &quot;goods_id&quot;: 95,</span><br><span class="line">                &quot;goods_price&quot;: 666,</span><br><span class="line">                &quot;goods_number&quot;: 5,</span><br><span class="line">                &quot;goods_total_price&quot;: 999</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;msg&quot;: &quot;获取成功&quot;,</span><br><span class="line">        &quot;status&quot;: 200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-10-4-修改地址"><a href="#1-10-4-修改地址" class="headerlink" title="1.10.4. 修改地址"></a>1.10.4. 修改地址</h3><ol><li><a href="https://github.com/iceyangcc/provinces-china">省市区/县联动效果 - 结合ElementUI的 el-cascader 组件</a></li></ol><h3 id="1-10-5-查看物流信息"><a href="#1-10-5-查看物流信息" class="headerlink" title="1.10.5. 查看物流信息"></a>1.10.5. 查看物流信息</h3><ul><li><p>请求路径：/kuaidi/:id</p></li><li><p>请求方法：get</p></li><li><p>供测试的物流单号：1106975712662</p></li><li><p>响应数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;2018-05-10 09:39:00&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;ftime&quot;</span>: <span class="string">&quot;2018-05-10 09:39:00&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;context&quot;</span>: <span class="string">&quot;已签收,感谢使用顺丰,期待再次为您服务&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;location&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;2018-05-10 08:23:00&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;ftime&quot;</span>: <span class="string">&quot;2018-05-10 08:23:00&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;context&quot;</span>: <span class="string">&quot;[北京市]北京海淀育新小区营业点派件员 顺丰速运 95338正在为您派件&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;location&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;2018-05-10 07:32:00&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;ftime&quot;</span>: <span class="string">&quot;2018-05-10 07:32:00&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;context&quot;</span>: <span class="string">&quot;快件到达 [北京海淀育新小区营业点]&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;location&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;2018-05-10 02:03:00&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;ftime&quot;</span>: <span class="string">&quot;2018-05-10 02:03:00&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;context&quot;</span>: <span class="string">&quot;快件在[北京顺义集散中心]已装车,准备发往 [北京海淀育新小区营业点]&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;location&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;2018-05-09 23:05:00&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;ftime&quot;</span>: <span class="string">&quot;2018-05-09 23:05:00&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;context&quot;</span>: <span class="string">&quot;快件到达 [北京顺义集散中心]&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;location&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;2018-05-09 21:21:00&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;ftime&quot;</span>: <span class="string">&quot;2018-05-09 21:21:00&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;context&quot;</span>: <span class="string">&quot;快件在[北京宝胜营业点]已装车,准备发往 [北京顺义集散中心]&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;location&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;2018-05-09 13:07:00&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;ftime&quot;</span>: <span class="string">&quot;2018-05-09 13:07:00&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;context&quot;</span>: <span class="string">&quot;顺丰速运 已收取快件&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;location&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;2018-05-09 12:25:03&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;ftime&quot;</span>: <span class="string">&quot;2018-05-09 12:25:03&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;context&quot;</span>: <span class="string">&quot;卖家发货&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;location&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;2018-05-09 12:22:24&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;ftime&quot;</span>: <span class="string">&quot;2018-05-09 12:22:24&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;context&quot;</span>: <span class="string">&quot;您的订单将由HLA（北京海淀区清河中街店）门店安排发货。&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;location&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;2018-05-08 21:36:04&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;ftime&quot;</span>: <span class="string">&quot;2018-05-08 21:36:04&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;context&quot;</span>: <span class="string">&quot;商品已经下单&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;location&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;meta&quot;</span>: &#123; <span class="attr">&quot;status&quot;</span>: <span class="number">200</span>, <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;获取物流信息成功！&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="1-11-数据统计"><a href="#1-11-数据统计" class="headerlink" title="1.11. 数据统计"></a>1.11. 数据统计</h2><h3 id="1-11-1-基于时间统计的折线图"><a href="#1-11-1-基于时间统计的折线图" class="headerlink" title="1.11.1.  基于时间统计的折线图"></a>1.11.1.  基于时间统计的折线图</h3><ul><li><p>请求路径：reports/type/1</p></li><li><p>请求方法：get</p></li><li><p>响应数据</p></li><li><p>需要合并的选项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">options: &#123;</span><br><span class="line">        <span class="attr">title</span>: &#123;</span><br><span class="line">          <span class="attr">text</span>: <span class="string">&#x27;用户来源&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">tooltip</span>: &#123;</span><br><span class="line">          <span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span>,</span><br><span class="line">          <span class="attr">axisPointer</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;cross&#x27;</span>,</span><br><span class="line">            <span class="attr">label</span>: &#123;</span><br><span class="line">              <span class="attr">backgroundColor</span>: <span class="string">&#x27;#E9EEF3&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">grid</span>: &#123;</span><br><span class="line">          <span class="attr">left</span>: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">          <span class="attr">right</span>: <span class="string">&#x27;4%&#x27;</span>,</span><br><span class="line">          <span class="attr">bottom</span>: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">          <span class="attr">containLabel</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">xAxis</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">boundaryGap</span>: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">yAxis</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
          <category> 电商管理后台 API 接口文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> 电商管理后台 API 接口文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES7 -ES11 新特新</title>
      <link href="2021/07/24/ES7_ES11/"/>
      <url>2021/07/24/ES7_ES11/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ES7-新特新"><a href="#ES7-新特新" class="headerlink" title="ES7 新特新"></a>ES7 新特新</h2><p><strong>Array.prototype.includes</strong></p><p>includes 方法用于检测数组中是是否包含某一个元素，返回布尔类型值。类似于<code>typeof</code> 但是返回值是数字，因此引入includes ，对判断更加方便</p><p><strong>指数操作符</strong></p><p>在 ES7 中引入指数运算符 【**】，用来实现幂运算，功能与 <code>Math.pow</code> 相同</p><p><code>console.log(2 ** 10) //logs 1024 ，2的10次方</code></p><p><code>console.log(Math.pow(2,10))</code></p><h2 id="ES8-新特新"><a href="#ES8-新特新" class="headerlink" title="ES8 新特新"></a>ES8 新特新</h2><p>ES8 引入了 <code>async</code> <code>await</code> 两种语法，结合可以让异步代码像同步代码一样</p><h3 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h3><ol><li>async 函数返回值为 promise 对象</li><li>promise 对象的结果由 async 函数执行的返回值决定</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明 async 函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//返回的结果不是一个 Promise 类型的对象，返回结果就是成功 Promise 对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;SimpleLife&#x27;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;错误&#x27;</span>) <span class="comment">//抛出异常，返回结果是失败的 Promise</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 返回结果是 Promise对象，由该对象决定返回的成功 还是失败</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    resolve(<span class="string">&#x27;成功数据&#x27;</span>) <span class="comment">//fn返回就是成功的promise ，且值就是 resolve 传的值</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="await-表达式"><a href="#await-表达式" class="headerlink" title="await 表达式"></a>await 表达式</h3><ol><li>await 必须写在 async 函数中</li><li>await 右侧的表达式一般为 promise 对象</li><li>await 返回的是 promise 成功的值</li><li>await 的 promise 失败了，就会抛出异常，需要通过 try … catch 捕获异常</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Promise 对象</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//resolve(&#x27;成功的数据&#x27;)</span></span><br><span class="line">  reject(<span class="string">&#x27;失败了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// await 要放在 async 函数中</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 使用 try...catch 捕获成功和异常</span></span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">await</span> p;<span class="comment">// await 后面是接收 Promise 对象成功的值</span></span><br><span class="line">    <span class="built_in">console</span>.log(result) <span class="comment">// 如果 Promise 成功了 打印成功的数据</span></span><br><span class="line">  &#125; <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e) <span class="comment">// 如果 Promise 失败，打印异常</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(); <span class="comment">// 调用函数</span></span><br></pre></td></tr></table></figure><h3 id="对象方法的扩展"><a href="#对象方法的扩展" class="headerlink" title="对象方法的扩展"></a>对象方法的扩展</h3><p><strong>Object.values</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="function"><span class="title">simplelife</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;simplelife&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="string">&#x27;1.88&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取对象所有的键</span></span><br><span class="line"><span class="keyword">let</span> keysname = <span class="built_in">Object</span>.keys(simplelife)</span><br><span class="line"><span class="comment">// 获取对象所有的值</span></span><br><span class="line"><span class="keyword">let</span> values = <span class="built_in">Object</span>.values(simplelife)</span><br></pre></td></tr></table></figure><p><strong>Object.entries</strong></p><p>返回结果是一个数组，每一个成员也是数组。数组第一个是键名，第二个是值</p><p><strong>Object.getOwnPropertyDescriptors</strong></p><p>返回结果是对象属性的描述对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 描述对象</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>,&#123;</span><br><span class="line"><span class="attr">name</span>:&#123;</span><br><span class="line">    <span class="comment">// 设置值</span></span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;SimpleLife&#x27;</span>,</span><br><span class="line">    <span class="comment">// 属性特性</span></span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumberable</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="ES9-新特新"><a href="#ES9-新特新" class="headerlink" title="ES9 新特新"></a>ES9 新特新</h2><blockquote><p>rest 参数与 spread 扩展运算符在 ES6 中已经引入，不过 ES6 中只针对于数组，在 ES9 中为对象提供了像数组一样的 rest 参数和 spread 扩展运算符</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">&#123;host,port,username,password&#125;</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(host)</span><br><span class="line">  <span class="built_in">console</span>.log(port)</span><br><span class="line">  <span class="built_in">console</span>.log(username)</span><br><span class="line">  <span class="built_in">console</span>.log(password)</span><br><span class="line">&#125;</span><br><span class="line">connect(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 rest 参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">&#123;host,port,...user&#125;</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(host)</span><br><span class="line">  <span class="built_in">console</span>.log(port)</span><br><span class="line">  <span class="built_in">console</span>.log(user)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 除了 host port 其它值都存入 user，user是一个</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用扩展运算符 对对象进行合并</span></span><br><span class="line"><span class="keyword">const</span> one = &#123;</span><br><span class="line">  <span class="attr">one</span>: <span class="string">&#x27;oneoneone&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> two = &#123;</span><br><span class="line">  <span class="attr">two</span>: <span class="string">&#x27;twotwotwo&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...one 的结果是去掉了花括号 =》 one: &#x27;oneoneone&#x27;</span></span><br><span class="line"><span class="comment">// 对one two对象进行合并到three对象</span></span><br><span class="line"><span class="keyword">const</span> three = &#123;</span><br><span class="line">  ...one,...two</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正则扩展：命名捕获分组"><a href="#正则扩展：命名捕获分组" class="headerlink" title="正则扩展：命名捕获分组"></a>正则扩展：命名捕获分组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个字符串</span></span><br><span class="line"><span class="keyword">let</span> blogurl = <span class="string">&#x27;&lt;a href=&quot;http://www.noti.top&quot;&gt;SimpleLife&lt;/a&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取 URL 与 标签文本</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;a href=&quot;(.*)&quot;&gt;(.*)&lt;\/a&gt;/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line"><span class="keyword">const</span> result = reg.exec(blogurl)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过result索引获取相应的值，[0]获取字符串全部内容，[1]获取第一处捕获，[2]获取第二处捕获</span></span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210725211006.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对获取进行命名分组</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;a href=&quot;(?&lt;url&gt;.*)&quot;&gt;(?&lt;text&gt;.*)&lt;\/a&gt;/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果不同是 之前groups 值是undefined。现在是包含一个url 和text的值</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210725211619.png"></p><h3 id="正则扩展：反向断言"><a href="#正则扩展：反向断言" class="headerlink" title="正则扩展：反向断言"></a>正则扩展：反向断言</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正向断言，通过后面来确认前面是否合法</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;JS5211314你知道么555啦啦啦&#x27;</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/\d+(?=啦啦啦)/</span></span><br><span class="line"><span class="keyword">const</span> result = reg.exec(str)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反向断言</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/(?&lt;=么)\d+/</span></span><br></pre></td></tr></table></figure><h3 id="正则扩展：dotAll-模式"><a href="#正则扩展：dotAll-模式" class="headerlink" title="正则扩展：dotAll 模式"></a>正则扩展：dotAll 模式</h3><p>通过 <code>.* </code> 能够匹配任意字符，<code>.*?</code> 只匹配一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /s 匹配结果只有一条</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/</span>s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /gs 全局匹配</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/</span>sg;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过while循环，可以将匹配结果存入数组</span></span><br><span class="line"><span class="keyword">while</span>(result = reg.exec(str))&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正则扩展：-和-的区别"><a href="#正则扩展：-和-的区别" class="headerlink" title="正则扩展：.* 和 .*? 的区别"></a>正则扩展：<code>.* 和 .*? 的区别</code></h3><p>表达式 .* 就是单个字符匹配任意次，即贪婪匹配。 </p><p>表达式 .*? 是满足条件的情况只匹配一次，即最小匹配.</p><h2 id="ES10-新特新"><a href="#ES10-新特新" class="headerlink" title="ES10 新特新"></a>ES10 新特新</h2><p><strong>Object.fromEntries</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二维数组</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="built_in">Object</span>.fromEntries([</span><br><span class="line">  [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;simplelife&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;blog&#x27;</span>,<span class="string">&#x27;JS,HTML,CSS&#x27;</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">// 结果是对象，将二维数组转换成了对象，键值对的方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">m.set(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;Simplelife&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> result2 = <span class="built_in">Object</span>.fromEntries(m)</span><br><span class="line"><span class="built_in">console</span>.log(result2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES8 Object.entries</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Object</span>.entries(&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Simple&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">//结果是二维数组</span></span><br></pre></td></tr></table></figure><p><strong>trimStart 与 trimEnd：指定清除左侧和右侧的空白</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;   simplelife   &#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.trimStart()) <span class="comment">//logs &#x27;simplelife   &#x27;左侧空白被清楚</span></span><br><span class="line"><span class="built_in">console</span>.log(str.trimEnd()) <span class="comment">//logs &#x27;   simplelife&#x27; 右侧空白被清楚</span></span><br></pre></td></tr></table></figure><h3 id="数组扩展"><a href="#数组扩展" class="headerlink" title="数组扩展"></a>数组扩展</h3><p><strong>flat</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将多维数组转化为低维数组，默认深度1</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line"><span class="built_in">console</span>.log(arr.flat()) <span class="comment">//logs [1,2,3,4,5,6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">5</span>,<span class="number">6</span>,[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]]</span><br><span class="line"><span class="built_in">console</span>.log(arr.flat()) <span class="comment">//logs [1,2,3,4,5,6,[7,8,9]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">5</span>,<span class="number">6</span>,[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]]</span><br><span class="line"><span class="built_in">console</span>.log(arr.flat(<span class="number">2</span>)) <span class="comment">//logs [1,2,3,4,5,6,7,8,9] //falt传入值2 深度为2</span></span><br></pre></td></tr></table></figure><p><strong>flatMap</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> result = arr.map(<span class="function"><span class="params">item</span> =&gt;</span> [item*<span class="number">10</span>]) <span class="comment">// result 的成员是数组，使用flatMap 直接降维</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = arr.flatMap(<span class="function"><span class="params">item</span> =&gt;</span> [item*<span class="number">10</span>])</span><br></pre></td></tr></table></figure><h3 id="Symbol-扩展"><a href="#Symbol-扩展" class="headerlink" title="Symbol 扩展"></a>Symbol 扩展</h3><p><strong>Symbol.prototype.description</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Symbol</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>(<span class="string">&#x27;SimpleLife&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s.description) <span class="comment">// 获取symbol值</span></span><br></pre></td></tr></table></figure><h2 id="ES11-新特性"><a href="#ES11-新特性" class="headerlink" title="ES11 新特性"></a>ES11 新特性</h2><h3 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="comment">// 公有属性</span></span><br><span class="line">  name;</span><br><span class="line">  <span class="comment">// 私有属性</span></span><br><span class="line">  #age;</span><br><span class="line">  #weight;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name,age,weight</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.#age = age</span><br><span class="line">    <span class="built_in">this</span>.#weight = weight</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">const</span> girl = <span class="keyword">new</span> Person(<span class="string">&#x27;xiaohong&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;45kg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无法获取私有属性，只能在类内部获取</span></span><br><span class="line"><span class="built_in">console</span>.log(girl.#age) <span class="comment">// 报错</span></span><br><span class="line"><span class="built_in">console</span>.log(girl.#weight)            </span><br></pre></td></tr></table></figure><p><strong>Promise.allSettled</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码写两个 Promise对象</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(()=&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(()=&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 allSettled 方法</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="built_in">Promise</span>.allSettled([p1,p2]) <span class="comment">// result结果一直成功了，会记录p1 p2的状态，且把它们的值保存</span></span><br><span class="line">                                           <span class="comment">//在一个数组里面</span></span><br><span class="line"><span class="comment">// 调用 all 方法</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="built_in">Promise</span>.all([p1,p2]) <span class="comment">// 当Promise对象存在一个返回错误，那么res就是错误的</span></span><br></pre></td></tr></table></figure><p><strong>可选链操作符：?.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//const dbHost = config.db.host // 这样直接获取可能报错，因此没用判断是否传入</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> dbHost = config?.db?.host <span class="comment">//如果有config 读取db，如果有db 读取 host</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(dbHost) <span class="comment">// 如果没有传入值，那么dbHost 就是 undefined值</span></span><br><span class="line">&#125;</span><br><span class="line">main(&#123;</span><br><span class="line">  <span class="attr">db</span>:&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;192.168.1.100&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">cache</span>:&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;192.168.1.200&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="动态加载-import"><a href="#动态加载-import" class="headerlink" title="动态加载 import"></a>动态加载 import</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 动态使用hello.js，懒加载的方式</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;./hello.js&#x27;</span>).then(<span class="function"><span class="params">module</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">module</span>.hello()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新数据类型-BigInt"><a href="#新数据类型-BigInt" class="headerlink" title="新数据类型 BigInt"></a>新数据类型 BigInt</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大整形</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">521n</span> <span class="comment">//在普通整形后面加 n</span></span><br><span class="line"><span class="built_in">console</span>.log(n,<span class="keyword">typeof</span>(n)) <span class="comment">//logs 521n &#x27;bigint&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">BigInt</span>(n)) <span class="comment">// 将普通整形转化成大整形</span></span><br></pre></td></tr></table></figure><p><strong>应用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大数值运算</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="built_in">Number</span>.MAX_SAFE_INTEGER</span><br><span class="line"><span class="built_in">console</span>.log(max)</span><br><span class="line"><span class="built_in">console</span>.log(max+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(max+<span class="number">2</span>) <span class="comment">// 无法再继续加，达到最大值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 BigInt 去转化</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">BigInt</span>(max))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">BigInt</span>(max) + BigIng(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">BigInt</span>(max) + BigIng(<span class="number">2</span>)) <span class="comment">// 相加的数值类型也必须是 bigint</span></span><br><span class="line"><span class="comment">// 现在相加，就可以正常显示值了</span></span><br></pre></td></tr></table></figure><h3 id="globalThis-始终指向全局-this"><a href="#globalThis-始终指向全局-this" class="headerlink" title="globalThis 始终指向全局 this"></a>globalThis 始终指向全局 this</h3>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> JS </category>
          
          <category> ES7-ES11 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES7-ES11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 新特新</title>
      <link href="2021/07/22/ES6/"/>
      <url>2021/07/22/ES6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="let-关键字"><a href="#let-关键字" class="headerlink" title="let 关键字"></a>let 关键字</h2><p><strong>变量声明</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">let</span> b,c,d;</span><br><span class="line"><span class="keyword">let</span> e =<span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="number">521</span>, g = <span class="string">&#x27;iloveyou&#x27;</span>,h=[];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量不能重复声明</span></span><br><span class="line"><span class="keyword">let</span> star = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> star = <span class="string">&#x27;321&#x27;</span> <span class="comment">//logs error</span></span><br></pre></td></tr></table></figure><p><strong>块级作用域</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> star = <span class="string">&#x27;simple&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(star); <span class="comment">//logs 未定义，不能获取到</span></span><br></pre></td></tr></table></figure><p><strong>不存在变量提升</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(star) <span class="comment">//logs undefined</span></span><br><span class="line"><span class="keyword">var</span> star = <span class="string">&#x27;simple&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用let</span></span><br><span class="line"><span class="built_in">console</span>.log(star) <span class="comment">//logs 会直接报错，不运行提前使用变量</span></span><br><span class="line"><span class="keyword">let</span> star = <span class="string">&#x27;simple&#x27;</span> </span><br></pre></td></tr></table></figure><h2 id="const-关键字"><a href="#const-关键字" class="headerlink" title="const 关键字"></a>const 关键字</h2><p><cst>const 定义常量</cst></p><p><strong>注意事项</strong></p><ol><li><p>一定要赋初始值</p></li><li><p>一般常量使用大写(潜规则)</p></li><li><p>常量的值不能修改</p></li><li><p>有块级作用域</p></li><li><p>对于数组和对象的元素修改，不算做对常量的修改，不会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TEAM = [<span class="string">&#x27;UZI&#x27;</span>,<span class="string">&#x27;MXLG&#x27;</span>]</span><br><span class="line">TEAM.push(<span class="string">&#x27;Kobe&#x27;</span>) <span class="comment">// 允许这样修改，因为常量的地址没有变化</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><blockquote><p>ES6 允许按照一定模式从数组和对象中提取值，对变量进行赋值，这被称为解构赋值</p></blockquote><p><strong>数组解构</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> F4 = [<span class="string">&#x27;科比&#x27;</span>,<span class="string">&#x27;姚明&#x27;</span>,<span class="string">&#x27;奥尼尔&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> [f1,f2,f3] = F4</span><br></pre></td></tr></table></figure><p><strong>对象的解构</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;SimpleLife&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">1.88</span>,</span><br><span class="line">  <span class="attr">weight</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// logs</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name,age,height&#125; = obj</span><br></pre></td></tr></table></figure><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 引入新的声明字符串的方式 [``]</span></span><br><span class="line"><span class="keyword">let</span> star = <span class="string">`模板字符串`</span></span><br></pre></td></tr></table></figure><ol><li>[``]内容中可以直接出现换行符</li><li>变量拼接</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;&lt;li&gt;</span></span><br><span class="line"><span class="string">           不会报错&lt;/li&gt;&lt;/ul`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> star1 = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> star2 = <span class="string">`<span class="subst">$&#123;star1&#125;</span>前面是123`</span>;</span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 之前声明函数</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重要</strong></p><ol><li>this值是静态的。this 始终指向函数声明时所在作用域下的 this 的值，没有自己的this</li><li>不能作为构造函数实例化对象</li><li>不能使用 <code>arguments</code> 变量</li><li>当形参只有一个的时候，可以简化括号。代码体只有一句，可以省略花括号</li><li>箭头函数不适合与 this 有关的回调，如事件回调，对象的方法</li></ol><h2 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es5 获取实参的方式 arguments</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">data(<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;bbb&#x27;</span>,<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"><span class="comment">// 打印的结果是一个对象，且包含了实参</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//es6 获取实参的方式 rest</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">data</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(args)</span><br><span class="line">&#125;</span><br><span class="line">data(<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;bbb&#x27;</span>,<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"><span class="comment">// 打印是结果是数组，可以利用函数做更多的操作</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210723132023.png"></p><p><strong>注意事项</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多个参数的时候，rest参数放最后面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b,...args</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>(a)</span><br><span class="line">  <span class="built_in">console</span>(b)</span><br><span class="line">  <span class="built_in">console</span>(args)</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"><span class="comment">//logs args数组是后面4个实参</span></span><br></pre></td></tr></table></figure><h2 id="spred扩展运算符-…"><a href="#spred扩展运算符-…" class="headerlink" title="spred扩展运算符 …"></a>spred扩展运算符 …</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;bbb&#x27;</span>,<span class="string">&#x27;ccc&#x27;</span>]</span><br><span class="line"><span class="comment">//通过使用 ... 将数组arr =&gt; &#x27;aaa&#x27;,&#x27;bbb&#x27;,&#x27;ccc&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrobj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">arrobj(arr);<span class="comment">//得到的不是数组</span></span><br><span class="line">arrobj(...arr) <span class="comment">//等同于 arrobj(&#x27;aaa&#x27;,&#x27;bbb&#x27;,&#x27;ccc&#x27;)</span></span><br></pre></td></tr></table></figure><p><strong>应用</strong></p><ol><li><p>合并数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;456&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">&#x27;789&#x27;</span>,<span class="string">&#x27;10&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> arr3 = [...arr1,...arr2];</span><br></pre></td></tr></table></figure></li><li><p>将伪数组转为真正的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>); <span class="comment">//Object</span></span><br><span class="line"><span class="keyword">const</span> divArr = [...divs]; <span class="comment">// array</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><h3 id="Symbol-基本使用"><a href="#Symbol-基本使用" class="headerlink" title="Symbol 基本使用"></a>Symbol 基本使用</h3><blockquote><p>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。它是js 语言的第一种数据类型，是一种类似字符串的数据类型</p></blockquote><p><strong>特点</strong></p><ol><li>Symbol 的值是唯一的，用来解决命名冲突的问题</li><li>不能与其它数据进行运算</li><li>Symbol 定义的对象属性不能使用 for…in 循环遍历，但是可以使用 Reflect.ownKeys 来获取对象的所有键名</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Symbol</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">&#x27;simplelife&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;simplelife&#x27;</span>) <span class="comment">// 因为Symbol在内部实现了唯一性，故s1!=s2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Symbol.for 创建</span></span><br><span class="line"><span class="keyword">let</span> s4 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;simplelife&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> s5 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;simplelife&#x27;</span>) <span class="comment">//用这种方式创建的 s4 == s5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>总结：JS数据类型</strong></p><blockquote><p>USONB: You Are So NiuBility</p></blockquote><ol><li>undefined</li><li>string</li><li>symbol</li><li>object</li><li>null</li><li>number</li><li>boolean</li></ol><p><strong>Symbol 应用</strong></p><ol><li>给对象添加独一无二的属性和方法  </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向对象中添加方法 up down</span></span><br><span class="line"><span class="comment">// 假如对象特别大复杂，你无法知道里面是否有，直接添加可能出问题</span></span><br><span class="line"><span class="keyword">let</span> game =&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个对象</span></span><br><span class="line"><span class="keyword">let</span> methods = &#123;</span><br><span class="line">   <span class="attr">up</span>: <span class="built_in">Symbol</span>(),</span><br><span class="line">   <span class="attr">down</span>: <span class="built_in">Symbol</span>()</span><br><span class="line">&#125;</span><br><span class="line">game[methods.up] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//代码体</span></span><br><span class="line">&#125;</span><br><span class="line">game[methods.down] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//代码体</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二种方式</span></span><br><span class="line"><span class="keyword">let</span> youxi = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;狼人杀&#x27;</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>(<span class="string">&#x27;say&#x27;</span>)]: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 代码体</span></span><br><span class="line">  &#125;,</span><br><span class="line">  [<span class="built_in">Symbol</span>(<span class="string">&#x27;self&#x27;</span>)]: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 代码体</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Symbol-内置值"><a href="#Symbol-内置值" class="headerlink" title="Symbol 内置值"></a>Symbol 内置值</h3><hr><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><blockquote><p>迭代器（iterator）是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 iterator 接口，就可以遍历操作</p></blockquote><ol><li><p>ES6 创造了一种新的遍历命令 for…of 循环，iterator 接口主要提供 for…of 使用</p></li><li><p>原生具备 iterator 接口的数据（可用 for of 遍历）</p><ol><li>Array</li><li>Arguments</li><li>Set</li><li>Map</li><li>String</li><li>TypeArray</li><li>NodeList</li></ol></li><li><p>工作原理</p><ol><li>创建一个指针对象，指向当前数据结构的起始位置</li><li>第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员</li><li>接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员</li><li>每调用 next 方法放回一个包含 value 和 done 属性的对象</li></ol><p><cst>注意：需要自定义遍历数据的时候，要想到迭代器</cst></p></li></ol><p><strong>实例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CLASS = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;终极一班&#x27;</span>,</span><br><span class="line">  <span class="attr">stus</span>:[</span><br><span class="line">    <span class="string">&#x27;小明&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;李华&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]()&#123;</span><br><span class="line">    <span class="comment">// 索引变量</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="built_in">this</span>.stus.length)&#123;</span><br><span class="line">          <span class="keyword">const</span> result = &#123;<span class="attr">value</span>: <span class="built_in">this</span>.stus[index],<span class="attr">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">          index++;</span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="literal">undefined</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历对象</span></span><br><span class="line"><span class="comment">// 打印结果如下图，可以根据自己意愿去打印数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> CLASS) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210723155640.png"></p><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><blockquote><p>生成器是一个特殊的函数， 实现异步编程</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数和普通函数不同，需要用分割符 *</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = fn()</span><br><span class="line">fn();<span class="comment">// 这样执行函数是没有用的</span></span><br><span class="line">fn().next();<span class="comment">// 调用next方法才会执行方法体</span></span><br><span class="line"><span class="comment">// ***************</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">111</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;我是第一步&#x27;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">222</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;我是第二步&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = fn()</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next())</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next())</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210723161501.png"></p><h3 id="生成器函数参数"><a href="#生成器函数参数" class="headerlink" title="生成器函数参数"></a>生成器函数参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">fn</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行获取迭代器对象</span></span><br><span class="line"><span class="keyword">let</span> iterator = fn(<span class="string">&#x27;AAA&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210723162042.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next() 传参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(one)</span><br><span class="line">  <span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="number">222</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(two)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行获取迭代器对象</span></span><br><span class="line"><span class="keyword">let</span> iterator = fn() </span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next(<span class="string">&#x27;BBB&#x27;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210723162302.png"></p><p>在第二次调用 next() 传入参数 ‘BBB’ ，改变了第一次 yield的返回值</p><p><strong>实例：异步编程</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 使用生成器解决回调地狱的问题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">111</span>)</span><br><span class="line">    iterator.next();</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">222</span>)</span><br><span class="line">    iterator.next();</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">333</span>)</span><br><span class="line">    iterator.next();</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 声明生成器函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> one();</span><br><span class="line">  <span class="keyword">yield</span> two();</span><br><span class="line">  <span class="keyword">yield</span> three();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取生成器函数对象</span></span><br><span class="line"><span class="keyword">let</span> iterator = fn()</span><br><span class="line">iterator.next();</span><br></pre></td></tr></table></figure><p><strong>实例：模拟获取 用户数据 订单数据 商品数据 有先后顺序</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUsers</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;用户数据&#x27;</span></span><br><span class="line">    <span class="comment">// 调用next方法，并将数据传入</span></span><br><span class="line">    iterator.next(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOrders</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;订单数据&#x27;</span></span><br><span class="line">    iterator.next(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGoods</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;商品数据&#x27;</span></span><br><span class="line">    iterator.next(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> users = <span class="keyword">yield</span> getUsers();</span><br><span class="line">  <span class="built_in">console</span>.log(users)</span><br><span class="line">  <span class="keyword">let</span> orders = <span class="keyword">yield</span> getOrders();</span><br><span class="line">  <span class="built_in">console</span>.log(orders)</span><br><span class="line">  <span class="keyword">let</span> goods = <span class="keyword">yield</span> getGoods()</span><br><span class="line">  <span class="built_in">console</span>.log(goods)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用生成器</span></span><br><span class="line"><span class="keyword">let</span> iterator = gen()</span><br><span class="line">iteratro.next()</span><br></pre></td></tr></table></figure><p>第一次调用了 next() 方法 执行生成器第一段 yield后面的 getUser() 方法。该方法执行的第二次 <code>iteratro.next(data)</code> 并传了data数据，该data数据会改变第一段yield后面值。</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><blockquote><p>Promise 是 ES6 引入的异步编程的新解决方案。语法上 Promise 是一个构造函数，用来封装异步操作并可以获取其成功后失败的结果</p></blockquote><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>ES6 提供了新的数据结构 Set（集合）。它类似于数组，但成员的值都是唯一的，集合实现了 iterator 接口，所以可以使用 扩展运算符 和 for…of 进行遍历</p><p><strong>集合的属性和方法</strong></p><ol><li>size 返回集合的元素个数</li><li>add 增加一个新元素，返回当前集合</li><li>delete 删除元素，返回 boolean 值</li><li>has 检查集合中是否包含某一个元素，返回 boolean 值</li><li>clear 清空数组 <code>let s = new Set(arr);  s.clear()</code></li></ol><p><strong>注意</strong></p><ol><li><code>let s = new Set(arr)</code> 传入数组，有去重复性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line">lert news = [...s] <span class="comment">// 这样获取的就是一个数组</span></span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合。但是 “键” 的范围不限于字符串，各种类型的值（包括对象）都可以当作键。Map 也实现了 iterator 接口，所以可以使用 扩展运算符 和 for … of 进行遍历</p><p><strong>Map 的属性和方法</strong></p><ol><li>size 返回 Map 的元素个数</li><li>set 增加一个新元素，返回当前 Map</li><li>delete 删除元素</li><li>get 返回键名对象的键值</li><li>has 检测 Map 中是否包含某一个元素，返回 boolean 值</li><li>clear 清空集合，返回 undefined</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">m.set(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;SimpleLife&#x27;</span>)</span><br><span class="line">m.set(<span class="string">&#x27;change&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;SimpleLife&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h2><p>ES6 提供了更接近传统语言的写法，引入了 Class(类) 这个概念，作为对象的模板。通过 class 关键字，可以定义类。基本上，ES6 的class可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已</p><p><strong>实例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 构造函数写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Phone</span>(<span class="params">brand,price</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.brand = brand;</span><br><span class="line">  <span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加方法</span></span><br><span class="line">Phone.prototype.call = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我可以打电话&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">let</span> Huawei = <span class="keyword">new</span> Phone(<span class="string">&#x27;华为&#x27;</span>,<span class="number">5999</span>)</span><br><span class="line">Huawei.call()</span><br><span class="line"><span class="built_in">console</span>.log(Huawei)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 class 写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">  <span class="comment">// 构造方法 名字不能修改</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">brand,price</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.brand = brand</span><br><span class="line">    <span class="built_in">this</span>.price = price</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ES6 class 不能写es5 声明函数的语法</span></span><br><span class="line">  <span class="function"><span class="title">call</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我可以打电话&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Huawei = <span class="keyword">new</span> Phone(<span class="string">&#x27;华为&#x27;</span>,<span class="number">5999</span>)</span><br><span class="line"><span class="built_in">console</span>.log(Huawei)</span><br></pre></td></tr></table></figure><p><strong>静态成员：不属于实例化对象的</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 声明的静态属性方法，属于函数的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Phone</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Phone.name = <span class="string">&#x27;手机&#x27;</span></span><br><span class="line">Phone.change = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;静态成员&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属于实例化对象的</span></span><br><span class="line">Phone.prototype.name = <span class="string">&#x27;手机&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5 声明的静态属性方法，. 属于calss类的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> name = <span class="string">&#x27;手机&#x27;</span>;</span><br><span class="line"><span class="keyword">static</span> change =  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;静态成员&#x27;</span>)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Phone</span>(<span class="params">brand,price</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.brand = brand;</span><br><span class="line">  <span class="built_in">this</span>.price = price</span><br><span class="line">&#125;</span><br><span class="line">Phone.prototype.call = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我可以打电话&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 智能手机</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SmartPhone</span>(<span class="params">brand,price,color,size</span>)</span>&#123;</span><br><span class="line">  Phone.call(<span class="built_in">this</span>,brand,price)</span><br><span class="line">  <span class="built_in">this</span>.color= color</span><br><span class="line">  <span class="built_in">this</span>.size = size</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置子级构造函数的原型</span></span><br><span class="line">SmartPhone.prototype = <span class="keyword">new</span> Phone</span><br><span class="line">SmartPhone.prototype.constructor = SmartPhone <span class="comment">// 矫正</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明之类</span></span><br><span class="line">SmartPhone.prototype.photo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我可以拍照&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">SmartPhone.prototype.playGame = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我可以玩游戏&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> huawei = <span class="keyword">new</span> SmartPhone(<span class="string">&#x27;华为&#x27;</span>,<span class="string">&#x27;2200&#x27;</span>,<span class="string">&#x27;银色&#x27;</span>,<span class="string">&#x27;5.5inch&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(huawei)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210724140337.png"></p><h3 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">brand,price</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    <span class="built_in">this</span>.price = price;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 父类成员属性</span></span><br><span class="line">  <span class="function"><span class="title">call</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我可以打电话&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过关键字 extends 去继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">brand,price,color,size</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 使用super 你调父类构造函数</span></span><br><span class="line">    <span class="built_in">super</span>(brand,price);</span><br><span class="line">    <span class="built_in">this</span>.color = color;</span><br><span class="line">    <span class="built_in">this</span>.size = size;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">photo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;拍照&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">playGame</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;打游戏&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xiaom = <span class="keyword">new</span> SmartPhone(<span class="string">&#x27;小米&#x27;</span>,<span class="number">799</span>,<span class="string">&#x27;黑色&#x27;</span>,<span class="string">&#x27;4.7inch&#x27;</span>)</span><br><span class="line">xiaom.call()</span><br><span class="line">xiaom.photo()</span><br><span class="line">xiaom.playGame()</span><br></pre></td></tr></table></figure><h3 id="子类对父类方法重写"><a href="#子类对父类方法重写" class="headerlink" title="子类对父类方法重写"></a>子类对父类方法重写</h3><blockquote><p>在子类声明方法的时候，可以写同名父类方法，进行覆盖。当调用的时候，就是调用子类的方法</p></blockquote><h3 id="Set-和-Get"><a href="#Set-和-Get" class="headerlink" title="Set 和 Get"></a>Set 和 Get</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在class内部设置 get 和 set</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">price</span>()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;价格属性被读取了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;simplelife&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">set</span> <span class="title">price</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="comment">// set修改属性，且必须传值 value</span></span><br><span class="line">   <span class="comment">// ……</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Phone();</span><br><span class="line"><span class="built_in">console</span>.log(s.price) <span class="comment">//logs 运行代码体，且打印return 值</span></span><br><span class="line">s.price = <span class="string">&#x27;free&#x27;</span> <span class="comment">//运行set</span></span><br></pre></td></tr></table></figure><h2 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h2><h3 id="EPSILON"><a href="#EPSILON" class="headerlink" title="EPSILON"></a>EPSILON</h3><blockquote><p><code>Number.EPSILON</code> 是 Javascript 表示最小精度，值接近于 2.22044604925031308084726333E-16</p></blockquote><ol><li>判断相等 当两数差的绝对值小于 EPSILON 表示相等</li></ol><h3 id="二进制和八进制"><a href="#二进制和八进制" class="headerlink" title="二进制和八进制"></a>二进制和八进制</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">0b1010</span> <span class="comment">// 表示二进制1010</span></span><br><span class="line"><span class="keyword">let</span> o = <span class="number">0o777</span>  <span class="comment">// 表示八进制777</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0xff</span>   <span class="comment">// 表示十六进制</span></span><br></pre></td></tr></table></figure><h3 id="Number-API"><a href="#Number-API" class="headerlink" title="Number API"></a>Number API</h3><ul><li><code>Number.isFinite</code> 检测一个数值是否为有限数</li><li><code>Number.isNaN</code> 检测一个数值是否为 NaN</li><li><code>Number.parseInt Number.parseFloat</code> 字符串转整数</li><li><code>Number.isInteger</code> 判断一个数是否为整数</li><li><code>Math.trunc</code> 将数字的小数部分抹掉</li><li><code>Math.sign</code> 判断一个数到底为正数 负数 零</li></ul><h2 id="对象方法扩展"><a href="#对象方法扩展" class="headerlink" title="对象方法扩展"></a>对象方法扩展</h2><p><strong>Object.is 判断两个值是否完全相等</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">150</span>,<span class="number">150</span>)) ;<span class="comment">// ===</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>,Nan)) ;<span class="comment">// logs true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>) <span class="comment">// false, NaN 与任何值都不相等</span></span><br></pre></td></tr></table></figure><p><strong>Object.assign 对象的合并</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config1 = &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> config2 = &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sum = <span class="built_in">Object</span>.assign(config1,config2) <span class="comment">// config2 与 config1 键名重复的，会有后面的config2覆盖</span></span><br></pre></td></tr></table></figure><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><blockquote><p>模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来</p></blockquote><p>**模块化的好处 **</p><ol><li>防止命名冲突</li><li>代码复用</li><li>高维护性</li></ol><p><strong>模块化规范</strong></p><p>ES6之前的模块化规范有</p><ol><li><code>CommonJS</code> =&gt; NodeJS、Browserify</li><li><code>AMD</code> =&gt; requireJS</li><li><code>CMD</code> =&gt; seaJS</li></ol><p><strong>ES6 模块化语法</strong></p><p>模块功能主要由两个命令构成：export 和 import</p><ul><li>export 命令用于规范模块的对外接口</li><li>import 命令用于输入其它模块提供的功能</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// foo.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> BLOG = <span class="string">&#x27;SimpleLife&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(BLOG)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// html引入</span></span><br><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line">  <span class="keyword">import</span> * <span class="keyword">as</span> f <span class="keyword">from</span> <span class="string">&quot;./foo.js&quot;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>完全暴露语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;BLOG,teach&#125;</span><br></pre></td></tr></table></figure><p><strong>默认暴露</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> BLOG = <span class="string">&#x27;SimpleLife&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>导入方式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用型</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> f <span class="keyword">from</span> <span class="string">&quot;./foo.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值形式</span></span><br><span class="line"><span class="keyword">import</span> &#123;BLOG,teach&#125; <span class="keyword">from</span> <span class="string">&quot;./foo.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认导出是形式，导入</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> sm&#125; <span class="keyword">from</span> <span class="string">&quot;./foo.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简便形式，只能用于默认导出</span></span><br><span class="line"><span class="keyword">import</span> sm <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="babel-对-ES6-模块化代码转换"><a href="#babel-对-ES6-模块化代码转换" class="headerlink" title="babel 对 ES6 模块化代码转换"></a>babel 对 ES6 模块化代码转换</h3><p>使用 babel对项目进行打包，转换成ES5语法，使得浏览器兼容</p>  <a class="btn-beautify button--animated block outline blue larger right" href="https://www.babeljs.cn/"   title="Babel中文文档"><i class="far fa-hand-point-right"></i><span>Babel中文文档</span></a>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> JS </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Element Ui</title>
      <link href="2021/07/18/Element_Ui/"/>
      <url>2021/07/18/Element_Ui/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Ui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Element_Ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端技术栈</title>
      <link href="2021/07/18/Technology_Stack/"/>
      <url>2021/07/18/Technology_Stack/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="sl-stack page-header">  <div class="sl-check">       <div>       <span class="icon-box-isActive iconfont icon-box"></span>    </div>     <div class="sl-title-common sl-title-text-isActive">HTML5</div>  </div>  <div><a class="btn-beautify button--animated outline red larger" href="/2021/07/06/HTML5/"   title="HTML5 笔记"><i class="far fa-hand-point-right"></i><span>HTML5 笔记</span></a>   <a class="btn-beautify button--animated outline blue larger" href="https://www.runoob.com/html/html5-intro.html"   title="HTML5 文档"><i class="far fa-hand-point-right"></i><span>HTML5 文档</span></a>  </div></div><div class="sl-stack page-header">  <div class="sl-check">       <div>       <span class="icon-box-isActive iconfont icon-box"></span>    </div>     <div class="sl-title-common sl-title-text-isActive">CSS3</div>  </div>  <div>    <a class="btn-beautify button--animated outline red larger" href="/2021/07/07/CSS3/"   title="CSS3 笔记"><i class="far fa-hand-point-right"></i><span>CSS3 笔记</span></a>   <a class="btn-beautify button--animated outline blue larger" href="https://www.runoob.com/css3/css3-tutorial.html"   title="CSS3 文档"><i class="far fa-hand-point-right"></i><span>CSS3 文档</span></a>  </div></div><div class="sl-stack page-header">  <div class="sl-check">       <div>       <span class="icon-box-isActive iconfont icon-box"></span>    </div>     <div class="sl-title-common sl-title-text-isActive">JavaScript</div>  </div>  <div>   <a class="btn-beautify button--animated outline blue larger" href="https://www.runoob.com/js/js-tutorial.html"   title="JS 菜鸟文档"><i class="far fa-hand-point-right"></i><span>JS 菜鸟文档</span></a>    <a class="btn-beautify button--animated outline blue larger" href="https://www.w3school.com.cn/js/index.asp"   title="JS W3school文档"><i class="far fa-hand-point-right"></i><span>JS W3school文档</span></a>  </div></div><div class="sl-stack page-header">  <div class="sl-check">       <div>       <span class="icon-box-isActive iconfont icon-box"></span>    </div>     <div class="sl-title-common sl-title-text-isActive">Bootstrap</div>  </div>  <div>    <a class="btn-beautify button--animated outline red larger" href="/2021/05/19/Bootstrap1/"   title="BS 笔记"><i class="far fa-hand-point-right"></i><span>BS 笔记</span></a>   <a class="btn-beautify button--animated outline blue larger" href="https://www.bootcss.com/"   title="BS 官方文档"><i class="far fa-hand-point-right"></i><span>BS 官方文档</span></a>  </div></div><div class="sl-stack page-header">  <div class="sl-check">       <div>       <span class="icon-box-isActive iconfont icon-box"></span>    </div>     <div class="sl-title-common sl-title-text-isActive">Vue</div>  </div>  <div>   <a class="btn-beautify button--animated outline blue larger" href="https://cn.vuejs.org/"   title="Vue2.0 官方文档"><i class="far fa-hand-point-right"></i><span>Vue2.0 官方文档</span></a>   <a class="btn-beautify button--animated outline blue larger" href="https://v3.cn.vuejs.org/"   title="Vue3.0 官方文档"><i class="far fa-hand-point-right"></i><span>Vue3.0 官方文档</span></a>   <a class="btn-beautify button--animated outline blue larger" href="https://www.bilibili.com/video/BV15741177Eh?p=159&spm_id_from=pageDriver"   title="B站学习视频"><i class="far fa-hand-point-right"></i><span>B站学习视频</span></a>  </div></div><div class="sl-stack page-header">  <div class="sl-check">       <div>       <span class="iconfont icon-box"></span>    </div>     <div class="sl-title-common">Webpack</div>  </div>  <div>   <a class="btn-beautify button--animated outline larger" href="https://www.webpackjs.com/"   title="Webpack 官方文档"><i class="far fa-hand-point-right"></i><span>Webpack 官方文档</span></a>  </div></div><div class="sl-stack page-header">  <div class="sl-check">       <div>       <span class="iconfont icon-box"></span>    </div>     <div class="sl-title-common">Element Ui</div>  </div>  <div>   <a class="btn-beautify button--animated outline larger" href="https://element.eleme.cn/#/zh-CN"   title="Element Ui Vue2.x"><i class="far fa-hand-point-right"></i><span>Element Ui Vue2.x</span></a>  </div></div><div class="sl-stack page-header">  <div class="sl-check">       <div>       <span class="icon-box-isActive iconfont icon-box"></span>    </div>     <div class="sl-title-common sl-title-text-isActive">JS ES6</div>  </div>  <div>    <a class="btn-beautify button--animated outline red larger" href="/2021/07/22/ES6/"   title="ES6 笔记"><i class="far fa-hand-point-right"></i><span>ES6 笔记</span></a>   <a class="btn-beautify button--animated outline blue larger" href="https://www.bilibili.com/video/BV1uK411H7on?p=1"   title="B站尚硅谷"><i class="far fa-hand-point-right"></i><span>B站尚硅谷</span></a>  </div></div><div class="sl-stack page-header">  <div class="sl-check">       <div>       <span class=" iconfont icon-box"></span>    </div>     <div class="sl-title-common">Node.js</div>  </div>  <div>   <a class="btn-beautify button--animated outline larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>  </div></div><div class="sl-stack page-header">  <div class="sl-check">       <div>       <span class=" iconfont icon-box"></span>    </div>     <div class="sl-title-common">Vite</div>  </div>  <div>   <a class="btn-beautify button--animated outline larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>  </div></div><div class="sl-stack page-header">  <div class="sl-check">       <div>       <span class=" iconfont icon-box"></span>    </div>     <div class="sl-title-common">Uniapp</div>  </div>  <div>   <a class="btn-beautify button--animated outline larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>  </div></div><div class="sl-stack page-header">  <div class="sl-check">       <div>       <span class="icon-box-isActive iconfont icon-box"></span>    </div>     <div class="sl-title-common sl-title-text-isActive">Mina微信小程序</div>  </div>  <div>   <a class="btn-beautify button--animated outline blue larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>  </div></div><div class="sl-stack page-header">  <div class="sl-check">       <div>       <span class="iconfont icon-box"></span>    </div>     <div class="sl-title-common ">TypeScript</div>  </div>  <div>   <a class="btn-beautify button--animated outline larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>  </div></div>]]></content>
      
      
      <categories>
          
          <category> 目录 </category>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Vue </tag>
            
            <tag> JS </tag>
            
            <tag> HTML5 </tag>
            
            <tag> CSS3 </tag>
            
            <tag> Boostrap </tag>
            
            <tag> Webpack </tag>
            
            <tag> wechat小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决请求数据跨域问题</title>
      <link href="2021/07/15/Question3/"/>
      <url>2021/07/15/Question3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210714214005.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 axios框架请求数据</span></span><br><span class="line">axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://139.198.169.201/json/index.json&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">&#125;).then()</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p>不同的网站环境可能解决方案不同</p></blockquote><h3 id="Phpstudy环境"><a href="#Phpstudy环境" class="headerlink" title="Phpstudy环境"></a>Phpstudy环境</h3><p><strong>phpstudy中apache设置跨域(头部请求模块开启)</strong></p><p>进入phpstudy配置文件夹 <code>C:\phpstudy_pro\Extensions\Apache2.4.39\conf</code> 双击 <code>httpd.conf</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在文件里面添加这一行，对所有域名开放</span><br><span class="line">Header set Access-Control-Allow-Origin *</span><br><span class="line"></span><br><span class="line"># 指定域名开放</span><br><span class="line">Header set Access-Control-Allow-Origin http://www.***.com</span><br></pre></td></tr></table></figure><p>使用 <code>ctrl + F</code> 查询如下内容，取消注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 将 &#x27;#&#x27; 注释取消掉</span><br><span class="line">#LoadModule headers_module modules/mod_headers.so</span><br><span class="line"></span><br><span class="line">#||</span><br><span class="line"></span><br><span class="line">LoadModule headers_module modules/mod_headers.so</span><br></pre></td></tr></table></figure><p>重启 Apache </p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210715201041.png"></p><p>现在能正常请求到数据了</p>]]></content>
      
      
      <categories>
          
          <category> Question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Question </tag>
            
            <tag> 跨域问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios框架</title>
      <link href="2021/07/14/Axios/"/>
      <url>2021/07/14/Axios/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>首先需要知道：axios不是一种新的技术。</p><p>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，本质上也是对原生XHR的封装，只不过它是Promise的实现版本，符合最新的ES规范，有以下特点：</p><ul><li>从浏览器中创建 XMLHttpRequests</li><li>从 node.js 创建 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 XSRF</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>npm 安装</strong></p><p><code>$ npm install axios</code></p><p><strong>bower 安装</strong></p><p><code>$ bower install axios</code></p><p><strong>使用 CDN</strong></p><p><code>&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</code></p><h2 id="axios-基本使用"><a href="#axios-基本使用" class="headerlink" title="axios 基本使用"></a>axios 基本使用</h2><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://139.198.169.201/json/index.json&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;请求失败&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认是get接收</span></span><br><span class="line"><span class="comment">// 直接确认接收类型</span></span><br><span class="line">axios.get()</span><br><span class="line"></span><br><span class="line">axios.post()</span><br></pre></td></tr></table></figure><h3 id="H3-axios请求方法"><a href="#H3-axios请求方法" class="headerlink" title="H3 axios请求方法"></a><cst>H3</cst> axios请求方法</h3><ul><li><code>axios(config)</code></li><li><code>axios.request(config)</code></li><li><code>axios.get(url[,config])</code></li><li><code>axios.post(url[,config])</code></li><li><code>axios.delete(url[,config])</code></li><li><code>axios.head(url[,config])</code></li><li><code>axios.put(url[,data[,config]])</code></li><li><code>axios.patch(url[,data[,config]])</code></li></ul><h3 id="H3-axios发生并发请求"><a href="#H3-axios发生并发请求" class="headerlink" title="H3 axios发生并发请求"></a><cst>H3</cst> axios发生并发请求</h3><p>使用 <code>axios.all</code> 可以放入多个请求的数组</p><p><code>axios.all([])</code> 返回结果是一个数组，使用 <code>axios.spread</code> 可将数组 [res1,res2] 展开为 res1，res2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">axios.all([axios(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span></span><br><span class="line">&#125;),axios(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;sell&#x27;</span>,</span><br><span class="line">    <span class="attr">page</span>: <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)])</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用axios.spread 展开写法</span></span><br><span class="line">.then(axios.spread(<span class="function">(<span class="params">res1, res2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res1);</span><br><span class="line">    <span class="built_in">console</span>.log(res2);</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试后跟数据解构效果一样</span></span><br><span class="line">&#125;)])</span><br><span class="line">.then(<span class="function">(<span class="params">[res1, res2]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res1);</span><br><span class="line">    <span class="built_in">console</span>.log(res2);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><p>在全局设置默认配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL = <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span></span><br><span class="line">axios.defaults.timeout = <span class="number">5000</span></span><br><span class="line">axios.get(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/home/data&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123; <span class="comment">//参数</span></span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;sell&#x27;</span>,</span><br><span class="line">    <span class="attr">page</span>: <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Axios-实例"><a href="#Axios-实例" class="headerlink" title="Axios 实例"></a>Axios 实例</h2><p>创建 axios 实例来应变不同的服务器请求数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance1 = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line">instance1(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;/home/multdata&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Axios-封装"><a href="#Axios-封装" class="headerlink" title="Axios 封装"></a>Axios 封装</h2><p>为了让代码更具时代性，不要直接在组件中引用，而是创建一个文件夹去引用文件</p><p><code>src/netWork/request.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*第一种写法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 传递三个参数,success,failure 是函数，用来获取信息的回应</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config, success, failure</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建实例</span></span><br><span class="line">    <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">        <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 发送真正的网络请求</span></span><br><span class="line">    instance(config)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            success(res)</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            failure(err)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*第二种写法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建实例</span></span><br><span class="line">    <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">        <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送真正的网络请求</span></span><br><span class="line">    instance(config.baseConfig)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            config.success(res)</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            config.failure(err)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 第三种，使用Promise</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 创建实例</span></span><br><span class="line">        <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">                <span class="attr">baseURL</span>: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">                <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 发送真正的网络请求</span></span><br><span class="line">        instance(config)</span><br><span class="line">            .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 第三种，使用Promise改进版</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建实例</span></span><br><span class="line">    <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">            <span class="attr">baseURL</span>: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">            <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 发送真正的网络请求</span></span><br><span class="line">        <span class="comment">// create本身返回的就是promise</span></span><br><span class="line">    <span class="keyword">return</span> instance(config)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js 引用</span></span><br><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;@/netWork/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种引用方式</span></span><br><span class="line">request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/home/multidata&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">&#125;, <span class="function"><span class="params">res</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(res)&#125;</span><br><span class="line"> , <span class="function"><span class="params">err</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(err)&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种引用方式</span></span><br><span class="line">request(&#123;</span><br><span class="line">    <span class="attr">baseConfig</span>: &#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/home/multidata&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">failure</span>: <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种引用方式</span></span><br><span class="line">request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/home/multidata&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Axios-拦截器的使用"><a href="#Axios-拦截器的使用" class="headerlink" title="Axios 拦截器的使用"></a>Axios 拦截器的使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">            <span class="attr">baseURL</span>: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">            <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">        &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// axios拦截器 还可以全局拦截</span></span><br><span class="line">   instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// 请求成功</span></span><br><span class="line">    &#125;,<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// 请求失败</span></span><br><span class="line">    &#125;) </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> instance(config)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 Promise</title>
      <link href="2021/07/13/Es6_Promise/"/>
      <url>2021/07/13/Es6_Promise/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是-Promise-呢？"><a href="#什么是-Promise-呢？" class="headerlink" title="什么是 Promise 呢？"></a>什么是 Promise 呢？</h2><p>ES6中一个非常重要和好用的特性就是 Promise</p><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>Promise 是异步编程的一种解决方案</p></div><p><br><br><strong>处理异步</strong></p><p>在封装一个网络请求的函数，如果网络请求非常复杂，就会出现回调地狱</p><p><strong>示例</strong></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210713140213.png"></p><p>上面的代码，可以正常运行并且获取我们想要的结果，但是当每次处理传递的数据进行几百行代码，然后再进行回调。代码丑陋且不易维护。使用Promise可以优雅的解决这个问题</p><p><strong>使用Promise写一个简单的示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    resolve(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">    reject(<span class="string">&#x27;Error Data&#x27;</span>)</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种写法</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    resolve(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">    reject(<span class="string">&#x27;Error Data&#x27;</span>)</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    resolve(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">    reject(<span class="string">&#x27;Error Data&#x27;</span>)</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(date)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    resolve(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">    reject(<span class="string">&#x27;Error Data&#x27;</span>)</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;).then()</span><br></pre></td></tr></table></figure><h2 id="Promise-三种状态"><a href="#Promise-三种状态" class="headerlink" title="Promise 三种状态"></a>Promise 三种状态</h2><ol><li><code>pending</code> 等待状态，比如正在进行网络请求，或者定时器没有到时间</li><li><code>fulfill</code> 满足状态，当我们主动回调了 <code>resolve</code> ，就处于该状态，并且会回调<code>.then()</code></li><li><code>reject</code> 拒绝状态，当我们主动回调了 <code>reject</code>，就处于该状态，并且会回调<code>.catch()</code></li></ol><h2 id="Promise-链式调用"><a href="#Promise-链式调用" class="headerlink" title="Promise 链式调用"></a>Promise 链式调用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 第一次网络请求</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span>&#123;</span><br><span class="line">    resolve()</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 第一次拿到结果的处理代码</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;第一次&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 第二次网络请求</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 第二次拿到结果</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;第二次&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 第三次网络请求</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 第三次拿到结果</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;第三次&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210713144002.png"></p><p><strong>链式调用的另一种写法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 网络请求：aaa -&gt; 自己处理（10）行</span></span><br><span class="line"><span class="comment">// 处理：aaa111 -&gt; 自己处理（10）行</span></span><br><span class="line"><span class="comment">// 处理：aaa111222 -&gt; 自己处理（10）行</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">resolve(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 1.自己处理10行代码</span></span><br><span class="line">  <span class="built_in">console</span>.log(res,<span class="string">&#x27;第一层的10行处理代码&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2.对结果进行第一次处理</span></span><br><span class="line">  <span class="comment">// reject参数是可选的，后面均可不写</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">    resolve(res + <span class="string">&#x27;111&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 1.自己处理10行代码</span></span><br><span class="line">  <span class="built_in">console</span>.log(res,<span class="string">&#x27;第二层的10行处理代码&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2.对结果进行第二次处理</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">    resolve(res + <span class="string">&#x27;222&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res,<span class="string">&#x27;第三层的10行处理代码&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>简写</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">resolve(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 1.自己处理10行代码</span></span><br><span class="line">  <span class="built_in">console</span>.log(res,<span class="string">&#x27;第一层的10行处理代码&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2.对结果进行第一次处理</span></span><br><span class="line">  <span class="comment">// reject参数是可选的，后面均可不写</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res + <span class="string">&#x27;111&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 1.自己处理10行代码</span></span><br><span class="line">  <span class="built_in">console</span>.log(res,<span class="string">&#x27;第二层的10行处理代码&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2.对结果进行第二次处理</span></span><br><span class="line">  <span class="keyword">return</span>  <span class="built_in">Promise</span>.resolve(res + <span class="string">&#x27;222&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res,<span class="string">&#x27;第三层的10行处理代码&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>再次简写</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略Promise.resolve，内部会使用promise包装</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">resolve(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 1.自己处理10行代码</span></span><br><span class="line">  <span class="built_in">console</span>.log(res,<span class="string">&#x27;第一层的10行处理代码&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2.对结果进行第一次处理</span></span><br><span class="line">  <span class="comment">// reject参数是可选的，后面均可不写</span></span><br><span class="line">  <span class="keyword">return</span> res + <span class="string">&#x27;111&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 1.自己处理10行代码</span></span><br><span class="line">  <span class="built_in">console</span>.log(res,<span class="string">&#x27;第二层的10行处理代码&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2.对结果进行第二次处理</span></span><br><span class="line">  <span class="keyword">return</span>  res + <span class="string">&#x27;222&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res,<span class="string">&#x27;第三层的10行处理代码&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>某层调用了reject</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">&#x27;error message&#x27;</span>)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 直接执行catch操作，后面的then是跳过</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>抛出异常</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="string">&#x27;error message&#x27;</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 仍然可以捕获到异常</span></span><br></pre></td></tr></table></figure><h2 id="Promise的all方法使用"><a href="#Promise的all方法使用" class="headerlink" title="Promise的all方法使用"></a>Promise的all方法使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      <span class="attr">url</span>:<span class="string">&#x27;url1&#x27;</span>，</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">      resolve(data)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">   $.ajax(&#123;</span><br><span class="line">      <span class="attr">url</span>:<span class="string">&#x27;url2&#x27;</span>，</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">      resolve(data)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">]).then(<span class="function"><span class="params">results</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// results是数组，用于存放上面两个网络请求的结果，results[0]是第一个</span></span><br><span class="line">  <span class="built_in">console</span>.log(results)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> JS </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex</title>
      <link href="2021/07/13/Vuex/"/>
      <url>2021/07/13/Vuex/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><blockquote><p>官方解释：Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式</p></blockquote><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 <a href="https://github.com/vuejs/vue-devtools">devtools extension (opens new window)</a>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p><p>每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的**状态 (state)**。Vuex 和单纯的全局对象有以下两点不同：</p><ol><li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li><li>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地<strong>提交 (commit) mutation</strong>。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li></ol><a class="btn-beautify button--animated block larger right blue" href="https://vuex.vuejs.org/zh/guide/getters.html/"   title="Vuex官方文档"><i class="far fa-hand-point-right"></i><span>Vuex官方文档</span></a><hr><h2 id="安装Vuex"><a href="#安装Vuex" class="headerlink" title="安装Vuex"></a>安装Vuex</h2><p><code>npm install vuex --save</code></p><p>在 <code>./src/store</code> 文件夹下创建 <code>index.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">       <span class="comment">// 用于存放共享数据</span></span><br><span class="line">        <span class="attr">counter</span>: <span class="number">1024</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;&#125;, <span class="comment">//常用的</span></span><br><span class="line">    <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store独享</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p><strong>在main.js 引入vuex</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    router,</span><br><span class="line">    store,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="安装浏览器插件-devtools"><a href="#安装浏览器插件-devtools" class="headerlink" title="安装浏览器插件 devtools"></a>安装浏览器插件 devtools</h3><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210714103939.png"></p><hr><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="State单一状态树"><a href="#State单一状态树" class="headerlink" title="State单一状态树"></a>State单一状态树</h3><p>Vuex 使用<strong>单一状态树</strong>——是的，用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 (<a href="https://en.wikipedia.org/wiki/Single_source_of_truth">SSOT (opens new window)</a>)”而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。</p><p>单状态树和模块化并不冲突——在后面的章节里我们会讨论如何将状态和状态变更事件分布到各个子模块中。</p><p>存储在 Vuex 中的数据和 Vue 实例中的 <code>data</code> 遵循相同的规则，例如状态对象必须是纯粹 (plain) 的</p><p><strong>在 Vue 组件中获得 Vuex 状态</strong></p><p>那么我们如何在 Vue 组件中展示状态呢？由于 Vuex 的状态存储是响应式的，从 store 实例中读取状态最简单的方法就是在<a href="https://cn.vuejs.org/guide/computed.html">计算属性 (opens new window)</a>中返回某个状态：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Counter 组件</span></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h3><p>有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  doneTodosCount () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done).length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vuex 允许我们在 store 中定义“getter”（<cst>可以认为是 store 的计算属性</cst>）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p><p>Getter 接受 state 作为其第一个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">todos</span>: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">doneTodos</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>通过属性访问</strong></p><p>Getter 会暴露为 <code>store.getters</code> 对象，你可以以属性的形式访问这些值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.getters.doneTodos <span class="comment">// -&gt; [&#123; id: 1, text: &#x27;...&#x27;, done: true &#125;]</span></span><br></pre></td></tr></table></figure><p>Getter 也可以接受其他 getter 作为第二个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">doneTodosCount</span>: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getters.doneTodos.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以通过让 getter 返回一个函数，来实现给 getter 传参。在你对 store 里的数组进行查询时非常有用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">getTodoById</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.todos.find(<span class="function"><span class="params">todo</span> =&gt;</span> todo.id === id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.getters.getTodoById(<span class="number">2</span>) <span class="comment">// -&gt; &#123; id: 2, text: &#x27;...&#x27;, done: false &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 **回调函数 (handler)**。这个回调函数就是我们实际进行状态更改的地方，<cst>并且它会接受 state 作为第一个参数</cst>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// 变更状态</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>你不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 <code>increment</code> 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 <strong>store.commit</strong> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.commit(<span class="string">&#x27;increment&#x27;</span>)</span><br></pre></td></tr></table></figure><div class="sl-hr"></div><p><strong>提交载荷</strong></p><p>你可以向 <code>store.commit</code> 传入额外的参数，即 mutation 的 <strong>载荷（payload）</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  increment (state, n) &#123;</span><br><span class="line">    state.count += n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.commit(<span class="string">&#x27;increment&#x27;</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count += payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">store.commit(<span class="string">&#x27;increment&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">amount</span>: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="sl-hr"></div><p><strong>对象风格的提交方式</strong></p><p>提交 mutation 的另一种方式是直接使用包含 <code>type</code> 属性的对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">store.commit(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;increment&#x27;</span>, </span><br><span class="line">  <span class="attr">amount</span>: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当使用对象风格的提交方式，整个对象都作为载荷传给 mutation 函数，因此 handler 保持不变：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count += payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><cst>使用普通方式提交的参数就是传递的传递，如果是对象风格的提交方式打印<code>payload</code>值是对象，写法是不一样的</cst></p><div class="sl-hr"></div><p><strong><cst class="red">Mutation 必须是同步函数<cst></strong></p><p>一条重要的原则就是要记住 <strong>mutation 必须是同步函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  someMutation (state) &#123;</span><br><span class="line">    api.callAsyncMethod(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在想象，我们正在 debug 一个 app 并且观察 devtool 中的 mutation 日志。每一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。然而，在上面的例子中 mutation 中的异步函数中的回调让这不可能完成：因为当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用——实质上任何在回调函数中进行的状态的改变都是不可追踪的。</p><div class="sl-hr"></div><p><strong>Mutation 需遵守 Vue 的响应规则</strong></p><p>既然 Vuex 的 store 中的状态是响应式的，那么当我们变更状态时，监视状态的 Vue 组件也会自动更新。这也意味着 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项：</p><ol><li>最好提前在你的 store 中初始化好所有所需属性。</li><li>当需要在对象上添加新属性时，你应该</li></ol><ul><li><p>使用 <code>Vue.set(obj, &#39;newProp&#39;, 123)</code>, 或者</p></li><li><p>以新对象替换老对象。例如，利用<a href="https://github.com/tc39/proposal-object-rest-spread">对象展开运算符 (opens new window)</a>我们可以这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state.obj = &#123; ...state.obj, <span class="attr">newProp</span>: <span class="number">123</span> &#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>响应式删除属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// delete state.info.age 这种方法不是响应式的</span></span><br><span class="line">Vue.delete(state.info,<span class="string">&#x27;age&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><div class="sl-hr"></div><p><strong>使用常量替代 Mutation 事件类型</strong></p><p>使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mutation-types.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SOME_MUTATION = <span class="string">&#x27;SOME_MUTATION&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; SOME_MUTATION &#125; <span class="keyword">from</span> <span class="string">&#x27;./mutation-types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span></span><br><span class="line">    [SOME_MUTATION] (state) &#123;</span><br><span class="line">      <span class="comment">// mutate state</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h3><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><p>让我们来注册一个简单的 action：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      <span class="comment">// 在action进行提交到mutations处理</span></span><br><span class="line">      context.commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>分发 Action</strong></p><p>Action 通过 <code>store.dispatch</code> 方法触发：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;increment&#x27;</span>) <span class="comment">//在组件中使用dispatch到action执行异步</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同样也可以传递参数</span></span><br><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;increment&#x27;</span>,<span class="string">&#x27;我是payload&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递函数</span></span><br><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;increment&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;传递函数&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递对象</span></span><br><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;increment&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&#x27;信息&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;对象  &#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用promise 传递信息到外面</span></span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  increment (context,payload) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    context.commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(payload)</span><br><span class="line">        </span><br><span class="line">        resolve(<span class="string">&#x27;数据：1111&#x27;</span>)</span><br><span class="line">      &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件写的方法</span></span><br><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;increment&#x27;</span>,<span class="string">&#x27;我是payload&#x27;</span>).then(<span class="function">(<span class="params">date</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;数据提交完成&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(date)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: moduleA,</span><br><span class="line">    <span class="attr">b</span>: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure><p><strong>使用模块的State</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 模块a,b都是放在根state里面的</span><br><span class="line">&#123;&#123;$store.state.a.name&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>使用mutations</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跟以前提交到mutations方法是一样的</span></span><br><span class="line"><span class="comment">// 先到根mutations找，然后再到模块部mutations找，因此起名要避免相同</span></span><br><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&#x27;increment&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>模块getters</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">fullname</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line"><span class="comment">//state是模块的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">fullname</span>(<span class="params">state,getters</span>)</span>&#123;</span><br><span class="line"><span class="comment">//getters</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//模块存在第三参数</span></span><br><span class="line"><span class="function"><span class="title">fullname</span>(<span class="params">state,getters,rootState</span>)</span>&#123;</span><br><span class="line"><span class="comment">//rootState是根state</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模块actions</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123; </span><br><span class="line"><span class="function"><span class="title">moduleUpdate</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">    context.commit(<span class="string">&#x27;moduleUpdate&#x27;</span>)</span><br><span class="line">    <span class="comment">//此处使用的提交commit，只会在模块里面的mutations处理，而不会到外部</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分离写法，对对象进行解构</span></span><br><span class="line"><span class="attr">actions</span>: &#123; </span><br><span class="line"><span class="function"><span class="title">moduleUpdate</span>(<span class="params">&#123;state,commit,rootState&#125;</span>)</span>&#123;</span><br><span class="line">    context.commit(<span class="string">&#x27;moduleUpdate&#x27;</span>)</span><br><span class="line">    <span class="comment">//此处使用的提交commit，只会在模块里面的mutations处理，而不会到外部</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：</p><ol><li>应用层级的状态应该集中到单个 store 对象中。</li><li>提交 <strong>mutation</strong> 是更改状态的唯一方法，并且这个过程是同步的。</li><li>异步逻辑都应该封装到 <strong>action</strong> 里面。</li></ol><p>只要你遵守以上规则，如何组织代码随你便。如果你的 store 文件太大，只需将 action、mutation 和 getter 分割到单独的文件。</p><p>对于大型应用，我们会希望把 Vuex 相关代码分割到模块中。下面是项目结构示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── api</span><br><span class="line">│   └── ... <span class="comment"># 抽取出API请求</span></span><br><span class="line">├── components</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── ...</span><br><span class="line">└── store</span><br><span class="line">    ├── index.js          <span class="comment"># 我们组装模块并导出 store 的地方</span></span><br><span class="line">    ├── actions.js        <span class="comment"># 根级别的 action</span></span><br><span class="line">    ├── mutations.js      <span class="comment"># 根级别的 mutation</span></span><br><span class="line">    └── modules</span><br><span class="line">        ├── cart.js       <span class="comment"># 购物车模块</span></span><br><span class="line">        └── products.js   <span class="comment"># 产品模块</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Vuex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tabBar组件封装</title>
      <link href="2021/07/12/TabBar/"/>
      <url>2021/07/12/TabBar/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>这是一个效果做得特别好的tabBar，接下来我来封装一个tabBar组件，究其原理都是一样的，只是样式不同。</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//tabBar.gif"></p><h3 id="准备图标"><a href="#准备图标" class="headerlink" title="准备图标"></a>准备图标</h3><input id="copy_content" type="text" value=""/><link rel="stylesheet" href="https://at.alicdn.com/t/font_2666532_o24cnp6wz1.css?spm=a313x.7781069.1998910419.40&file=font_2666532_o24cnp6wz1.css"><p>首先我准备了四个<a href="https://at.alicdn.com/t/font_2666532_o24cnp6wz1.css?spm=a313x.7781069.1998910419.40&file=font_2666532_o24cnp6wz1.css">阿里图标</a></p><div id="sl-tabBar">  <div class="sl-tabBar-item">    <div class="copyBtn" id="copy-content1"  onClick="copy(this)" data="icon-home">copy</div>    <span class="iconfont icon-home"></span>    <div class="sl-tabBar-item-text">      <span>首页</span><br>      <span>icon-home</span>    </div>  </div>  <div class="sl-tabBar-item">    <div class="copyBtn" id="copy-content2" onClick="copy(this)" data="icon-categories">copy</div>    <span class="iconfont icon-categories"></span>    <div class="sl-tabBar-item-text">      <span>分类</span><br>      <span>icon-categories</span>    </div>  </div>  <div class="sl-tabBar-item">    <div class="copyBtn" id="copy-content3" onClick="copy(this)" data="icon-goshopping">copy</div>    <span class="iconfont icon-goshopping"></span>    <div class="sl-tabBar-item-text">      <span>购物车</span><br>      <span>icon-goshopping</span>    </div>  </div>  <div class="sl-tabBar-item">    <div class="copyBtn" id="copy-content4"  onClick="copy(this)" data="icon-profile">copy</div>    <span class="iconfont icon-profile"></span>    <div class="sl-tabBar-item-text">      <span>个人中心</span><br>      <span>icon-profile</span>    </div>  </div></div><script>function copy(ElementObj) {    var clickContent = ElementObj.getAttribute('data');    var id = ElementObj.getAttribute('id');    var inputElement =  document.getElementById("copy_content");     inputElement.value = clickContent;    inputElement.select();    document.execCommand("Copy");    document.getElementById(id).innerHTML = '已复制';}</script><br><p>在Vue2.0版本，<code>src/assets/css</code> 路径下存放<code>iconfont.css</code> ，可以在创建 <code>custom_icon.css</code> 用于自定义一些图标大小等样式。创建<code>base.css</code> 存放公共页面样式</p><p><strong>base.js</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br>引入公共CSS文件</p><p><strong>App.vue</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="keyword">@import</span> <span class="string">&#x27;assets/css/base.css&#x27;</span>;</span><br><span class="line">  <span class="keyword">@import</span> <span class="string">&#x27;assets/css/iconfont.css&#x27;</span>;</span><br><span class="line">  <span class="keyword">@import</span> <span class="string">&#x27;assets/css/custom_icon.css&#x27;</span>;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p><code>@import &#39;assets/css/base.css&#39;</code> 该路径是运用了<cst>别名</cst></p><p><strong>webpack.base.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>],</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;@&#x27;</span>: resolve(<span class="string">&#x27;src&#x27;</span>), </span><br><span class="line">        <span class="string">&#x27;assets&#x27;</span>: resolve(<span class="string">&#x27;@/assets&#x27;</span>), <span class="comment">// vue3.0版本支持直接使用上面别名@，vue2.0不支持</span></span><br><span class="line">        <span class="string">&#x27;components&#x27;</span>: resolve(<span class="string">&#x27;@/components&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;views&#x27;</span>: resolve(<span class="string">&#x27;@/views&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br><h2 id="创建tabBar组件"><a href="#创建tabBar组件" class="headerlink" title="创建tabBar组件"></a>创建tabBar组件</h2><p>在 <code>src/components/tabbar</code> 路径下创建组件，<code>tabbar</code>文件夹用于存放tabbar相关文件，当在其它项目引用时，直接复制文件夹，完全独立。</p><p><cst>创建如下文件</cst></p><p><strong>TabBar.vue</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tab-bar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;TabBar&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-id">#tab-bar</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">background-color</span>: <span class="number">#f6f6f6</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">justify-content</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">align-items</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">position</span>: fixed;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">right</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">box-shadow</span>: <span class="number">0</span> -<span class="number">1px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, .<span class="number">1</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">  </span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>TabBarItem.vue</strong></p><p><code>@click=&quot;itemIsActive&quot;</code> 点击事件，用于添加激活效果</p><p><code>:style=&quot;activeStyle&quot;</code> 添加样式，activeStyle是一个计算属性，通过确认当前路由与传递的路由是否相等，来确认是否改变为激活颜色</p><p><code> &lt;slot name=&quot;item-icon&quot;&gt;&lt;/slot&gt;</code> 使用插槽，来改变不同的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-bar-item&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;itemIsActive&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;activeStyle&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;item-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;item-text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;TabBarItem&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">path</span>: <span class="built_in">String</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">activeColor</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>: <span class="built_in">String</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">default</span>: <span class="string">&#x27;blue&#x27;</span> <span class="comment">// 默认蓝色，可以在外面传递值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">itemIsActive</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$router.replace(<span class="built_in">this</span>.path)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 切换路由</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">isActive</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 当infexOf包含不等于-1  </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 当,当前路由等于path，表示包含不等于-1，返回true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="built_in">this</span>.$route.path.indexOf(<span class="built_in">this</span>.path) !==-<span class="number">1</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">activeStyle</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="built_in">this</span>.isActive ? &#123;<span class="attr">color</span>: <span class="built_in">this</span>.activeColor&#125;:&#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-class">.tab-bar-item</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">flex</span>: <span class="number">1</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">height</span>: <span class="number">49px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-class">.tab-bar-item</span> <span class="selector-tag">div</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">margin-top</span>: <span class="number">1px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>MainTabBar.vue</strong></p><p><code>activeColor=&quot;yellow&quot;</code> 改变默认颜色，传递<code>yellow</code> 也可以传递二进制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">tab-bar</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">tab-bar-item</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">activeColor</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-home&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;item-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;item-text&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">tab-bar-item</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">tab-bar-item</span> <span class="attr">path</span>=<span class="string">&quot;/category&quot;</span> <span class="attr">activeColor</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-categories&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;item-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;item-text&quot;</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">tab-bar-item</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">tab-bar-item</span> <span class="attr">path</span>=<span class="string">&quot;/cart&quot;</span> <span class="attr">activeColor</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-goshopping&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;item-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;item-text&quot;</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">tab-bar-item</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">tab-bar-item</span> <span class="attr">path</span>=<span class="string">&quot;/profile&quot;</span> <span class="attr">activeColor</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-profile&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;item-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;item-text&quot;</span>&gt;</span>我的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">tab-bar-item</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tab-bar</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TabBar <span class="keyword">from</span> <span class="string">&#x27;@/components/tabbar/TabBar&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TabBarItem <span class="keyword">from</span> <span class="string">&#x27;@/components/tabbar/TabBarItem&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;MainTabBar&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    TabBar,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    TabBarItem</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="引用组件"><a href="#引用组件" class="headerlink" title="引用组件"></a>引用组件</h2><p><strong>App.vue</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--添加router-view才能显示路由内容--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">main-tab-bar</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 引用主要tabBar组件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> MainTabBar <span class="keyword">from</span> <span class="string">&#x27;./components/tabbar/MainTabBar.vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    MainTabBar</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="keyword">@import</span> <span class="string">&#x27;assets/css/base.css&#x27;</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="keyword">@import</span> <span class="string">&#x27;assets/css/iconfont.css&#x27;</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="keyword">@import</span> <span class="string">&#x27;assets/css/custom_icon.css&#x27;</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  </span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="补充路由内容"><a href="#补充路由内容" class="headerlink" title="补充路由内容"></a>补充路由内容</h2><p>在 <code>src/views/</code> 路径下创建视图组件，如果没有view文件夹自行创建。</p><p>创建四个路由页面 <code>Home.vue</code>，<code>Cart.vue</code>，<code>Category.vue</code>，<code>Profile.vue</code>。在创建这些组件之前可以创建相应的文件夹例如 <code>Home</code> <code>Profile</code> ，因为一个页面可能会有多个组件，这样做便于管理</p><p><strong>实例Home.vue</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在 <code>src/router/index.js</code> 文件下引入路由组件，使用懒加载方式</p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 懒加载方式</span></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span></span><br><span class="line">    <span class="keyword">import</span> (<span class="string">&#x27;../views/home/Home.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Category = <span class="function">() =&gt;</span></span><br><span class="line">    <span class="keyword">import</span> (<span class="string">&#x27;../views/category/Category.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Cart = <span class="function">() =&gt;</span></span><br><span class="line">    <span class="keyword">import</span> (<span class="string">&#x27;../views/cart/Cart.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Profile = <span class="function">() =&gt;</span></span><br><span class="line">    <span class="keyword">import</span> (<span class="string">&#x27;../views/profile/Profile.vue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由对象，抽离routes，便于管理</span></span><br><span class="line"><span class="keyword">const</span> routes = [&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> <span class="comment">// 默认路由页面</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: Home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/category&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: Category</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/cart&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: Cart</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: Profile</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    routes,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span> <span class="comment">// 使得路径更好看点击，默认哈希路径</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>四个页面的路由是如何切换的呢，在<code>TabBarItem.vue</code> 文件有做路由跳转</p><p><strong>TabBarItem.vue</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  <span class="function"><span class="title">itemIsActive</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.$router.replace(<span class="built_in">this</span>.path)</span><br><span class="line">    <span class="comment">// this.path是从MainTabBar组件传进来的</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>当点击一个组件例如<code>Home</code>，那么执行绑定的方法事件，将该组件的path传递到组件，<code>itemIsActive</code>方法用<code>replace</code> 去切换路由</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Components </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tabBar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keep-alive</title>
      <link href="2021/07/11/Keep_alive/"/>
      <url>2021/07/11/Keep_alive/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="keep-alive-遇见-vue-router"><a href="#keep-alive-遇见-vue-router" class="headerlink" title="keep-alive 遇见 vue-router"></a>keep-alive 遇见 vue-router</h2><p><code>keep-alive</code> 是 Vue 内置的一个组件，可以是被包含的组件保留状态，或避免重新渲染</p><ul><li><p><code>include</code> - 字符串或正则表达，只有匹配的组件会被缓存</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--排除一个组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">exclud</span>=<span class="string">&quot;Profile&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--排除多个组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">exclud</span>=<span class="string">&quot;Profile,User&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Profile</code> 和 <code>User </code>都是组件的name属性值</p></li><li><p><code>exclude</code> - 字符串或正则表达式，任何匹配的组件都不会被缓存</p></li></ul><p><code>router-view</code> 也是一个组件，如果直接被包含在 <code>keep-alive</code> 里面，所有路劲匹配到的视图组件都会被缓存</p><h2 id="保留状态"><a href="#保留状态" class="headerlink" title="保留状态"></a>保留状态</h2><p><strong>生命周期函数</strong> <code>created</code> <code>destroyed</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// created 当页面组件创建时，调用该函数</span></span><br><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;创建&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// destroyed 当页面组件跳转时销毁，调用该函数</span></span><br><span class="line"><span class="function"><span class="title">destroyed</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;销毁&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--将&lt;router-view/&gt;嵌套在&lt;keep-alive&gt;组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样将不会重复执行<code>created</code> <code>destroyed</code> 函数</p><br><p><strong>生命周期函数</strong> <code>activated</code> <code>deactivated</code></p><p><cst>该生命周期只有当使用</cst><code>&lt;keep-alive&gt;</code>嵌套<code>&lt;router-view&gt;</code> 才有用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当页面激活时，调用。页面离开时，调用未激活。会一直调用</span></span><br><span class="line"><span class="function"><span class="title">activated</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;激活&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.$route.path);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">deactivated</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;未激活&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.$route.path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用<code>deactivated</code>函数时，打印路径不是离开的页面，而是当前的页面。因为<code>$route</code> 没有来得及渲染，只能是当前页面的，故此方法不能保留状态</p><br><p><strong>组件内导航</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="comment">// 当前组件离开时，打印路径，赋值给date中path</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.$route.path);</span><br><span class="line">  <span class="built_in">this</span>.path = <span class="built_in">this</span>.$route.path</span><br><span class="line">  next()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">activated</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;激活&#x27;</span>);</span><br><span class="line"> <span class="built_in">this</span>.$router.push(<span class="built_in">this</span>.path)</span><br><span class="line">  <span class="comment">// 这样就可以保留之前组件的状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Vue-Router </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue-Router </tag>
            
            <tag> Keep-alive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里图标无法使用旋转样式</title>
      <link href="2021/07/11/Question2/"/>
      <url>2021/07/11/Question2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote><p>transform属性运用在 iconfont 图标是无效的。查看transform属性手册得知，transfrom适用于：所有块级元素以及某些内联元素。</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>既然 transform 不适用于某些内联元素，那咱们就把这些元素变成 inline-block 或 block 就行了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.icon-weixin</span>,<span class="selector-class">.icon-bilibili-fill</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 我将两个图标设置为 inline-block，这样是块级元素又是内联元素，不用换行</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Question </tag>
            
            <tag> Icon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导航守卫</title>
      <link href="2021/07/10/Navigation_guard/"/>
      <url>2021/07/10/Navigation_guard/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="回顾生命周期"><a href="#回顾生命周期" class="headerlink" title="回顾生命周期"></a>回顾生命周期</h2><p>以下是常用的Vue生命周期方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sexport <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 当组件被创建时被调用</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 当DOM结构完全渲染调用</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">updated</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 当页面刷新调用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改页面标题"><a href="#修改页面标题" class="headerlink" title="修改页面标题"></a>修改页面标题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">…………</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 当组件被创建时被调用</span></span><br><span class="line">    documents.title = <span class="string">&#x27;首页&#x27;</span>  <span class="comment">// 这样可以动态修改标题</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><blockquote><p>这种写法特别不方便，如果有大量页面，就需要一个一个复制过去，不易后期维护。以下是利用导航来做</p></blockquote><p><strong><code>router/index.js</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="comment">// 其它组件也一样添加meta组件</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: About,</span><br><span class="line">    <span class="attr">meta</span>:&#123;  <span class="comment">// meta：元数据 </span></span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;关于&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 该做法称为前置钩子</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 从from跳转到to</span></span><br><span class="line">  <span class="built_in">console</span>.log(to)</span><br><span class="line">  <span class="built_in">document</span>.title = to.matched[<span class="number">0</span>].meta.title</span><br><span class="line">  next() <span class="comment">// 必须调用的</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后置钩子 跳转后回调</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//不需要调用next函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lovehuating/image/raw/master/20210710211250.png"></p><p>这就是为什么不直接使用 <code>to.meta.title</code>来直接赋值。当页面首页时，meta值是为空的。因为首页子路由组件是没有添加meta对象。如果又要给子路由组件meta对象，就复杂了。因此直接使用 <code>matched[0]</code> 来获取当前父组件的meta属性</p><p><img src="https://gitee.com/lovehuating/image/raw/master/20210710213012.png"></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li><p>后置钩子，也就是<code>afterEach</code> ，不需要主动调用next()函数</p></li><li><p>上面使用的导航守卫，称为<strong>全局守卫</strong></p></li><li><p>另外的两种守卫</p><ul><li><p>路由独享的守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">routes:[&#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: Foo,</span><br><span class="line"><span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li><li><p>组件内的守卫</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Vue-Router </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue-Router </tag>
            
            <tag> 导航守卫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>参数传递</title>
      <link href="2021/07/10/Parameter_transfer/"/>
      <url>2021/07/10/Parameter_transfer/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="传递参数的方式"><a href="#传递参数的方式" class="headerlink" title="传递参数的方式"></a>传递参数的方式</h2><p>传递参数主要有两张类型：<code>params</code> 和 <code>query</code></p><p><strong>params的类型：</strong></p><ul><li>配置路由格式：<code>/router/:id</code></li><li>传递方式：在path后面跟上对应值</li><li>传递后形成的路径：<code>/router/123, /router/abc</code></li></ul><p><strong>query的类型</strong></p><ul><li>配置路由格式：<code>/router</code> ，也就是普通配置</li><li>传递的方式：对象中使用<code>query</code>的<code>key</code>作为传递方式</li><li>传递后形成的路径：<code>/router?id=123, /router?id=abc</code></li></ul><p>使用<code>router-link</code> 跳转路由的三种方式，第三种使用 <code>query</code>数据传递</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;router-link to=&quot;/profile&quot;&gt;Profile&lt;/router-link&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;router-link :to=&quot;&#123;path:&#x27;/profile&#x27;&#125;&quot;&gt;Profile&lt;/router-link&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/profile&#x27;,query:&#123;name:&#x27;小明&#x27;,age:18,height: &#x27;1.88m&#x27;&#125;&#125;&quot;</span>&gt;</span>Profile<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用`$route.query`接收数据--&gt;</span></span><br><span class="line">姓名：&#123;&#123;$route.query.name&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">年龄：&#123;&#123;$route.query.age&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">身高：&#123;&#123;$route.query.height&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="使用按钮跳转"><a href="#使用按钮跳转" class="headerlink" title="使用按钮跳转"></a>使用按钮跳转</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;userClick()&quot;</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;profileClick()&quot;</span>&gt;</span>档案<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">userClick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$router.push(<span class="string">&#x27;/user/&#x27;</span>+<span class="built_in">this</span>.userId)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">profileClick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">    <span class="attr">query</span>: &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">       <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">       <span class="attr">height</span>: <span class="string">&#x27;1.88m&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上是跳转传递数据的两种方式, query支持多条数据传递</span></span><br></pre></td></tr></table></figure><h2 id="route-和-router-的区别"><a href="#route-和-router-的区别" class="headerlink" title="$route 和 $router 的区别"></a><code>$route</code> 和 <code>$router</code> 的区别</h2><p><img src="https://gitee.com/lovehuating/image/raw/master/20210710200216.png" alt="$router &amp;&amp; $route区别"></p><h3 id="源码解释"><a href="#源码解释" class="headerlink" title="源码解释"></a>源码解释</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在main.js添加全局方法</span></span><br><span class="line">Vue.prototype.name = <span class="string">&#x27;SimpleLife&#x27;</span></span><br><span class="line"><span class="comment">// 在任意组件,可以通过this获取到方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name) <span class="comment">//logs SimpleLife</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加全局对象</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">&#x27;参数&#x27;</span>,<span class="string">&#x27;结果&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// $router 和 $route 全局方法也是这样添加的, Vue源码</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Vue.prototype,<span class="string">&#x27;$router&#x27;</span>,&#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">this</span>._routerRoot._router &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Vue.prototype,<span class="string">&#x27;$route&#x27;</span>,&#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">this</span>._routerRoot._route &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Vue-Router </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue-Router </tag>
            
            <tag> 参数传递 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3</title>
      <link href="2021/07/07/CSS3/"/>
      <url>2021/07/07/CSS3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>CSS3 已完全向后兼容，所以你就不必改变现有的设计。</p><p>CSS3 被拆分为”模块”。旧规范已拆分成小块，还增加了新的。一些最重要 CSS3 模块如下：</p><ul><li>选择器</li><li>盒模型</li><li>背景和边框</li><li>文字特效</li><li>2D/3D转换</li><li>动画</li><li>多列布局</li><li>用户界面</li></ul><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><p>用 CSS3，你可以创建圆角边框，添加阴影框，并作为边界的形象而不使用设计程序，如 Photoshop。</p><p>在本章中，您将了解以下的边框属性：</p><ul><li>border-radius</li><li>box-shadow</li><li>border-image</li></ul><h3 id="CSS3-圆角"><a href="#CSS3-圆角" class="headerlink" title="CSS3 圆角"></a>CSS3 圆角</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>:<span class="number">25px</span>;</span><br></pre></td></tr></table></figure><h3 id="CSS3-盒阴影"><a href="#CSS3-盒阴影" class="headerlink" title="CSS3 盒阴影"></a>CSS3 盒阴影</h3><p>CSS3 中的 box-shadow 属性被用来添加阴影:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">5px</span> <span class="number">#888888</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS3-边界图片"><a href="#CSS3-边界图片" class="headerlink" title="CSS3 边界图片"></a>CSS3 边界图片</h3><p>有了 CSS3 的 border-image 属性，你可以使用图像创建一个边框：</p><p>border-image 属性允许你指定一个图片作为边框！ 用于创建上文边框的原始图像：</p><p>在 div 中使用图片创建边框:</p><p><b class="blue">注意: </b> Internet Explorer 不支持 border-image 属性。</p><label> border-image 属性用于设置图片的边框。</label><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;round&quot;</span>&gt;</span>这里，图像平铺（重复）来填充该区域。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;stretch&quot;</span>&gt;</span>这里，图像被拉伸以填充该区域。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">15px</span> solid transparent;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#round</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">border-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://www.runoob.com/images/border.png&#x27;</span>) <span class="number">30</span> <span class="number">30</span> round;</span><br><span class="line">    <span class="comment">/* Safari 5 and older */</span></span><br><span class="line">    -o-<span class="attribute">border-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://www.runoob.com/images/border.png&#x27;</span>) <span class="number">30</span> <span class="number">30</span> round;</span><br><span class="line">    <span class="comment">/* Opera */</span></span><br><span class="line">    <span class="attribute">border-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://www.runoob.com/images/border.png&#x27;</span>) <span class="number">30</span> <span class="number">30</span> round;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#stretch</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">border-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://www.runoob.com/images/border.png&#x27;</span>) <span class="number">30</span> <span class="number">30</span> stretch;</span><br><span class="line">    <span class="comment">/* Safari 5 and older */</span></span><br><span class="line">    -o-<span class="attribute">border-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://www.runoob.com/images/border.png&#x27;</span>) <span class="number">30</span> <span class="number">30</span> stretch;</span><br><span class="line">    <span class="comment">/* Opera */</span></span><br><span class="line">    <span class="attribute">border-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://www.runoob.com/images/border.png&#x27;</span>) <span class="number">30</span> <span class="number">30</span> stretch;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><div class="sl_CSS3">        <div id="CSS3_round">这里，图像平铺（重复）来填充该区域。</div>        <div id="CSS3_stretch">这里，图像被拉伸以填充该区域。</div></div><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>CSS3 中包含几个新的背景属性，提供更大背景元素控制。</p><p>在本章您将了解以下背景属性：</p><ul><li>background-image</li><li>background-size</li><li>background-origin</li><li>background-clip</li></ul><h3 id="CSS3-background-image属性"><a href="#CSS3-background-image属性" class="headerlink" title="CSS3 background-image属性"></a>CSS3 background-image属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#example1</span> &#123; </span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">img_flwr.gif</span>), <span class="built_in">url</span>(<span class="string">paper.gif</span>); </span><br><span class="line">    <span class="attribute">background-position</span>: right bottom, left top; </span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat, repeat; </span><br><span class="line">  <span class="comment">/*控制两张图片背景，一对一对应*/</span></span><br><span class="line">  <span class="comment">/*repeat是重复叠加*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS3-background-size-属性"><a href="#CSS3-background-size-属性" class="headerlink" title="CSS3 background-size 属性"></a>CSS3 background-size 属性</h3><p>background-size指定背景图像的大小。CSS3以前，背景图像大小由图像的实际大小决定。</p><p>CSS3中可以指定背景图片，让我们重新在不同的环境中指定背景图片的大小。您可以指定像素或百分比大小。</p><p>你指定的大小是相对于父元素的宽度和高度的百分比的大小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">img_flwr.gif</span>);</span><br><span class="line">    <span class="attribute">background-size</span>:<span class="number">80px</span> <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS3-的-background-origin-属性"><a href="#CSS3-的-background-origin-属性" class="headerlink" title="CSS3 的 background-origin 属性"></a>CSS3 的 background-origin 属性</h3><p>background-origin 属性指定了背景图像的位置区域。</p><p>content-box, padding-box,和 border-box区域内可以放置背景图像。</p><p><img src="https://www.runoob.com/images/background-origin.gif"></p><h3 id="CSS3-多个背景图像"><a href="#CSS3-多个背景图像" class="headerlink" title="CSS3 多个背景图像"></a>CSS3 多个背景图像</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">img_flwr.gif</span>),<span class="built_in">url</span>(<span class="string">img_tree.gif</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS3-background-clip属性"><a href="#CSS3-background-clip属性" class="headerlink" title="CSS3 background-clip属性"></a>CSS3 background-clip属性</h3><p>CSS3中background-clip背景剪裁属性是从指定位置开始绘制。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#example1</span> &#123; </span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> dotted black; </span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">35px</span>; </span><br><span class="line">    <span class="attribute">background</span>: yellow; </span><br><span class="line">    <span class="attribute">background-clip</span>: content-box; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><p>CSS3 渐变（gradients）可以让你在两个或多个指定的颜色之间显示平稳的过渡。</p><p>以前，你必须使用图像来实现这些效果。但是，通过使用 CSS3 渐变（gradients），你可以减少下载的时间和宽带的使用。此外，渐变效果的元素在放大时看起来效果更好，因为渐变（gradient）是由浏览器生成的。</p><p>CSS3 定义了两种类型的渐变（gradients）：</p><ul><li><strong>线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向</strong></li><li><strong>径向渐变（Radial Gradients）- 由它们的中心定义</strong></li></ul><p>线性渐变相关属性：<a href="https://www.runoob.com/cssref/pr-background-image.html">background-image</a>。</p><h3 id="CSS3-线性渐变"><a href="#CSS3-线性渐变" class="headerlink" title="CSS3 线性渐变"></a>CSS3 线性渐变</h3><p>为了创建一个线性渐变，你必须至少定义两种颜色节点。颜色节点即你想要呈现平稳过渡的颜色。同时，你也可以设置一个起点和一个方向（或一个角度）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(direction, color-stop1, color-stop2, ...);</span><br></pre></td></tr></table></figure><p><strong>线性渐变 - 从上到下（默认情况下）</strong></p><p><strong>线性渐变 - 从左到右</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#grad</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, red , yellow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>线性渐变 - 对角</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#grad</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom right, red, yellow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>线性渐变 - 使用角度</strong></p><p>如果你想要在渐变的方向上做更多的控制，你可以定义一个角度，而不用预定义方向（to bottom、to top、to right、to left、to bottom right，等等）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(angle, color-stop1, color-stop2);</span><br></pre></td></tr></table></figure><p>角度是指水平线和渐变线之间的角度，逆时针方向计算。换句话说，0deg 将创建一个从下到上的渐变，90deg 将创建一个从左到右的渐变。</p><img src="https://www.runoob.com/wp-content/uploads/2014/07/7B0CC41A-86DC-4E1B-8A69-A410E6764B91.jpg" style="zoom:50%;" /><blockquote><p>但是，请注意很多浏览器（Chrome、Safari、firefox等）的使用了旧的标准，即 0deg 将创建一个从左到右的渐变，90deg 将创建一个从下到上的渐变。换算公式 90 - x = y 其中 x 为标准角度，y为非标准角度。</p></blockquote><h3 id="CSS3-径向渐变"><a href="#CSS3-径向渐变" class="headerlink" title="CSS3 径向渐变"></a>CSS3 径向渐变</h3><p>径向渐变由它的中心定义。</p><p>为了创建一个径向渐变，你也必须至少定义两种颜色节点。颜色节点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（圆形或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(shape size at position, start-color, ..., last-color);</span><br></pre></td></tr></table></figure><h2 id="文本效果"><a href="#文本效果" class="headerlink" title="文本效果"></a>文本效果</h2><p>CSS3中包含几个新的文本特征。</p><p>在本章中您将了解以下文本属性：</p><ul><li>text-shadow</li><li>box-shadow</li><li>text-overflow</li><li>word-wrap</li><li>word-break</li></ul><h3 id="CSS3-的文本阴影"><a href="#CSS3-的文本阴影" class="headerlink" title="CSS3 的文本阴影"></a>CSS3 的文本阴影</h3><p>CSS3 中，text-shadow属性适用于文本阴影。<br><text id="CSS_shadow">Text shadow effect</text></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#FF0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS3-box-shadow属性"><a href="#CSS3-box-shadow属性" class="headerlink" title="CSS3 box-shadow属性"></a>CSS3 box-shadow属性</h3><p>CSS3 中 CSS3 box-shadow 属性适用于盒子阴影</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">5px</span> <span class="number">#888888</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2D-转换"><a href="#2D-转换" class="headerlink" title="2D 转换"></a>2D 转换</h2><p>CSS3 转换可以对元素进行移动、缩放、转动、拉长或拉伸。</p><p>在本章您将了解2D变换方法：</p><ul><li>translate()</li><li>rotate()</li><li>scale()</li><li>skew()</li><li>matrix()</li></ul><h3 id="translate-方法"><a href="#translate-方法" class="headerlink" title="translate() 方法"></a>translate() 方法</h3>  <img src="https://www.runoob.com/images/transform_translate.gif"><p>translate()方法，根据左(X轴)和顶部(Y轴)位置给定的参数，从当前元素位置移动。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50px</span>,<span class="number">100px</span>);</span><br><span class="line">-ms-<span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50px</span>,<span class="number">100px</span>); <span class="comment">/* IE 9 */</span></span><br><span class="line">-webkit-<span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50px</span>,<span class="number">100px</span>); <span class="comment">/* Safari and Chrome */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*translate值（50px，100px）是从左边元素移动50个像素，并从顶部移动100像素。*/</span></span><br></pre></td></tr></table></figure><h3 id="rotate-方法"><a href="#rotate-方法" class="headerlink" title="rotate() 方法"></a>rotate() 方法</h3><p>rotate()方法，在一个给定度数顺时针旋转的元素。负值是允许的，这样是元素逆时针旋转。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span><br><span class="line">-ms-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>); <span class="comment">/* IE 9 */</span></span><br><span class="line">-webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>); <span class="comment">/* Safari and Chrome */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="scale-方法"><a href="#scale-方法" class="headerlink" title="scale() 方法"></a>scale() 方法</h3><p>scale()方法，该元素增加或减少的大小，取决于宽度（X轴）和高度（Y轴）的参数：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-ms-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">/* IE 9 */</span></span><br><span class="line">-webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">/* Safari */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">/* 标准语法 */</span></span><br></pre></td></tr></table></figure><p>scale（2,3）转变宽度为原来的大小的2倍，和其原始大小3倍的高度。</p><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>CSS3 可以创建动画，它可以取代许多网页动画图像、Flash 动画和 JavaScript 实现的效果。</p><div id="myfirst">SimpleLife</div><h3 id="CSS3-动画"><a href="#CSS3-动画" class="headerlink" title="CSS3 动画"></a>CSS3 动画</h3><p>当在 <strong>@keyframes</strong> 创建动画，把它绑定到一个选择器，否则动画不会有任何效果。</p><p>指定至少这两个CSS3的动画属性绑定向一个选择器：</p><ul><li>规定动画的名称</li><li>规定动画的时长</li></ul><p>把 “myfirst” 动画捆绑到 div 元素，时长：5 秒：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">animation</span>: myfirst <span class="number">5s</span>;</span><br><span class="line">    -webkit-<span class="attribute">animation</span>: myfirst <span class="number">5s</span>; <span class="comment">/* Safari 与 Chrome */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong> 您必须定义动画的名称和动画的持续时间。如果省略的持续时间，动画将无法运行，因为默认值是0。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> myfirst</span><br><span class="line">&#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> myfirst /* Safari 与 Chrome */</span><br><span class="line">&#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS3动画是什么？"><a href="#CSS3动画是什么？" class="headerlink" title="CSS3动画是什么？"></a>CSS3动画是什么？</h3><p>动画是使元素从一种样式逐渐变化为另一种样式的效果。</p><p>您可以改变任意多的样式任意多的次数。</p><p>请用百分比来规定变化发生的时间，或用关键词 “from” 和 “to”，等同于 0% 和 100%。</p><p>0% 是动画的开始，100% 是动画的完成。</p><p>为了得到最佳的浏览器支持，您应该始终定义 0% 和 100% 选择器。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> myfirst</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0%</span>   &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line">    <span class="number">25%</span>  &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">    <span class="number">50%</span>  &#123;<span class="attribute">background</span>: blue;&#125;</span><br><span class="line">    <span class="number">100%</span> &#123;<span class="attribute">background</span>: green;&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> myfirst /* Safari 与 Chrome */</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0%</span>   &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line">    <span class="number">25%</span>  &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">    <span class="number">50%</span>  &#123;<span class="attribute">background</span>: blue;&#125;</span><br><span class="line">    <span class="number">100%</span> &#123;<span class="attribute">background</span>: green;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多列"><a href="#多列" class="headerlink" title="多列"></a>多列</h2><p>我们将学习以下几个 CSS3 的多列属性:</p><ul><li><code>column-count</code></li><li><code>column-gap</code></li><li><code>column-rule-style</code></li><li><code>column-rule-width</code></li><li><code>column-rule-color</code></li><li><code>column-rule</code></li><li><code>column-span</code></li><li><code>column-width</code></li></ul><h3 id="CSS3-创建多列"><a href="#CSS3-创建多列" class="headerlink" title="CSS3 创建多列"></a>CSS3 创建多列</h3><p><code>column-count</code> 属性指定了需要分割的列数。</p><p>以下实例将 <div> 元素中的文本分为 3 列：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">column-count</span>: <span class="number">3</span>; <span class="comment">/* Chrome, Safari, Opera */</span></span><br><span class="line">    -moz-<span class="attribute">column-count</span>: <span class="number">3</span>; <span class="comment">/* Firefox */</span></span><br><span class="line">    <span class="attribute">column-count</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS3-多列中列与列间的间隙"><a href="#CSS3-多列中列与列间的间隙" class="headerlink" title="CSS3 多列中列与列间的间隙"></a>CSS3 多列中列与列间的间隙</h3><p><code>column-gap</code> 属性指定了列与列间的间隙。</p><p>以下实例指定了列与列间的间隙为 40 像素：</p><h2 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h2><h3 id="CSS3-用户界面"><a href="#CSS3-用户界面" class="headerlink" title="CSS3 用户界面"></a>CSS3 用户界面</h3><p>在 CSS3 中, 增加了一些新的用户界面特性来调整元素尺寸，框尺寸和外边框。</p><p>在本章中，您将了解以下的用户界面属性：</p><ul><li>resize</li><li>box-sizing</li><li>outline-offset</li></ul><h3 id="CSS3-调整尺寸-Resizing"><a href="#CSS3-调整尺寸-Resizing" class="headerlink" title="CSS3 调整尺寸(Resizing)"></a>CSS3 调整尺寸(Resizing)</h3><p>由用户指定一个div元素尺寸大小：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">resize</span>:both;</span><br><span class="line">    <span class="attribute">overflow</span>:auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="缩略图"><a href="#缩略图" class="headerlink" title="缩略图"></a>缩略图</h3><p>我们使用 <code>border</code> 属性来创建缩略图。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">img &#123;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;paris.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Paris&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h3><p>响应式图片会自动适配各种尺寸的屏幕。</p><p>实例中，你可以通过重置浏览器大小查看效果:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="弹性盒子"><a href="#弹性盒子" class="headerlink" title="弹性盒子"></a>弹性盒子</h2><p>弹性盒子是 CSS3 的一种新的布局模式。</p><p>CSS3 弹性盒（ Flexible Box 或 flexbox），是一种当页面需要适应不同的屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式。</p><p>引入弹性盒布局模型的目的是提供一种更加有效的方式来对一个容器中的子元素进行排列、对齐和分配空白空间</p><h3 id="CSS3-弹性盒子内容"><a href="#CSS3-弹性盒子内容" class="headerlink" title="CSS3 弹性盒子内容"></a>CSS3 弹性盒子内容</h3><p>弹性盒子由弹性容器(Flex container)和弹性子元素(Flex item)组成。<br>弹性容器通过设置 display 属性的值为 flex 或 inline-flex将其定义为弹性容器。<br>弹性容器内包含了一个或多个弹性子元素。</p><p><strong>注意：</strong> 弹性容器外及弹性子元素内是正常渲染的。弹性盒子只定义了弹性子元素如何在弹性容器内布局。</p><p>弹性子元素通常在弹性盒子内一行显示。默认情况每个容器只有一行。<br>以下元素展示了弹性子元素在一行内显示，从左到右:</p><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p><code>flex-direction</code> 属性指定了弹性子元素在父容器中的位置。</p><p><strong>语法：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse</span><br></pre></td></tr></table></figure><p><code>flex-direction</code>的值有:</p><ul><li>row：横向从左到右排列（左对齐），默认的排列方式。</li><li>row-reverse：反转横向排列（右对齐，从后往前排，最后一项排在最前面。</li><li>column：纵向排列。</li><li>column-reverse：反转纵向排列，从后往前排，最后一项排在最上面。</li></ul><h3 id="justify-content-属性"><a href="#justify-content-属性" class="headerlink" title="justify-content 属性"></a>justify-content 属性</h3><p>内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main axis）对齐。</p><p><strong>justify-content 语法如下：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around</span><br></pre></td></tr></table></figure><p>各个值解析:</p><ul><li><p>flex-start：</p><p>弹性项目向行头紧挨着填充。这个是默认值。第一个弹性项的main-start外边距边线被放置在该行的main-start边线，而后续弹性项依次平齐摆放。</p></li><li><p>flex-end：</p><p>弹性项目向行尾紧挨着填充。第一个弹性项的main-end外边距边线被放置在该行的main-end边线，而后续弹性项依次平齐摆放。</p></li><li><p>center：</p><p>弹性项目居中紧挨着填充。（如果剩余的自由空间是负的，则弹性项目将在两个方向上同时溢出）。</p></li><li><p>space-between：</p><p>弹性项目平均分布在该行上。如果剩余空间为负或者只有一个弹性项，则该值等同于flex-start。否则，第1个弹性项的外边距和行的main-start边线对齐，而最后1个弹性项的外边距和行的main-end边线对齐，然后剩余的弹性项分布在该行上，相邻项目的间隔相等。</p></li><li><p>space-around：</p><p>弹性项目平均分布在该行上，两边留有一半的间隔空间。如果剩余空间为负或者只有一个弹性项，则该值等同于center。否则，弹性项目沿该行分布，且彼此间隔相等（比如是20px），同时首尾两边和弹性容器之间留有一半的间隔（1/2*20px=10px）。</p></li></ul><h3 id="align-items-属性"><a href="#align-items-属性" class="headerlink" title="align-items 属性"></a>align-items 属性</h3><p><code>align-items</code> 设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式。</p><p><strong>语法：</strong>**</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch</span><br></pre></td></tr></table></figure><p>各个值解析: 控制item上下</p><ul><li>flex-start：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。</li><li>flex-end：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。</li><li>center：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。</li><li>baseline：如弹性盒子元素的行内轴与侧轴为同一条，则该值与’flex-start’等效。其它情况下，该值将参与基线对齐。</li><li>stretch：如果指定侧轴大小的属性值为’auto’，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照’min/max-width/height’属性的限制。<cst>填充容器</cst></li></ul><h3 id="flex-wrap-属性"><a href="#flex-wrap-属性" class="headerlink" title="flex-wrap 属性"></a>flex-wrap 属性</h3><p><strong>flex-wrap</strong> 属性用于指定弹性盒子的子元素换行方式。</p><p><strong>语法:</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-wrap</span>: nowrap|wrap|wrap-reverse|initial|inherit;</span><br></pre></td></tr></table></figure><p>各个值解析:</p><ul><li><strong>nowrap</strong> - 默认， 弹性容器为单行。该情况下弹性子项可能会溢出容器。</li><li><strong>wrap</strong> - 弹性容器为多行。该情况下弹性子项溢出的部分会被放置到新行，子项内部会发生断行</li><li><strong>wrap-reverse</strong> -反转 wrap 排列。</li></ul><h3 id="align-content-属性"><a href="#align-content-属性" class="headerlink" title="align-content 属性"></a>align-content 属性</h3><p><code>align-content</code> 属性用于修改 <code>flex-wrap</code> 属性的行为。类似于 <code>align-items</code>, 但它不是设置弹性子元素的对齐，而是设置各个行的对齐。</p><p><strong>语法:</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch</span><br></pre></td></tr></table></figure><p>各个值解析:</p><ul><li><code>stretch</code> - 默认。各行将会伸展以占用剩余的空间。</li><li><code>flex-start</code> - 各行向弹性盒容器的起始位置堆叠。</li><li><code>flex-end</code> - 各行向弹性盒容器的结束位置堆叠。</li><li><code>center</code> -各行向弹性盒容器的中间位置堆叠。</li><li><code>space-between</code> -各行在弹性盒容器中平均分布。</li><li><code>space-around</code> - 各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。</li></ul><h2 id="多媒体查询"><a href="#多媒体查询" class="headerlink" title="多媒体查询"></a>多媒体查询</h2><h3 id="CSS3-多媒体查"><a href="#CSS3-多媒体查" class="headerlink" title="CSS3 多媒体查"></a>CSS3 多媒体查</h3><p>CSS3 的多媒体查询继承了 CSS2 多媒体类型的所有思想： 取代了查找设备的类型，CSS3 根据设置自适应显示。</p><p>媒体查询可用于检测很多事情，例如：</p><ul><li>viewport(视窗) 的宽度与高度</li><li>设备的宽度与高度</li><li>朝向 (智能手机横屏，竖屏) 。</li><li>分辨率</li></ul><p>目前很多针对苹果手机，Android 手机，平板等设备都会使用到多媒体查询。</p><h3 id="多媒体查询语法"><a href="#多媒体查询语法" class="headerlink" title="多媒体查询语法"></a>多媒体查询语法</h3><p>多媒体查询由多种媒体组成，可以包含一个或多个表达式，表达式根据条件是否成立返回 true 或 false。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> <span class="keyword">not</span>|<span class="keyword">only</span> mediatype <span class="keyword">and</span> (expressions) &#123;</span><br><span class="line">    CSS 代码...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补充CSS"><a href="#补充CSS" class="headerlink" title="补充CSS"></a>补充CSS</h2><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><p><strong>anchor伪类</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>:<span class="number">#FF0000</span>;&#125; <span class="comment">/* 未访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>:<span class="number">#00FF00</span>;&#125; <span class="comment">/* 已访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>:<span class="number">#FF00FF</span>;&#125; <span class="comment">/* 鼠标划过链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>:<span class="number">#0000FF</span>;&#125; <span class="comment">/* 已选中的链接 */</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 在CSS定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的。</p><p><strong>注意：</strong> 在 CSS 定义中，a:active 必须被置于 a:hover 之后，才是有效的。</p><p><strong>注意：</strong>伪类的名称不区分大小写。</p><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p><strong>CSS - :before 伪元素</strong></p><p>“:before” 伪元素可以在元素的内容前面插入新内容。</p><p><strong>CSS - :after 伪元素</strong></p><p>“:after” 伪元素可以在元素的内容之后插入新内容。</p><h3 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h3><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/css/css-positioning.html#position-absolute">absolute</a></td><td align="left">生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td></tr><tr><td align="left"><a href="https://www.runoob.com/css/css-positioning.html#position-fixed">fixed</a></td><td align="left">生成固定定位的元素，相对于浏览器窗口进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td></tr><tr><td align="left"><a href="https://www.runoob.com/css/css-positioning.html#position-relative">relative</a></td><td align="left">生成相对定位的元素，相对于其正常位置进行定位。因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。</td></tr><tr><td align="left"><a href="https://www.runoob.com/css/css-positioning.html#position-static">static</a></td><td align="left">默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</td></tr><tr><td align="left"><a href="https://www.runoob.com/css/css-positioning.html#position-sticky">sticky</a></td><td align="left">粘性定位，该定位基于用户滚动的位置。它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。<strong>注意:</strong> Internet Explorer, Edge 15 及更早 IE 版本不支持 sticky 定位。 Safari 需要使用 -webkit- prefix (查看以下实例)。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承 position 属性的值。</td></tr><tr><td align="left">initial</td><td align="left">设置该属性为默认值，详情查看 <a href="https://www.runoob.com/cssref/css-initial.html">CSS initial 关键字</a>。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5</title>
      <link href="2021/07/06/HTML5/"/>
      <url>2021/07/06/HTML5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="HTML5-lt-DOCTYPE-gt"><a href="#HTML5-lt-DOCTYPE-gt" class="headerlink" title="HTML5 &lt;!DOCTYPE&gt;"></a>HTML5 &lt;!DOCTYPE&gt;</h2><p><code>&lt;!doctype&gt;</code>声明必须位于 HTML5 文档中的第一行,使用非常简单:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="将-HTML5-元素定义为块元素"><a href="#将-HTML5-元素定义为块元素" class="headerlink" title="将 HTML5 元素定义为块元素"></a>将 HTML5 元素定义为块元素</h2><p>HTML5 定了 8 个新的 HTML <strong>语义（semantic）</strong> 元素。所有这些元素都是 <strong>块级</strong> 元素。</p><p>为了能让旧版本的浏览器正确显示这些元素，你可以设置 CSS 的 <strong>display</strong> 属性值为 <strong>block</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span>, <span class="selector-tag">section</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">main</span>, <span class="selector-tag">article</span>, <span class="selector-tag">figure</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="语义元素"><a href="#语义元素" class="headerlink" title="语义元素"></a>语义元素</h2><table><thead><tr><th align="left">标签</th><th>描述</th></tr></thead><tbody><tr><td align="left"><code>&lt;article&gt; </code></td><td>定义页面独立的内容区域。</td></tr><tr><td align="left"><code>&lt;aside&gt; </code></td><td>定义页面的侧边栏内容。</td></tr><tr><td align="left"><code> &lt;command&gt;</code></td><td>定义命令按钮，比如单选按钮、复选框或按钮</td></tr><tr><td align="left"><code>&lt;footer&gt;</code></td><td>定义 section 或 document 的页脚。</td></tr><tr><td align="left"><code>&lt;header&gt;</code></td><td>定义了文档的头部区域</td></tr><tr><td align="left"><code>&lt;nav&gt;   </code></td><td>定义导航链接的部分。</td></tr><tr><td align="left"><code> &lt;section&gt;</code></td><td>定义文档中的节（section、区段）。</td></tr><tr><td align="left"><code>&lt;main&gt;  </code></td><td>定义页面主体部分</td></tr></tbody></table><p><img src="https://www.runoob.com/wp-content/uploads/2013/07/html5-layout.jpg"></p><h2 id="Internet-Explorer-浏览器问题"><a href="#Internet-Explorer-浏览器问题" class="headerlink" title="Internet Explorer 浏览器问题"></a>Internet Explorer 浏览器问题</h2><p>你可以使用以上的方法来为 IE 浏览器添加 HTML5 元素，但是： Internet Explorer 8 及更早 IE 版本的浏览器不支持以上的方式。</p><p>我们可以使用 Sjoerd Visscher 创建的 “HTML5 Enabling JavaScript”, “ <strong>shiv</strong>“ 来解决该问题:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src=&quot;http://html5shiv.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>以上代码是一个注释，作用是在 IE 浏览器的版本小于 IE9 时将读取 html5.js 文件，并解析它。</p><p><strong>注意：</strong>国内用户请使用本站静态资源库（Google 资源库在国内不稳定）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src=&quot;http://cdn.static.runoob.com/libs/html5shiv/3.7/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>针对IE浏览器html5shiv 是比较好的解决方案。html5shiv主要解决HTML5提出的新的元素不被IE6-8识别，这些新元素不能作为父节点包裹子元素，并且不能应用CSS样式。</p><h2 id="HTML5-拖放（Drag-和-Drop）"><a href="#HTML5-拖放（Drag-和-Drop）" class="headerlink" title="HTML5 拖放（Drag 和 Drop）"></a>HTML5 拖放（Drag 和 Drop）</h2><p>拖放（Drag 和 drop）是 HTML5 标准的组成部分。</p><h2 id="HTML5-Video-视频"><a href="#HTML5-Video-视频" class="headerlink" title="HTML5 Video(视频)"></a>HTML5 Video(视频)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--您的浏览器不支持Video标签。--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML-事件属性"><a href="#HTML-事件属性" class="headerlink" title="HTML 事件属性"></a>HTML 事件属性</h2><h3 id="全局事件属性"><a href="#全局事件属性" class="headerlink" title="全局事件属性"></a><a href="https://www.runoob.com/tags/ref-eventattributes.html">全局事件属性</a></h3><p>HTML 4 的新特性之一是可以使 HTML 事件触发浏览器中的行为，比方说当用户点击某个 HTML 元素时启动一段 JavaScript。</p><p>如果你想学习更多关于事件属性，请访问 <a href="https://www.runoob.com/tags/js-tutorial.html">JavaScript 教程</a></p><p>下面的表格提供了标准的事件属性，可以把它们插入 HTML/XHTML 元素中，以定义事件行为。</p><p><strong>New</strong> : HTML5新增属性事件。</p><ul><li><cst>窗口事件属性</cst></li><li><cst>表单事件</cst></li><li><cst>键盘事件</cst></li><li><cst>鼠标事件</cst></li><li><cst>多媒体事件</cst></li></ul><h2 id="HTML-颜色混搭"><a href="#HTML-颜色混搭" class="headerlink" title="HTML 颜色混搭"></a><a href="https://www.runoob.com/tags/colors-mixer.html">HTML 颜色混搭</a></h2><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 外部样式引入 最大范围640px --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">herf</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;only screen and (max-width:640px)&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--嵌套引入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="comment">/*最小*/</span></span></span><br><span class="line"><span class="css">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">640px</span>)&#123;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="布局思想"><a href="#布局思想" class="headerlink" title="布局思想"></a>布局思想</h3><blockquote><p>一开始需要先规划页面部分，对页面各个部分进行适配</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3 @media 查询</title>
      <link href="2021/07/03/CSS_@media/"/>
      <url>2021/07/03/CSS_@media/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>如果文档宽度小于 300 像素则修改背景颜色(background-color):</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">300px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>:lightblue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义和使用"><a href="#定义和使用" class="headerlink" title="定义和使用"></a>定义和使用</h2><p>使用 @media 查询，你可以针对不同的媒体类型定义不同的样式。</p><p>@media 可以针对不同的屏幕尺寸设置不同的样式，特别是如果你需要设置设计响应式的页面，@media 是非常有用的。</p><p>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。</p><h2 id="CSS-语法"><a href="#CSS-语法" class="headerlink" title="CSS 语法"></a>CSS 语法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> mediatype <span class="keyword">and</span>|<span class="keyword">not</span>|<span class="keyword">only</span> (media feature) &#123;</span><br><span class="line">    CSS-<span class="selector-tag">Code</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以针对不同的媒体使用不同 <em>stylesheets</em> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;mediatype and|not|only (media feature)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystylesheet.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="媒体类型"><a href="#媒体类型" class="headerlink" title="媒体类型"></a>媒体类型</h2><p><img src="https://gitee.com/lovehuating/image/raw/master/20210703224554.png"></p><h2 id="媒体功能"><a href="#媒体功能" class="headerlink" title="媒体功能"></a>媒体功能</h2><p><img src="https://gitee.com/lovehuating/image/raw/master/20210703224650.png"></p><p><img src="https://gitee.com/lovehuating/image/raw/master/20210703224805.png"></p><h2 id="更多实例"><a href="#更多实例" class="headerlink" title="更多实例"></a>更多实例</h2><p>使用 @media 查询来制作响应式设计：兼容PC端，平板端，手机端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--首先要在HTML的头中写上以下几行代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/media.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--[if lt IE 9]--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://oss.maxcdn.com/lib/html5shiv/3.7.0/html5shiv.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  不完整…………</span><br><span class="line"><span class="comment">&lt;!--![endif]--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 屏幕大于1200px (大屏幕电脑) */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1200px</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 屏幕在1024px-1199之间 (中屏幕电脑) */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1024px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1199px</span>)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 屏幕在768px-1023px之间 (小屏幕) */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1023px</span>)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 屏幕在480px-768px之间 (主要是手机屏幕样式) */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">480px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>)&#123;</span><br><span class="line">  <span class="comment">/* 在屏幕768px以下 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> media </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件</title>
      <link href="2021/06/29/Bootstrap_Components/"/>
      <url>2021/06/29/Bootstrap_Components/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> Bootstrap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap 实例</title>
      <link href="2021/06/29/Bootstrap_Example/"/>
      <url>2021/06/29/Bootstrap_Example/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="导航条"><a href="#导航条" class="headerlink" title="导航条"></a>导航条</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-inverse navbar-fixed-top&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle collapsed&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">data-target</span>=<span class="string">&quot;#navbar&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;navbar&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Bootstrap theme<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;navbar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-collapse collapse&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span>Dropdown </span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-header&quot;</span>&gt;</span>Nav header<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>One more separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这是bootstrap主题导航条，是响应式布局。当在手机上展现如下图所示</p></blockquote><p><img src="https://gitee.com/lovehuating/image/raw/master/20210629211332.png"></p><p>这是一个可点击的小按钮，组成元素如下。在使用Bootstrap组件需要添加<code>bootstrap.js &amp;&amp; Jquery.js</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle collapsed&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">data-target</span>=<span class="string">&quot;#navbar&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;navbar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="comment">&lt;!--图标是一条横线--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>data-target=&quot;#navbar&quot;</code> 指向需要展出的导航</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加id=&quot;navbar&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;navbar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-collapse collapse&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span>…………</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Bootstrap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全局CSS样式</title>
      <link href="2021/06/28/Global_CSS_Styles/"/>
      <url>2021/06/28/Global_CSS_Styles/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>深入了解 Bootstrap 底层结构的关键部分，包括我们让 web 开发变得更好、更快、更强壮的最佳实践。</p><h3 id="HTML5-文档类型"><a href="#HTML5-文档类型" class="headerlink" title="HTML5 文档类型"></a>HTML5 文档类型</h3><p>Bootstrap 使用到的某些 HTML 元素和 CSS 属性需要将页面设置为 HTML5 文档类型。在你项目中的每个页面都要参照下面的格式进行设置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="移动设备优先"><a href="#移动设备优先" class="headerlink" title="移动设备优先"></a>移动设备优先</h3><p>在 Bootstrap 2 中，我们对框架中的某些关键部分增加了对移动设备友好的样式。而在 Bootstrap 3 中，我们重写了整个框架，使其一开始就是对移动设备友好的。这次不是简单的增加一些可选的针对移动设备的样式，而是直接融合进了框架的内核中。也就是说，<strong>Bootstrap 是移动设备优先的</strong>。针对移动设备的样式融合进了框架的每个角落，而不是增加一个额外的文件。</p><p>为了确保适当的绘制和触屏缩放，需要在 <code>&lt;head&gt;</code> 之中<strong>添加 viewport 元数据标签</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在移动设备浏览器上，通过为视口（viewport）设置 meta 属性为 <code>user-scalable=no</code> 可以禁用其缩放（zooming）功能。这样禁用缩放功能后，用户只能滚动屏幕，就能让你的网站看上去更像原生应用的感觉。注意，这种方式我们并不推荐所有网站使用，还是要看你自己的情况而定！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="排版与链接"><a href="#排版与链接" class="headerlink" title="排版与链接"></a>排版与链接</h3><p>Bootstrap 排版、链接样式设置了基本的全局样式。分别是：</p><ul><li>为 <code>body</code> 元素设置 <code>background-color: #fff;</code></li><li>使用 <code>@font-family-base</code>、<code>@font-size-base</code> 和 <code>@line-height-base</code> 变量作为排版的基本参数</li><li>为所有链接设置了基本颜色 <code>@link-color</code> ，并且当链接处于 <code>:hover</code> 状态时才添加下划线</li></ul><p>这些样式都能在 <code>scaffolding.less</code> 文件中找到对应的源码。</p><h3 id="Normalize-css"><a href="#Normalize-css" class="headerlink" title="Normalize.css"></a>Normalize.css</h3><p>为了增强跨浏览器渲染的一致性，我们使用了 <a href="https://necolas.github.io/normalize.css/">Normalize.css</a>，这是由 <a href="https://twitter.com/necolas">Nicolas Gallagher</a> 和 <a href="https://twitter.com/jon_neal">Jonathan Neal</a> 维护的一个CSS 重置样式库。</p><h3 id="布局容器"><a href="#布局容器" class="headerlink" title="布局容器"></a>布局容器</h3><p>Bootstrap 需要为页面内容和栅格系统包裹一个 <code>.container</code> 容器。我们提供了两个作此用处的类。注意，由于 <code>padding</code> 等属性的原因，这两种 容器类不能互相嵌套。</p><p><code>.container</code> 类用于固定宽度并支持响应式布局的容器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>.container-fluid</code> 类用于 100% 宽度，占据全部视口（viewport）的容器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h2><p>Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。它包含了易于使用的<a href="https://v3.bootcss.com/css/#grid-example-basic">预定义类</a>，还有强大的<a href="https://v3.bootcss.com/css/#grid-less">mixin 用于生成更具语义的布局</a>。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。下面就介绍一下 Bootstrap 栅格系统的工作原理：</p><ul><li><p>“行（row）”必须包含在 <code>.container</code>‘ （固定宽度）或 <code>.container-fluid </code>（100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。</p></li><li><p>通过“行（row）”在水平方向创建一组“列（column）”。</p></li><li><p>你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。</p></li><li><p>类似 <code>.row </code>和 <code>.col-xs-4</code> 这种预定义的类，可以用来快速创建栅格布局。Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。</p></li><li><p>通过为“列（column）”设置 <code>padding</code> 属性，从而创建列与列之间的间隔（gutter）。通过为 <code>.row</code> 元素设置负值 margin 从而抵消掉为 <code>.container </code>元素设置的 <code>padding</code>，也就间接为“行（row）”所包含的“列（column）”抵消掉了<code>padding</code>。</p></li><li><p>负值的 margin就是下面的示例为什么是向外突出的原因。在栅格列中的内容排成一行。</p></li><li><p>栅格系统中的列是通过指定1到12的值来表示其跨越的范围。例如，三个等宽的列可以使用三个 <code>.col-xs-4</code> 来创建。</p></li><li><p>如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列。</p></li><li><p>栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 <code>.col-md-*</code> 栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何<code> .col-lg-*</code> 不存在， 也影响大屏幕设备。6</p></li></ul><p>通过研究后面的实例，可以将这些原理应用到你的代码中。</p><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p>在栅格系统中，我们在 Less 文件中使用以下媒体查询（media query）来创建关键的分界点阈值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* 超小屏幕（手机，小于 768px） */</span><br><span class="line">/* 没有任何媒体查询相关的代码，因为这在 Bootstrap 中是默认的（还记得 Bootstrap 是移动设备优先的吗？） */</span><br><span class="line"></span><br><span class="line">/* 小屏幕（平板，大于等于 768px） */</span><br><span class="line">@media (min-width: @screen-sm-min) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">/* 中等屏幕（桌面显示器，大于等于 992px） */</span><br><span class="line">@media (min-width: @screen-md-min) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">/* 大屏幕（大桌面显示器，大于等于 1200px） */</span><br><span class="line">@media (min-width: @screen-lg-min) &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>我们偶尔也会在媒体查询代码中包含 <code>max-width</code> 从而将 CSS 的影响限制在更小范围的屏幕大小之内。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@media (max-width: @screen-xs-max) &#123; ... &#125;</span><br><span class="line">@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) &#123; ... &#125;</span><br><span class="line">@media (min-width: @screen-md-min) and (max-width: @screen-md-max) &#123; ... &#125;</span><br><span class="line">@media (min-width: @screen-lg-min) &#123; ... &#125;</span><br></pre></td></tr></table></figure><h3 id="栅格参数"><a href="#栅格参数" class="headerlink" title="栅格参数"></a>栅格参数</h3><p>通过下表可以详细查看 Bootstrap 的栅格系统是如何在多种屏幕设备上工作的</p><table><thead><tr><th align="left"></th><th align="left">超小屏幕 手机 (&lt;768px)</th><th align="left">小屏幕 平板 (≥768px)</th><th align="left">中等屏幕 桌面显示器 (≥992px)</th><th align="left">大屏幕 大桌面显示器 (≥1200px)</th></tr></thead><tbody><tr><td align="left">栅格系统行为</td><td align="left">总是水平排列</td><td align="left">开始是堆叠在一起的，当大于这些阈值时将变为水平排列C</td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><code>.container</code> 最大宽度</td><td align="left">None （自动）</td><td align="left">750px</td><td align="left">970px</td><td align="left">1170px</td></tr><tr><td align="left">类前缀</td><td align="left"><code>.col-xs-</code></td><td align="left"><code>.col-sm-</code></td><td align="left"><code>.col-md-</code></td><td align="left"><code>.col-lg-</code></td></tr><tr><td align="left">列（column）数</td><td align="left">12</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">最大列（column）宽</td><td align="left">自动</td><td align="left">~62px</td><td align="left">~81px</td><td align="left">~97px</td></tr><tr><td align="left">槽（gutter）宽</td><td align="left">30px （每列左右均有 15px）</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">可嵌套</td><td align="left">是</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">偏移（Offsets）</td><td align="left">是</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">列排序</td><td align="left">是</td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h3 id="嵌套列"><a href="#嵌套列" class="headerlink" title="嵌套列"></a>嵌套列</h3><p>为了使用内置的栅格系统将内容再次嵌套，可以通过添加一个新的 <code>.row</code> 元素和一系列 <code>.col-sm-*</code> 元素到已经存在的 <code>.col-sm-*</code> 元素内。被嵌套的行（row）所包含的列（column）的个数不能超过12（其实，没有要求你必须占满12列）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-9&quot;</span>&gt;</span></span><br><span class="line">    Level 1: .col-sm-9</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-8 col-sm-6&quot;</span>&gt;</span></span><br><span class="line">        Level 2: .col-xs-8 .col-sm-6</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-4 col-sm-6&quot;</span>&gt;</span></span><br><span class="line">        Level 2: .col-xs-4 .col-sm-6</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列排序"><a href="#列排序" class="headerlink" title="列排序"></a>列排序</h3><p>通过使用 <code>.col-md-push-*</code> 和 <code>.col-md-pull-*</code> 类就可以很容易的改变列（column）的顺序。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--push表示向右移动，pull表示向左移动--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9 col-md-push-3&quot;</span>&gt;</span>.col-md-9 .col-md-push-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-md-pull-9&quot;</span>&gt;</span>.col-md-3 .col-md-pull-9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>HTML 中的所有标题标签，<code>&lt;h1&gt;</code> 到 <code>&lt;h6&gt;</code> 均可使用。另外，还提供了 <code>.h1</code> 到 <code>.h6</code> 类，为的是给内联（inline）属性的文本赋予标题的样式</p><p>在标题内还可以包含 <code>&lt;small&gt;</code> 标签或赋予 <code>.small</code> 类的元素，可以用来标记副标题。</p><h3 id="页面主体"><a href="#页面主体" class="headerlink" title="页面主体"></a>页面主体</h3><p>Bootstrap 将全局 <code>font-size</code> 设置为 <strong>14px</strong>，<code>line-height</code> 设置为 <strong>1.428</strong>。这些属性直接赋予 <code>&lt;body&gt;</code> 元素和所有段落元素。另外，<code>&lt;p&gt;</code> （段落）元素还被设置了等于 1/2 行高（即 10px）的底部外边距（margin）。</p><h3 id="被删除的文本"><a href="#被删除的文本" class="headerlink" title="被删除的文本"></a>被删除的文本</h3><p>对于被删除的文本使用 <code>&lt;del&gt;</code> 标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>This line of text is meant to be treated as deleted text.<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h3><p>额外插入的文本使用 <code>&lt;ins&gt;</code> 标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>This line of text is meant to be treated as an addition to the document.<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p>通过文本对齐类，可以简单方便的将文字重新对齐。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-left&quot;</span>&gt;</span>Left aligned text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>Center aligned text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-right&quot;</span>&gt;</span>Right aligned text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-justify&quot;</span>&gt;</span>Justified text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-nowrap&quot;</span>&gt;</span>No wrap text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="改变大小写"><a href="#改变大小写" class="headerlink" title="改变大小写"></a>改变大小写</h3><p>通过这几个类可以改变文本的大小写。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-lowercase&quot;</span>&gt;</span>Lowercased text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> // 全部小写</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-uppercase&quot;</span>&gt;</span>Uppercased text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> // 全部大写</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-capitalize&quot;</span>&gt;</span>Capitalized text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> // 首字母大写，其它不变</span><br></pre></td></tr></table></figure><h3 id="缩略语"><a href="#缩略语" class="headerlink" title="缩略语"></a>缩略语</h3><p>当鼠标悬停在缩写和缩写词上时就会显示完整内容，Bootstrap 实现了对 HTML 的 <code>&lt;abbr&gt;</code> 元素的增强样式。缩略语元素带有 <code>title</code> 属性，外观表现为带有较浅的虚线框，鼠标移至上面时会变成带有“问号”的指针。如想看完整的内容可把鼠标悬停在缩略语上（对使用辅助技术的用户也可见）, 但需要包含 title 属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;HyperText Markup Language&quot;</span> <span class="attr">class</span>=<span class="string">&quot;initialism&quot;</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></span><br></pre></td></tr></table></figure><p><abbr title="HyperText Markup Language" class="initialism">HTML</abbr></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="无样式列表"><a href="#无样式列表" class="headerlink" title="无样式列表"></a>无样式列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-unstyled&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="内联列表"><a href="#内联列表" class="headerlink" title="内联列表"></a>内联列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-inline&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Hello World</code></p><p><kbd>Hello World</kbd></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>通过 <code>&lt;var&gt;</code> 标签标记变量。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">var</span>&gt;</span>y<span class="tag">&lt;/<span class="name">var</span>&gt;</span> = <span class="tag">&lt;<span class="name">var</span>&gt;</span>m<span class="tag">&lt;/<span class="name">var</span>&gt;</span><span class="tag">&lt;<span class="name">var</span>&gt;</span>x<span class="tag">&lt;/<span class="name">var</span>&gt;</span> + <span class="tag">&lt;<span class="name">var</span>&gt;</span>b<span class="tag">&lt;/<span class="name">var</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="程序输出"><a href="#程序输出" class="headerlink" title="程序输出"></a>程序输出</h3><p>通过 <code>&lt;samp&gt;</code> 标签来标记程序输出的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">samp</span>&gt;</span>This text is meant to be treated as sample output from a computer program.<span class="tag">&lt;/<span class="name">samp</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>First Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Last Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>User Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Mark<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Otto<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>@mdo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Jacob<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Thornton<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>@fat<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Larry<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>the Bird<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>@twitter<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="条纹状表格"><a href="#条纹状表格" class="headerlink" title="条纹状表格"></a>条纹状表格</h3><p>通过 <code>.table-striped</code> 类可以给 <code>&lt;tbody&gt;</code> 之内的每一行增加斑马条纹样式。</p><h3 id="带边框的表格"><a href="#带边框的表格" class="headerlink" title="带边框的表格"></a>带边框的表格</h3><p>添加 <code>.table-bordered</code> 类为表格和其中的每个单元格增加边框。</p><h3 id="鼠标悬停"><a href="#鼠标悬停" class="headerlink" title="鼠标悬停"></a>鼠标悬停</h3><p>通过添加 <code>.table-hover</code> 类可以让 <code>&lt;tbody&gt;</code> 中的每一行对鼠标悬停状态作出响应。</p><h3 id="紧缩表格"><a href="#紧缩表格" class="headerlink" title="紧缩表格"></a>紧缩表格</h3><p>通过添加 <code>.table-condensed</code> 类可以让表格更加紧凑，单元格中的内补（padding）均会减半。</p><h3 id="状态类"><a href="#状态类" class="headerlink" title="状态类"></a>状态类</h3><p>通过这些状态类可以为行或单元格设置颜色。</p><table><thead><tr><th align="left">Class</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>.active</code></td><td align="left">鼠标悬停在行或单元格上时所设置的颜色</td></tr><tr><td align="left"><code>.success</code></td><td align="left">标识成功或积极的动作</td></tr><tr><td align="left"><code>.info</code></td><td align="left">标识普通的提示信息或动作</td></tr><tr><td align="left"><code>.warning</code></td><td align="left">标识警告或需要用户注意</td></tr><tr><td align="left"><code>.danger</code></td><td align="left">标识危险或潜在的带来负面影响的动作</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- On rows --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;success&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- On cells (`td` or `th`) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;success&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="基本实例"><a href="#基本实例" class="headerlink" title="基本实例"></a>基本实例</h3><p>单独的表单控件会被自动赋予一些全局样式。所有设置了 <code>.form-control</code> 类的 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code> 元素都将被默认设置宽度属性为 <code>width: 100%;</code>。 将 <code>label</code> 元素和前面提到的控件包裹在 <code>.form-group</code> 中可以获得最好的排列。</p><p><img src="https://gitee.com/lovehuating/image/raw/master/20210629135339.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Email&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputPassword1&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputPassword1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span>File input<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;help-block&quot;</span>&gt;</span>Example block-level help text here.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> Check me out</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--将label和input放进form-group组，即使不需要label组件，也要添加，可以使用类.sr-only隐藏--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--label中for属性是指向input的id，当点击label同样激活输入框--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Email&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内联表单"><a href="#内联表单" class="headerlink" title="内联表单"></a>内联表单</h3><p>为 <code>&lt;form&gt;</code> 元素添加 <code>.form-inline</code> 类可使其内容左对齐并且表现为 <code>inline-block</code> 级别的控件。<strong>只适用于视口（viewport）至少在 768px 宽度时（视口宽度再小的话就会使表单折叠）。</strong></p><h3 id="水平排列的表单"><a href="#水平排列的表单" class="headerlink" title="水平排列的表单"></a>水平排列的表单</h3><p>通过为表单添加 <code>.form-horizontal</code> 类，并联合使用 Bootstrap 预置的栅格类，可以将 <code>label</code> 标签和控件组水平并排布局。这样做将改变 <code>.form-group</code> 的行为，使其表现为栅格系统中的行（row），因此就无需再额外添加 <code>.row</code> 了。</p><p><img src="https://gitee.com/lovehuating/image/raw/master/20210629140028.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;inputEmail3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputEmail3&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Email&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;inputPassword3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputPassword3&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> Remember me</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p>虽然按钮类可以应用到 <code>&lt;a&gt;</code> 和 <code>&lt;button&gt;</code> 元素上，但是，导航和导航条组件只支持 <code>&lt;button&gt;</code> 元素。</p><p>如果 <code>&lt;a&gt;</code> 元素被作为按钮使用 – 并用于在当前页面触发某些功能 – 而不是用于链接其他页面或链接当前页面中的其他部分，那么，务必为其设置 <code>role=&quot;button&quot;</code> 属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Standard button --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>（默认样式）Default<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Provides extra visual weight and identifies the primary action in a set of buttons --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>（首选项）Primary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Indicates a successful or positive action --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>（成功）Success<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Contextual button for informational alert messages --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span>（一般信息）Info<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Indicates caution should be taken with this action --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-warning&quot;</span>&gt;</span>（警告）Warning<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Indicates a dangerous or potentially negative action --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>（危险）Danger<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Deemphasize a button by making it look like a link while maintaining button behavior --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-link&quot;</span>&gt;</span>（链接）Link<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h3><p>需要让按钮具有不同尺寸吗？使用 <code>.btn-lg</code>、<code>.btn-sm</code> 或 <code>.btn-xs</code> 就可以获得不同尺寸的按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg&quot;</span>&gt;</span>（大按钮）Large button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default btn-lg&quot;</span>&gt;</span>（大按钮）Large button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>（默认尺寸）Default button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>（默认尺寸）Default button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-sm&quot;</span>&gt;</span>（小按钮）Small button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default btn-sm&quot;</span>&gt;</span>（小按钮）Small button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-xs&quot;</span>&gt;</span>（超小尺寸）Extra small button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default btn-xs&quot;</span>&gt;</span>（超小尺寸）Extra small button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h3><p>在 Bootstrap 版本 3 中，通过为图片添加 <code>.img-responsive</code> 类可以让图片支持响应式布局。其实质是为图片设置了 <code>max-width: 100%;</code>、 <code>height: auto;</code> 和 <code>display: block;</code> 属性，从而让图片在其父元素中更好的缩放。</p><p>如果需要让使用了 <code>.img-responsive</code> 类的图片水平居中，请使用 <code>.center-block</code> 类，不要用 <code>.text-center</code>。</p><h3 id="图片形状"><a href="#图片形状" class="headerlink" title="图片形状"></a>图片形状</h3><p>通过为 <code>&lt;img&gt;</code> 元素添加以下相应的类，可以让图片呈现不同的形状。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-rounded&quot;</span>&gt;</span> //正方形</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-circle&quot;</span>&gt;</span> //圆形</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-thumbnail&quot;</span>&gt;</span> // 正方形带边框</span><br></pre></td></tr></table></figure><h2 id="辅助类"><a href="#辅助类" class="headerlink" title="辅助类"></a>辅助类</h2><h3 id="情境文本颜色"><a href="#情境文本颜色" class="headerlink" title="情境文本颜色"></a>情境文本颜色</h3><p>通过颜色来展示意图，Bootstrap 提供了一组工具类。这些类可以应用于链接，并且在鼠标经过时颜色可以还可以加深，就像默认的链接一样。</p><p><img src="C:\Users\cst20\AppData\Roaming\Typora\typora-user-images\image-20210629141319346.png" alt="image-20210629141319346"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-primary&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-success&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-info&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-warning&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-danger&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="情境背景色"><a href="#情境背景色" class="headerlink" title="情境背景色"></a>情境背景色</h3><p>和情境文本颜色类一样，使用任意情境背景色类就可以设置元素的背景。链接组件在鼠标经过时颜色会加深，就像上面所讲的情境文本颜色类一样。</p><p><img src="https://gitee.com/lovehuating/image/raw/master/20210629141353.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-primary&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-success&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-info&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-warning&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-danger&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关闭按钮"><a href="#关闭按钮" class="headerlink" title="关闭按钮"></a>关闭按钮</h3><p>通过使用一个象征关闭的图标，可以让模态框和警告框消失。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三角符号"><a href="#三角符号" class="headerlink" title="三角符号"></a>三角符号</h3><p>通过使用三角符号可以指示某个元素具有下拉菜单的功能。注意，<a href="https://v3.bootcss.com/components/#btn-dropdowns-dropup">向上弹出式菜单</a>中的三角符号是反方向的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用-Less"><a href="#使用-Less" class="headerlink" title="使用 Less"></a>使用 Less</h2><p>Bootstrap 的 CSS 文件是通过 Less 源码编译而来的。Less 是一门预处理语言，支持变量、mixin、函数等额外功能。对于希望使用 Less 源码而非编译而来的 CSS 文件的用户，Bootstrap 框架中包含的大量变量、mixin 将非常有价值</p><h3 id="编译-Bootstrap"><a href="#编译-Bootstrap" class="headerlink" title="编译 Bootstrap"></a>编译 Bootstrap</h3><p>可以通过两种方式使用 Bootstrap ：使用编译后的 CSS 文件或者使用 Less 源码文件。若要编译 Less 文件，<a href="https://v3.bootcss.com/getting-started/#grunt">请参考“入门”章节的内容</a>以了解如何设置开发环境并运行必须的编译指令。</p><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>Bootstrap 使用了两种颜色模式：灰度颜色和语义颜色。灰度颜色用于快速获取常用的黑色色调；语义颜色包含了各种赋予语义的颜色值</p><p><img src="https://gitee.com/lovehuating/image/raw/master/20210629142149.png"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@gray-darker</span>:  lighten(<span class="number">#000</span>, <span class="number">13.5%</span>); <span class="comment">// #222</span></span><br><span class="line"><span class="keyword">@gray-dark</span>:    lighten(<span class="number">#000</span>, <span class="number">20%</span>);   <span class="comment">// #333</span></span><br><span class="line"><span class="keyword">@gray</span>:         lighten(<span class="number">#000</span>, <span class="number">33.5%</span>); <span class="comment">// #555</span></span><br><span class="line"><span class="keyword">@gray-light</span>:   lighten(<span class="number">#000</span>, <span class="number">46.7%</span>); <span class="comment">// #777</span></span><br><span class="line"><span class="keyword">@gray-lighter</span>: lighten(<span class="number">#000</span>, <span class="number">93.5%</span>); <span class="comment">// #eee</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lovehuating/image/raw/master/20210629142210.png"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@brand-primary</span>: darken(<span class="number">#428bca</span>, <span class="number">6.5%</span>); <span class="comment">// #337ab7</span></span><br><span class="line"><span class="keyword">@brand-success</span>: <span class="number">#5cb85c</span>;</span><br><span class="line"><span class="keyword">@brand-info</span>:    <span class="number">#5bc0de</span>;</span><br><span class="line"><span class="keyword">@brand-warning</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line"><span class="keyword">@brand-danger</span>:  <span class="number">#d9534f</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Bootstrap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML与CSS的哪些事</title>
      <link href="2021/06/21/websomething/"/>
      <url>2021/06/21/websomething/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="HTML行内元素、块状元素、行内块状元素的区别"><a href="#HTML行内元素、块状元素、行内块状元素的区别" class="headerlink" title="HTML行内元素、块状元素、行内块状元素的区别"></a>HTML行内元素、块状元素、行内块状元素的区别</h2><ol><li>行内元素  <code>display:inline;</code></li><li>块级元素 <code>display:block;</code></li><li>行内块级元素 <code>display:inline-block</code></li></ol><p><cst>行内元素</cst>：与其它行内元素并排，不能设置宽高，默认的宽度就是文字的宽度</p><p><cst>块级元素</cst>：单独占一行，能设置宽高，默认宽度承载父级100%</p><p><cst>行内块级元素</cst>：结合了行内元素和块级元素，可以设置宽高，且不单独霸占一行</p><h2 id="CSS3选择器-属性匹配选择器"><a href="#CSS3选择器-属性匹配选择器" class="headerlink" title="CSS3选择器 || 属性匹配选择器"></a>CSS3选择器 || 属性匹配选择器</h2><h3 id="全匹配"><a href="#全匹配" class="headerlink" title="全匹配"></a>全匹配</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;text&#x27;</span>]</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span> <span class="comment">&lt;!--只会选中type=&quot;text&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="开头匹配"><a href="#开头匹配" class="headerlink" title="开头匹配"></a>开头匹配</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class=<span class="string">&quot;he&quot;</span>]</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结尾匹配"><a href="#结尾匹配" class="headerlink" title="结尾匹配"></a>结尾匹配</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class $=<span class="string">&quot;lo&quot;</span>]</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="包含匹配"><a href="#包含匹配" class="headerlink" title="包含匹配"></a>包含匹配</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class *=<span class="string">&quot;h&quot;</span>]</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS3选择器-child"><a href="#CSS3选择器-child" class="headerlink" title="CSS3选择器 || child"></a>CSS3选择器 || child</h2><h3 id="first-child"><a href="#first-child" class="headerlink" title="first-child"></a>first-child</h3><p>表示选择列表中的第一个li标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child&#123;<span class="attribute">background</span>:<span class="number">#090</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="last-child"><a href="#last-child" class="headerlink" title="last-child"></a>last-child</h3><p>表示选择列表中的最后一个li标签</p><h3 id="nth-child-3"><a href="#nth-child-3" class="headerlink" title="nth-child(3)"></a>nth-child(3)</h3><p>表示选择列表中的第3个标签</p><h3 id="nth-child-2n"><a href="#nth-child-2n" class="headerlink" title="nth-child(2n)"></a>nth-child(2n)</h3><p>这个表示选择列表中的偶数标签，即选择 第2、第4、第6…… 标签。</p><h3 id="nth-child-2n-1"><a href="#nth-child-2n-1" class="headerlink" title="nth-child(2n-1)"></a>nth-child(2n-1)</h3><p>这个表示选择列表中的奇数标签，即选择 第1、第3、第5、第7……标签。</p><h3 id="nth-child-n-3"><a href="#nth-child-n-3" class="headerlink" title="nth-child(n+3)"></a>nth-child(n+3)</h3><p>这个表示选择列表中的标签从第3个开始到最后。</p><h3 id="nth-child-n-3-1"><a href="#nth-child-n-3-1" class="headerlink" title="nth-child(-n+3)"></a>nth-child(-n+3)</h3><p>这个表示选择列表中的标签从0到3，即小于3的标签。</p><h3 id="nth-last-child-3"><a href="#nth-last-child-3" class="headerlink" title="nth-last-child(3)"></a>nth-last-child(3)</h3><p>这个表示选择列表中的倒数第3个标签。</p><h2 id="DIV点击跳转"><a href="#DIV点击跳转" class="headerlink" title="DIV点击跳转"></a>DIV点击跳转</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;https://www.baidu.com/&#x27;)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;cursor: pointer;&quot;</span>&gt;</span></span><br><span class="line">  点击我跳转百度</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div onclick="window.open('https://www.baidu.com/')" style="cursor: pointer;" class="text-center">  点击我跳转百度&nbsp;<span class="far fa-hand-point-right"></span></div><h2 id="单行省略"><a href="#单行省略" class="headerlink" title="单行省略"></a>单行省略</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br></pre></td></tr></table></figure><h2 id="多行省略"><a href="#多行省略" class="headerlink" title="多行省略"></a>多行省略</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis; <span class="comment">/* 省略号*/</span></span><br><span class="line"><span class="attribute">display</span>: -webkit-box; <span class="comment">/** 将对象作为伸缩盒子模型显示 **/</span></span><br><span class="line">-webkit-box-orient: vertical; <span class="comment">/** 设置或检索伸缩盒对象的子元素的排列方式 **/</span></span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>; <span class="comment">/** 显示的行数 **/</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden; <span class="comment">/** 隐藏超出的内容 **/</span></span><br></pre></td></tr></table></figure><h2 id="v-show-显示隐藏过渡效果"><a href="#v-show-显示隐藏过渡效果" class="headerlink" title="v-show 显示隐藏过渡效果"></a>v-show 显示隐藏过渡效果</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;slide-fade&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;sl_top&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isTop&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 因为利用滚动条回到顶部，不需要设置herf=&#x27;#&#x27;  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span> <span class="attr">title</span>=<span class="string">&quot;回到顶部&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleTop()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-plane&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.slide-fade-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.2s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.2s</span> <span class="built_in">cubic-bezier</span>(<span class="number">1</span>, <span class="number">0.5</span>, <span class="number">0.8</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-fade-enter</span>,</span><br><span class="line"><span class="selector-class">.slide-fade-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">5px</span>);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vue-监听滚动条事件"><a href="#vue-监听滚动条事件" class="headerlink" title="vue 监听滚动条事件"></a>vue 监听滚动条事件</h2><blockquote><p>使用vue监听滚动条事件，来让右下角回顶部按钮显示隐藏。当点击回到顶部，将利用延时器缓缓达到顶部，形成视觉效果。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isTop</span>: <span class="literal">false</span>, <span class="comment">// 点击回到顶部的显隐</span></span><br><span class="line">      <span class="attr">scroll</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, <span class="built_in">this</span>.menu)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="function"><span class="title">menu</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.scroll = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">      <span class="comment">// 当距离顶部大于等于300，显示回到顶部按钮，否则隐藏</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.scroll &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">          <span class="built_in">this</span>.isTop = <span class="literal">true</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.isTop = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">// 点击回到顶部按钮事件</span></span><br><span class="line">     <span class="function"><span class="title">handleTop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">         <span class="keyword">let</span> top = <span class="built_in">this</span>.scroll</span><br><span class="line">         <span class="keyword">const</span> timeTop = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">             <span class="built_in">document</span>.body.scrollTop = <span class="built_in">document</span>.documentElement.scrollTop = top -= <span class="number">50</span></span><br><span class="line">             <span class="keyword">if</span> (top &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                 <span class="built_in">clearInterval</span>(timeTop)</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;, <span class="number">10</span>)</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="隐藏到显示的过渡效果"><a href="#隐藏到显示的过渡效果" class="headerlink" title="隐藏到显示的过渡效果"></a>隐藏到显示的过渡效果</h2><p><code>display</code> 属性不支持 <code>transition</code> 过渡效果。使用 透明度 <code>opacity</code> 配合 <code>visibility</code>。<code>visibility</code>是没有过渡动画的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.copyBtn</span>&#123;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.copyBtn</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">visibility</span>:visible;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line"><span class="attribute">transition</span>: all <span class="number">1s</span> linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="点击复制内容-更改div内容"><a href="#点击复制内容-更改div内容" class="headerlink" title="点击复制内容 || 更改div内容"></a>点击复制内容 || 更改div内容</h2><p><code>input</code>输入框的样式是必须存在的，自有输入框才能使用<code>select</code>，可以设置样式，让<code>input</code>消失</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;copy_content&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;copyBtn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;copy-content1&quot;</span>  <span class="attr">onClick</span>=<span class="string">&quot;copy(this)&quot;</span> <span class="attr">data</span>=<span class="string">&quot;icon-home&quot;</span>&gt;</span>copy<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">ElementObj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clickContent = ElementObj.getAttribute(<span class="string">&#x27;data&#x27;</span>);  <span class="comment">//获取要复制的值</span></span><br><span class="line">    <span class="keyword">var</span> id = ElementObj.getAttribute(<span class="string">&#x27;id&#x27;</span>); <span class="comment">// 获取外面的id值</span></span><br><span class="line">    <span class="keyword">var</span> inputElement =  <span class="built_in">document</span>.getElementById(<span class="string">&quot;copy_content&quot;</span>);  <span class="comment">//获取要赋值的input的元素</span></span><br><span class="line">    inputElement.value = clickContent;  <span class="comment">//给input框赋值   </span></span><br><span class="line">    inputElement.select();<span class="comment">//选中input框的内容</span></span><br><span class="line">    <span class="built_in">document</span>.execCommand(<span class="string">&quot;Copy&quot;</span>);<span class="comment">// 执行浏览器复制命令</span></span><br><span class="line">  </span><br><span class="line">    <span class="built_in">document</span>.getElementById(id).innerHTML = <span class="string">&#x27;已复制&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="背景图片属性实例"><a href="#背景图片属性实例" class="headerlink" title="背景图片属性实例"></a>背景图片属性实例</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href *= <span class="string">&quot;weixin.jpg&quot;</span>]</span> <span class="selector-tag">i</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>; </span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">visibility</span>:hidden;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">142px</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: -<span class="number">80px</span> <span class="meta">!important</span>;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">120px</span>;</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line"><span class="attribute">background-position</span>:center; </span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//wechat_aside.jpg&#x27;</span>);</span><br><span class="line"><span class="attribute">background-size</span>: auto <span class="number">140px</span>;</span><br><span class="line"><span class="attribute">background-color</span>:<span class="built_in">rgb</span>(<span class="number">252</span> <span class="number">252</span> <span class="number">252</span>);</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">40px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>) inset;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图片穿透"><a href="#图片穿透" class="headerlink" title="图片穿透"></a>图片穿透</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">pointerEvents:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="鼠标跟随天使代码"><a href="#鼠标跟随天使代码" class="headerlink" title="鼠标跟随天使代码"></a>鼠标跟随天使代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mouseRouser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span><br><span class="line">  <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">  img.style.position = <span class="string">&quot;absolute&quot;</span>;</span><br><span class="line">  img.style.pointerEvents = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  img.src = <span class="string">&quot;https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//angel.gif&quot;</span>;</span><br><span class="line">  body.appendChild(img);</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">&quot;mousemove&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = e.pageX;</span><br><span class="line">    <span class="keyword">var</span> y = e.pageY;</span><br><span class="line">    img.style.top = y + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    img.style.left = x + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">mouseRouser();</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决终端系统禁用脚本</title>
      <link href="2021/06/20/Question1/"/>
      <url>2021/06/20/Question1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="解决终端禁止运行脚本"><a href="#解决终端禁止运行脚本" class="headerlink" title="解决终端禁止运行脚本"></a>解决终端禁止运行脚本</h2><p>出现这个问题的原因可能是：PowerShell执行策略的问题</p><h2 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h2><p><img src="https://gitee.com/lovehuating/image/raw/master/20210620132553.png"></p><ol><li>管理员打开运行VSCode</li><li>在终端执行<code>get-ExecutionPolicy</code>，显示Restricted，表示状态是禁止的</li><li>执行<code>set-ExecutionPolicy RemoteSigned</code>，如果有以下报错</li></ol><p><img src="https://gitee.com/lovehuating/image/raw/master/20210620132653.png"></p><ol start="4"><li>执行<code>Set-ExecutionPolicy -Scope CurrentUser</code>，输入参数<code>RemoteSigned</code></li></ol><p><img src="https://gitee.com/lovehuating/image/raw/master/20210620132841.png"></p><ol start="5"><li>此时再执行<code>get-ExecutionPolicy</code>，显示RemoteSigned，则表示状态解禁，可以运行</li></ol><h2 id="HBuilderX"><a href="#HBuilderX" class="headerlink" title="HBuilderX"></a>HBuilderX</h2>]]></content>
      
      
      <categories>
          
          <category> Question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Question </tag>
            
            <tag> VSCode </tag>
            
            <tag> HBuilder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue路由的使用</title>
      <link href="2021/06/20/routerlazy/"/>
      <url>2021/06/20/routerlazy/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="动态路由的使用"><a href="#动态路由的使用" class="headerlink" title="动态路由的使用"></a>动态路由的使用</h2><h3 id="动态路由是什么"><a href="#动态路由是什么" class="headerlink" title="动态路由是什么?"></a>动态路由是什么?</h3><p>一般我们使用vue-router配置路由时，都是直接配置固定的路径<br>而动态路由是我们可以在 vue-router 的路由路径中使用“动态路径参数”<br>让路径不再是固定的。</p><h3 id="动态路由的使用场景是什么？"><a href="#动态路由的使用场景是什么？" class="headerlink" title="动态路由的使用场景是什么？"></a>动态路由的使用场景是什么？</h3><p>比如在写一个商品详情页面的时候，我们的页面结构都一样，只是渲染的数据不同而已，这时候就可以根据商品的不同id去设置动态路由，只需要写一个组件，就可以把每个商品的商品详情映射到同一个组件上去。</p><h3 id="路由切换页面"><a href="#路由切换页面" class="headerlink" title="路由切换页面"></a>路由切换页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>/&gt;</span> </span><br></pre></td></tr></table></figure><ol><li><code>&lt;router-link</code> 默认是<code>&lt;a&gt;</code>标签，添加<code> tag=&quot;button&quot;</code>属性就变成了按钮组件</li><li><code>to=&quot;/home&quot;</code> 规范路径写法</li><li><code>&lt;router-view/&gt; </code> 渲染路由页面</li></ol><br><p><code>router&gt;index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../views/About.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">&#x27;../components/HelloWorld.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">&#x27;../components/News.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">// 默认显示的路由页面about，path写法可以 path:&#x27;&#x27;,或者 path:&#x27;/&#x27;</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">&#x27;/about&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: Home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: About</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="comment">// 路由的模式，这样有历史记录可以返回，replace就是替换不能返回</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">    <span class="attr">base</span>: process.env.BASE_URL,</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h3 id="体验使用参数"><a href="#体验使用参数" class="headerlink" title="体验使用参数"></a>体验使用参数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">&quot;&#x27;/home/news/&#x27;+userId&quot;</span>&gt;</span>user<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home/hello&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$route.params.userId&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code> v-bind:to=&quot;&#39;/home/news/&#39;+userId&quot;</code> 拼接userId参数，注意单引号<code>&#39;/home/news/&#39;</code></p><p><code>&#123;&#123;$route.params.userId&#125;&#125;</code> 通过<code>$route</code>可以拿到当前渲染的路由页面的userID参数，来渲染不同用户的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绑定方法，进行路由切换</span></span><br><span class="line"><span class="function"><span class="title">routerWeb</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.$router.push(<span class="string">&quot;/home/&quot;</span>+e.id+<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打包文件的解析"><a href="#打包文件的解析" class="headerlink" title="打包文件的解析"></a>打包文件的解析</h2><p>在没有使用路由的懒加载时，打包文件通常分为三个</p><ol><li><code>app </code>当前应用程序开发的所有业务代码</li><li><code>mainfest </code>为了打包的代码做底层支撑</li><li><code>vendor </code>提供商文件第三方(vue/vue-router…)</li></ol><h2 id="路由的懒加载"><a href="#路由的懒加载" class="headerlink" title="路由的懒加载"></a>路由的懒加载</h2><p>​    </p><blockquote><p>当打包构建应用时，js包会变得非常大，影响页面加载。如果我们将不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更高效了。</p><p>如果所有组件的打包成一个js文件，当用户请求js文件时，会出现短暂空白，极其不友好</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用这种方式导入，当需要用到才导入加载，因此叫懒加载</span></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span><span class="keyword">import</span> (<span class="string">&#x27;../views/Home.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> About = <span class="function">() =&gt;</span><span class="keyword">import</span> (<span class="string">&#x27;../views/About.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Hello = <span class="function">() =&gt;</span><span class="keyword">import</span> (<span class="string">&#x27;../components/HelloWorld.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> News = <span class="function">() =&gt;</span><span class="keyword">import</span> (<span class="string">&#x27;../components/News.vue&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lovehuating/image/raw/master/20210621131822.png"></p><p>打包的js文件，变得更多了。每一个组件对应一个js文件。页面加载更加高效</p><h2 id="路由的嵌套使用"><a href="#路由的嵌套使用" class="headerlink" title="路由的嵌套使用"></a>路由的嵌套使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略开头结尾</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">     <span class="attr">component</span>: Home,</span><br><span class="line">     <span class="attr">children</span>: [&#123; <span class="comment">//子路由页面，统一也是组件。在使用子组件的时候，需要在父组件注册</span></span><br><span class="line">       <span class="comment">// 子路由页面路径path写法不一样，没有/</span></span><br><span class="line">             <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">             <span class="attr">redirect</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">         &#125;, &#123;</span><br><span class="line">             <span class="attr">path</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">             <span class="attr">component</span>: Hello</span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="attr">path</span>: <span class="string">&#x27;news/:userId&#x27;</span>,</span><br><span class="line">             <span class="attr">component</span>: News</span><br><span class="line">         &#125;</span><br><span class="line">     ]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 在html页面中写入子路由，路径需要规范书写，写完整</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#x27;/home/news/&#x27;+userId&quot;</span>&gt;</span>user<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home/hello&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// @ 等同于..</span></span><br><span class="line"><span class="comment">// 导入两个子组件</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">&#x27;@/components/News.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">userId</span>: <span class="string">&#x27;Lisi&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    HelloWorld,</span><br><span class="line">    News</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue-Router </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>番茄时钟</title>
      <link href="2021/06/19/Tomato_clock1/"/>
      <url>2021/06/19/Tomato_clock1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><blockquote><p>搭建一个界面首先需要考虑由几部分组成。我分为三部分，一：头部滑块，二：中部内容，三：下部按钮</p><p>番茄时钟主要内容：滑块组件、Canvas绘制圆形、本地缓存数据</p><p><a href="http://note.youdao.com/noteshare?id=6cdfbe6bf7f7b705a03a844f2aa582be&sub=915F0DCFC50E42268852F05E4F57FF68">垃圾到死的源码奉上</a> 密码: RHDA</p></blockquote><h3 id="组件滑块slider"><a href="#组件滑块slider" class="headerlink" title="组件滑块slider"></a>组件滑块<a href="https://developers.weixin.qq.com/miniprogram/dev/component/slider.html">slider</a></h3><p>基本属性，最小值<code>min</code>，最大值<code>max</code>，完成一次拖动触发事件<code>bindchange</code></p><h3 id="图标引用"><a href="#图标引用" class="headerlink" title="图标引用"></a>图标引用</h3><p>我推荐阿里图标库，里面有很多图标，使用也方便</p><p>这是我的图标库素材链接，另外一种颜色的图标是多此一举，可以用color来更改图标颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.icon-eyes</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">  <span class="comment">/*即更改为红色*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://at.alicdn.com/t/font_2609951_mdh6mecbn8f.css?spm=a313x.7781069.1998910419.40&amp;file=font_2609951_mdh6mecbn8f.css">https://at.alicdn.com/t/font_2609951_mdh6mecbn8f.css?spm=a313x.7781069.1998910419.40&amp;file=font_2609951_mdh6mecbn8f.css</a></p><p><img src="https://gitee.com/lovehuating/image/raw/master/20210619212907.png"></p><h2 id="滑块"><a href="#滑块" class="headerlink" title="滑块"></a>滑块</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 时间滑块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;index_slider&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slider</span> <span class="attr">min</span>=<span class="string">&quot;1&quot;</span> <span class="attr">max</span>=<span class="string">&quot;60&quot;</span> <span class="attr">show-value</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span> <span class="attr">bindchanging</span>=<span class="string">&quot;handleSliderChange&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;time&#125;&#125;&quot;</span> <span class="attr">active-color</span>=<span class="string">&quot;#f36d4c&quot;</span> <span class="attr">background-color</span>=<span class="string">&quot;#000000&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>show-value=&quot;&#123;&#123;true&#125;&#125;&quot;</code> 右侧显示滑块值</p><p><code>bindchanging=&quot;handleSliderChange&quot;</code> 绑定滑块事件，拖动即可触发事件</p><p><code>bindchange</code> 拖动完成一次，触发一次。更节约性能</p><h2 id="中间内容"><a href="#中间内容" class="headerlink" title="中间内容"></a>中间内容</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">       <span class="attr">currentIndex</span>:<span class="number">0</span>,</span><br><span class="line">       <span class="attr">taskApp</span>: [&#123;</span><br><span class="line">               <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">               <span class="attr">icon</span>: <span class="string">&#x27;icon-gongzuotai&#x27;</span>,</span><br><span class="line">               <span class="attr">name</span>: <span class="string">&#x27;工作&#x27;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">               <span class="attr">icon</span>: <span class="string">&#x27;icon-xuexi&#x27;</span>,</span><br><span class="line">               <span class="attr">name</span>: <span class="string">&#x27;学习&#x27;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">               <span class="attr">icon</span>: <span class="string">&#x27;icon-bulb-full&#x27;</span>,</span><br><span class="line">               <span class="attr">name</span>: <span class="string">&#x27;思考&#x27;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">               <span class="attr">icon</span>: <span class="string">&#x27;icon-xiezuozhuanxiangke&#x27;</span>,</span><br><span class="line">               <span class="attr">name</span>: <span class="string">&#x27;写作&#x27;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="attr">id</span>: <span class="number">4</span>,</span><br><span class="line">               <span class="attr">icon</span>: <span class="string">&#x27;icon-yundong&#x27;</span>,</span><br><span class="line">               <span class="attr">name</span>: <span class="string">&#x27;运动&#x27;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="attr">id</span>: <span class="number">5</span>,</span><br><span class="line">               <span class="attr">icon</span>: <span class="string">&#x27;icon-linedesign-14&#x27;</span>,</span><br><span class="line">               <span class="attr">name</span>: <span class="string">&#x27;阅读&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">       ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;index_content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;content_title&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>选择一个任务<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;content_desc&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>在接下来的&#123;&#123;time&#125;&#125;分钟内，您将专注完成这个任务<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;content_app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;&#123;&#123;currentIndex===index?&#x27;active&#x27;:&#x27;&#x27;&#125;&#125;&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;taskApp&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">bindtap</span>=<span class="string">&quot;handleSelectActive&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;&#123;&#123;index&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont &#123;&#123;item.icon&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--根据是否选中，改变图标选中状态--&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--其实阿里图标直接改color就可以更改颜色--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>class=&quot;&#123;&#123;currentIndex===index?'active':''&#125;&#125;&quot;</code> 绑定active激活css，更改为选中状态时。点击选中改变<code>currentIndex</code> 为你的id值，因此默认第一个会是选中状态</p><p><code>wx:for=&quot;&#123;&#123;taskApp&#125;&#125;&quot;</code> 循环data中taskApp数组</p><p><code>wx:key=&quot;item.id&quot;</code> 绑定key，如果<code>li</code>标签少，可以<code>wx:key=&quot;this&quot;</code></p><p><code>data-index=&quot;&#123;&#123;index&#125;&#125;&quot;</code> 传输数据index到方法<code>handleSelectActive</code>里面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">handleSelectActive</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;index&#125; = e.currentTarget.dataset</span><br><span class="line">    <span class="comment">// 上面写法 === const index = e.currentTarget.dataset.index</span></span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">         <span class="attr">currentIndex</span>: index,</span><br><span class="line">      <span class="comment">//改变currentIndex值，并渲染到Dom，通过获取当前点击的index值，来改变currentIndex值</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;index_button&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;handleChangeHidden&quot;</span>&gt;</span>开始专注<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Canvas绘制圆形"><a href="#Canvas绘制圆形" class="headerlink" title="Canvas绘制圆形"></a>Canvas绘制圆形</h2><p>利用canvas绘制圆形，结合另一篇文章绘制静态圆</p><a class="btn-beautify button--animated block blue larger right" href="/2021/06/19/wechat_canvas/"   title="Canvas绘制"><i class="far fa-hand-point-right"></i><span>Canvas绘制</span></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line"><span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 省略一部分</span></span><br><span class="line">    <span class="keyword">if</span> (currentTime % <span class="number">1000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 该操作，每经过一秒钟进行setData，改变界面新数据</span></span><br><span class="line">        <span class="keyword">let</span> timeStr1 = currentTime / <span class="number">1000</span> <span class="comment">// 整秒数</span></span><br><span class="line">        <span class="keyword">let</span> timeMin = <span class="built_in">parseInt</span>(timeStr1 / <span class="number">60</span>) <span class="comment">//m</span></span><br><span class="line">        <span class="keyword">let</span> timeSec = timeStr1 % <span class="number">60</span> <span class="comment">//s</span></span><br><span class="line">        _this.setData(&#123;</span><br><span class="line">            <span class="attr">timeStr</span>: (timeMin &gt;= <span class="number">10</span> ? timeMin : <span class="string">&#x27;0&#x27;</span> + timeMin) + <span class="string">&#x27;:&#x27;</span> + </span><br><span class="line">          (timeSec &gt;= <span class="number">10</span> ? timeSec : <span class="string">&#x27;0&#x27;</span> +  timeSec)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (angle &lt; <span class="number">3.5</span>) &#123;</span><br><span class="line">      <span class="comment">// 封装好的绘制圆方法</span></span><br><span class="line">     <span class="built_in">this</span>.drawYuan(<span class="built_in">this</span>.data.lineWidth,<span class="string">&#x27;clock_active&#x27;</span>,<span class="string">&#x27;#fff&#x27;</span>,<span class="number">400</span>,<span class="number">1.5</span>*<span class="built_in">Math</span>.PI,angle*<span class="built_in">Math</span>.PI)</span><br><span class="line">              </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在下面续写</span></span><br><span class="line"></span><br><span class="line">&#125;, <span class="number">100</span>)</span><br><span class="line"><span class="comment">//将timer方法存储在data中</span></span><br><span class="line"><span class="comment">//当点击暂停按钮时，如下</span></span><br><span class="line"><span class="built_in">this</span>.setData(&#123;</span><br><span class="line">    timer</span><br><span class="line">  <span class="comment">// 等同于 timer:timer</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">handleStopChange</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">       <span class="attr">isBtn</span>: !<span class="built_in">this</span>.data.isBtn,</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.data.isBtn) &#123;</span><br><span class="line">     <span class="comment">//如果出去暂停状态，那么timer绘制方法也处于暂停状态</span></span><br><span class="line">       <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.data.timer);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.drawAc();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="本地缓存数据"><a href="#本地缓存数据" class="headerlink" title="本地缓存数据"></a>本地缓存数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clearInterval</span>(timer) <span class="comment">//停止timer方法</span></span><br><span class="line"><span class="keyword">let</span> apps = wx.getStorageSync(<span class="string">&#x27;apps&#x27;</span>) <span class="comment">//命名一个app本地存储数据</span></span><br><span class="line">apps.unshift(&#123;</span><br><span class="line">    <span class="attr">date</span>: util.formatTime(<span class="keyword">new</span> <span class="built_in">Date</span>), <span class="comment">// 时间</span></span><br><span class="line">    <span class="attr">currentTask</span>: _this.data.currentTask, <span class="comment">//任务app</span></span><br><span class="line">    <span class="attr">time</span>: _this.data.time <span class="comment">//专注时间</span></span><br><span class="line">&#125;)<span class="comment">//向apps数组前面插入数据</span></span><br><span class="line">wx.setStorageSync(<span class="string">&#x27;apps&#x27;</span>, apps) <span class="comment">//存储</span></span><br><span class="line"></span><br><span class="line">_this.setData(&#123;</span><br><span class="line">    <span class="attr">timeStr</span>: <span class="string">&#x27;00:00&#x27;</span>,</span><br><span class="line">    <span class="attr">okShow</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>统计获取本地缓存</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> apps = wx.getStorageSync(<span class="string">&#x27;apps&#x27;</span>) || [] <span class="comment">//获取apps本地缓存</span></span><br><span class="line"><span class="keyword">let</span> daynum = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> dayTime = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> totalnum = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> totalTime = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> sumTotal = []</span><br><span class="line"><span class="keyword">if</span> (apps.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; apps.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (apps[i].currentTask) &#123;</span><br><span class="line">          <span class="comment">//因为的缓存有一些问题，我作了一些筛选</span></span><br><span class="line">            sumTotal[sumTotal.length] = apps[i]</span><br><span class="line">            <span class="keyword">if</span> (apps[i].date.substr(<span class="number">0</span>, <span class="number">10</span>) == util.formatTime(<span class="keyword">new</span> <span class="built_in">Date</span>).substr(<span class="number">0</span>, <span class="number">10</span>)) &#123;</span><br><span class="line">                <span class="comment">// 筛选出今天的</span></span><br><span class="line">                daynum++;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 今天专注时间</span></span><br><span class="line">                dayTime += apps[i].time;</span><br><span class="line">            &#125;</span><br><span class="line">            totalnum++;</span><br><span class="line">            totalTime += apps[i].time;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="底部导航栏"><a href="#底部导航栏" class="headerlink" title="底部导航栏"></a>底部导航栏</h2><p>在全局的<code>app.json</code>文件添加</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/extended/weui/tabbar.html">tabBar 官方文档</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;tabBar&quot;</span>: &#123;</span><br><span class="line">       <span class="attr">&quot;selectedColor&quot;</span>: <span class="string">&quot;#f36d4c&quot;</span>, </span><br><span class="line">      <span class="attr">&quot;list&quot;</span>: [&#123;</span><br><span class="line">        <span class="attr">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/index/index&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;计时&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;iconPath&quot;</span>: <span class="string">&quot;./Icon/clock.png&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;./Icon/clockA.png&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/statistics/statistics&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;统计&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;iconPath&quot;</span>: <span class="string">&quot;./Icon/statistics.png&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;./Icon/statisticsA.png&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
          <category> 番茄时钟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Demo </tag>
            
            <tag> Canvas </tag>
            
            <tag> Mina </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Canvas动态画圆</title>
      <link href="2021/06/19/wechat_canvas/"/>
      <url>2021/06/19/wechat_canvas/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="静态画圆"><a href="#静态画圆" class="headerlink" title="静态画圆"></a>静态画圆</h2><p>canvas 唯一标识canvas-id</p><p><img src="https://gitee.com/lovehuating/image/raw/master/20210619092800.png" alt="画圆效果图"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">canvas-id</span>=<span class="string">&quot;clock_bg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;clock_bg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">canvas-id</span>=<span class="string">&quot;clock_active&quot;</span> <span class="attr">class</span>=<span class="string">&quot;clock_active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lineWidth = <span class="number">10</span> / <span class="built_in">this</span>.data.rate<span class="comment">//需要转换为像素单位，但不能直接使用像素单位</span></span><br><span class="line"><span class="keyword">let</span> ctx = wx.createCanvasContext(<span class="string">&#x27;clock_bg&#x27;</span>)</span><br><span class="line">ctx.setLineWidth(lineWidth);</span><br><span class="line">ctx.setStrokeStyle(<span class="string">&#x27;#000000&#x27;</span>);</span><br><span class="line">ctx.setLineCap(<span class="string">&#x27;round&#x27;</span>);<span class="comment">//填充边界的头形状</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line"></span><br><span class="line">ctx.arc(<span class="number">400</span> / <span class="built_in">this</span>.data.rate / <span class="number">2</span>, <span class="number">400</span> / <span class="built_in">this</span>.data.rate / <span class="number">2</span>,</span><br><span class="line"> <span class="number">400</span> / <span class="built_in">this</span>.data.rate / <span class="number">2</span> - <span class="number">2</span> * lineWidth, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">ctx.stroke();<span class="comment">//填充路径</span></span><br><span class="line">ctx.draw();</span><br></pre></td></tr></table></figure><blockquote><p>解释一下<code>this.data.rate</code>是rpx/px的一种比例，如果使用rpx就可以不用去转换比例，可以根据不同的手机来改变相应的宽度。但是这里需要px像素单位，不能自适应，因此需要通过这种<code>this.data.rate</code>来改变，且像素单位</p></blockquote><ol><li><p><code>createCanvasContext</code> canvas 组件的绘图上下文。CanvasContext 是旧版的接口， 新版 Canvas 2D 接口与 Web 一致。</p></li><li><p><code>setLineWidth</code> 线条的宽度，单位px</p></li><li><p><code>setStrokeStyle</code> 描边的颜色，默认颜色为 black。</p></li><li><p><code>setLineCap0</code> 设置线条的端点样式</p><table><thead><tr><th align="center">值</th><th>说明</th></tr></thead><tbody><tr><td align="center">butt</td><td>向线条的每一个末端添加平直的边缘</td></tr><tr><td align="center">round</td><td>添加圆形线帽</td></tr><tr><td align="center">square</td><td>正方形线帽</td></tr></tbody></table></li><li><p><code>beginPath</code> 开始创建一个路径。需要调用 <code>fill</code> 或者 <code>stroke</code> 才会使用路径进行填充或描边</p></li><li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.arc.html">arc</a> 创建一条弧线。</p><ul><li><p>创建一个圆可以指定起始弧度为 0，终止弧度为 2 * Math.PI。</p></li><li><p>用 <code>stroke</code> 或者 <code>fill</code> 方法来在 <code>canvas</code> 中画弧线。</p></li></ul></li><li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.draw.html">draw</a> 将之前在绘图上下文中的描述（路径、变形、样式）画到 canvas 中。</p></li></ol><h2 id="动态画圆"><a href="#动态画圆" class="headerlink" title="动态画圆"></a>动态画圆</h2><blockquote><p>其实原理和静态圆一样，只是动态圆需要设置一个延时器，一小段一小段的画。根据当前的时间，进行绘制</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置延时器，100毫秒绘制一次，时间越短，绘制越精细</span></span><br><span class="line"><span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;&#125;,<span class="number">100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> _this = <span class="built_in">this</span></span><br><span class="line"><span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 当前使用的箭头函数，没有作用域，因此我们获取的是外面函数的this</span></span><br><span class="line">&#125;,<span class="number">100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一部分数据</span></span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="attr">time</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">mTime</span>: <span class="number">300000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><cst>圆：右边是初始点，四分之一圆是 0.5 * Math.IP，上边是1.5 * Math.IP</cst></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// angle 根据时间的变化，改变成相应的大小</span></span><br><span class="line"><span class="keyword">let</span> angle = <span class="number">1.5</span> + <span class="number">2</span> * (_this.data.time * <span class="number">60</span> * <span class="number">1000</span> - _this.data.mTime) / </span><br><span class="line">    (_this.data.time * <span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">  <span class="comment">// 100++ / mtime 假设当前绘制圆时间是10s，然后和总时间比例10s/mTime = rate,</span></span><br><span class="line">  <span class="comment">//用rate*2，得出接下需要绘制多少弧度的圆。其实每次绘制都是从顶部零开始</span></span><br><span class="line">  <span class="comment">// mTime会随着绘制的圆次数，而减少时间</span></span><br><span class="line">  <span class="keyword">let</span> currentTime = _this.data.mTime - <span class="number">100</span></span><br><span class="line">  _this.setData(&#123;</span><br><span class="line">       <span class="attr">mTime</span>: currentTime</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(angle &lt; <span class="number">3.5</span>)&#123;</span><br><span class="line">  <span class="comment">// 在这个范围内可以绘制，否则停止绘制</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 停止绘制</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,<span class="number">100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if(angle &lt; 3.5) 内，绘制一个圆内</span></span><br><span class="line"><span class="keyword">let</span> lineWidth = <span class="number">10</span> / <span class="built_in">this</span>.data.rate<span class="comment">//需要转换为像素单位，但不能直接使用像素单位</span></span><br><span class="line"><span class="keyword">let</span> ctx = wx.createCanvasContext(<span class="string">&#x27;clock_active&#x27;</span>)</span><br><span class="line">ctx.setLineWidth(lineWidth);</span><br><span class="line">ctx.setStrokeStyle(<span class="string">&#x27;#fff&#x27;</span>);</span><br><span class="line">ctx.setLineCap(<span class="string">&#x27;round&#x27;</span>);<span class="comment">//填充边界的头形状</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line"></span><br><span class="line">ctx.arc(<span class="number">400</span> / <span class="built_in">this</span>.data.rate / <span class="number">2</span>, <span class="number">400</span> / <span class="built_in">this</span>.data.rate / <span class="number">2</span>,</span><br><span class="line"><span class="number">400</span> / <span class="built_in">this</span>.data.rate / <span class="number">2</span> - <span class="number">2</span> * lineWidth, <span class="number">1.5</span> * <span class="built_in">Math</span>.PI, angle * <span class="built_in">Math</span>.PI, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">ctx.stroke();<span class="comment">//填充路径</span></span><br><span class="line">ctx.draw();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">……<span class="number">400</span> / <span class="built_in">this</span>.data.rate / <span class="number">2</span> - <span class="number">2</span> * lineWidth, <span class="number">1.5</span> * <span class="built_in">Math</span>.PI, angle * <span class="built_in">Math</span>.PI, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><h2 id="画圆方法封装"><a href="#画圆方法封装" class="headerlink" title="画圆方法封装"></a>画圆方法封装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="title">drawYuan</span>(<span class="params">lineWidth,canvas_id,canvas_color,width,start,end</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建canvas路径</span></span><br><span class="line">        <span class="keyword">let</span> ctx = wx.createCanvasContext(canvas_id)</span><br><span class="line">        ctx.setLineWidth(lineWidth/<span class="built_in">this</span>.data.rate)</span><br><span class="line">        ctx.setStrokeStyle(canvas_color)</span><br><span class="line">        ctx.setLineCap(<span class="string">&#x27;round&#x27;</span>)</span><br><span class="line">        ctx.beginPath()</span><br><span class="line">        ctx.arc(width/<span class="built_in">this</span>.data.rate/<span class="number">2</span>,width/<span class="built_in">this</span>.data.rate/<span class="number">2</span>,</span><br><span class="line">            width/<span class="built_in">this</span>.data.rate/<span class="number">2</span>-<span class="number">6</span>,start,end,<span class="literal">false</span>)</span><br><span class="line">        ctx.stroke();<span class="comment">//填充路径</span></span><br><span class="line">        ctx.draw();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol><li><code>lineWidth</code> 存放在data里面的数据，方法里面会自动转换比例</li><li><code>canvas_id</code> canvas的唯一标识canvas-id，而不是id</li><li><code>canvas_color</code>  路径填充颜色</li><li><code>width</code> 圆形的宽度，和长度</li><li><code>start</code> 花园的起始点，1.5 * Math.PI</li><li><code>end</code> 结束点</li></ol><blockquote><p>动态画圆其实一直是从起始点开始画，而不是接上之前的。</p></blockquote><h2 id="像素单位自适应"><a href="#像素单位自适应" class="headerlink" title="像素单位自适应"></a>像素单位自适应</h2><p><code>lineWidth</code> 是像素px单位，因此微信小程序中无法使用px，但是使用rpx这种画圆方法不支持。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = wx.getSystemInfoSync();</span><br><span class="line"><span class="built_in">console</span>.log(res);<span class="comment">//获取手机信息宽度啥的</span></span><br><span class="line"><span class="keyword">const</span> rate = <span class="number">750</span> / res.windowWidth</span><br><span class="line"><span class="built_in">console</span>.log(rate);<span class="comment">// 获取比例 小程序是宽度为750rpx</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lovehuating/image/raw/master/20210619160000.png"></p><blockquote><p>根据不同的手机信息，来获取不同的宽度比例，将<code>lineWidth</code> 转换为像素单位，且达到自适应效果</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mina </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
            <tag> Mina </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Gitee图床</title>
      <link href="2021/06/10/giteeimage/"/>
      <url>2021/06/10/giteeimage/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="创建Gitee仓库"><a href="#创建Gitee仓库" class="headerlink" title="创建Gitee仓库"></a>创建Gitee仓库</h2><p><img src="https://gitee.com/lovehuating/image/raw/master/Snipaste_2021-06-10_17-26-13.png"><img src="https://gitee.com/lovehuating/image/raw/master/Snipaste_2021-06-10_17-27-54.png"></p><p>我的仓库是master分支，仓库名SimpleImage</p><h2 id="获取Token"><a href="#获取Token" class="headerlink" title="获取Token"></a>获取Token</h2><p><img src="https://gitee.com/lovehuating/image/raw/master/Snipaste_2021-06-10_17-30-29.png"></p><p><img src="https://gitee.com/lovehuating/image/raw/master/Snipaste_2021-06-10_17-31-58.png"></p><p><img src="https://gitee.com/lovehuating/image/raw/master/Snipaste_2021-06-10_17-32-41.png"></p><p>点击生成新令牌，然后全选即可，令牌只会出现一次，需要复制到其它地方</p><h2 id="使用PicGo上传工具"><a href="#使用PicGo上传工具" class="headerlink" title="使用PicGo上传工具"></a>使用PicGo上传工具</h2><p><img src="https://gitee.com/lovehuating/image/raw/master/Snipaste_2021-06-10_17-35-01.png"></p><p>搜索Gtee插件，安装<code>gitee 2.0.3</code> 即可</p><p><img src="https://gitee.com/lovehuating/image/raw/master/Snipaste_2021-06-10_17-37-06.png"></p><p><img src="https://gitee.com/lovehuating/image/raw/master/Snipaste_2021-06-10_17-42-01.png"></p>]]></content>
      
      
      <categories>
          
          <category> 仓库 </category>
          
          <category> 图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> Gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环境准备</title>
      <link href="2021/06/04/Environmental_preparation/"/>
      <url>2021/06/04/Environmental_preparation/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-注册账号"><a href="#1-注册账号" class="headerlink" title="1. 注册账号"></a>1. 注册账号</h2><blockquote><p>建议使用全新的邮箱，没有注册过其他小程序或者公众号的。</p><p>访问<a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1">注册页面</a>，耐⼼完成注册即可。</p></blockquote><h2 id="2-获取APPID"><a href="#2-获取APPID" class="headerlink" title="2. 获取APPID"></a>2. 获取APPID</h2><p>由于后期调⽤微信⼩程序的接⼝等功能，需要索取开发者的⼩程序中的 APPID ，所以在注册成功后， 可登录，然后获取APPID。</p><p><a href="https://mp.weixin.qq.com/">登录</a>，成功后可看到如下界⾯O(∩_∩)O</p><p>然后复制你的APPID,悄悄的保存起来，不要给别⼈看到😄。</p><p><img src="https://note.youdao.com/yws/api/personal/file/A65EDF248EB14BF6A3EAA4891B44834D?method=download&shareKey=96342b3a96dd72c4a49096a0ce72712e"></p><p><img src="https://note.youdao.com/yws/api/personal/file/80680DB8B2F94BF880F002CE8E6833CE?method=download&shareKey=729faed0e32469801f831892e2b28f14"></p><h2 id="3-开发者工具"><a href="#3-开发者工具" class="headerlink" title="3. 开发者工具"></a>3. 开发者工具</h2><a class="btn-beautify button--animated outline blue larger" href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html"   title="下载地址"><span>下载地址</span></a><p><img src="https://note.youdao.com/yws/api/personal/file/8BAF969F77954A96B3FFD89C24BFA587?method=download&shareKey=7646c16b529eda40714d08e14a5a339a"></p><p>微信⼩程序⾃带开发者⼯具，集 开发 预览 调试 发布 于⼀⾝的 完整环境。 </p><p>但是由于编码的体验不算好，因此 <cst>建议使⽤ vs code + 微信小程序</cst>编辑工具 来实现编码 vs code 负责敲代码， 微信编辑工具 负责预览</p>]]></content>
      
      
      <categories>
          
          <category> Mina </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序介绍</title>
      <link href="2021/06/04/Introduction_to_wechat_applet/"/>
      <url>2021/06/04/Introduction_to_wechat_applet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-为什么是微信⼩程序"><a href="#1-为什么是微信⼩程序" class="headerlink" title="1. 为什么是微信⼩程序"></a>1. 为什么是微信⼩程序</h2><ol><li>微信有海量⽤⼾，⽽且粘性很⾼，在微信⾥开发产品更容易触达⽤⼾； </li><li>推⼴app 或公众号的成本太⾼。</li><li>开发适配成本低。</li><li>容易⼩规模试错，然后快速迭代。 </li><li>跨平台。</li></ol><h2 id="2-微信⼩程序历史"><a href="#2-微信⼩程序历史" class="headerlink" title="2. 微信⼩程序历史"></a>2. 微信⼩程序历史</h2><ul><li><cst>2016年1⽉11⽇</cst>，<cst class="red">微信之⽗张⼩⻰</cst>时隔多年的公开亮相，解读了微信的四⼤价值观。张⼩⻰指出， 越来越多产品通过公众号来做，因为这⾥开发、获取⽤⼾和传播成本更低。拆分出来的服务号并没 有提供更好的服务，所以微信内部正在研究新的形态，叫「微信⼩程序」 需要注意的是，之前是叫 做 <cst>应⽤号</cst></li><li><cst>2016年9⽉21⽇</cst>，微信⼩程序正式开启内测。在微信⽣态下，<cst>触⼿可及、⽤完即⾛</cst>的微信⼩程序引 起⼴泛关注。腾讯云正式上线微信⼩程序解决⽅案，提供⼩程序在云端服务器的技术⽅案。</li><li><cst>2017年1⽉9⽇</cst>，微信推出的“⼩程序”正式上线。“⼩程序”是⼀种<cst>⽆需安装，即可使⽤的⼿ 机“应⽤”</cst>。不需要像往常⼀样下载App，⽤⼾在微信中“⽤完即⾛”。</li></ul><h2 id="3-疯狂的微信⼩程序"><a href="#3-疯狂的微信⼩程序" class="headerlink" title="3. 疯狂的微信⼩程序"></a>3. 疯狂的微信⼩程序</h2><ol><li>微信⽉活已经达到10.82亿。其中55岁以上的⽤⼾也达到6300万</li><li>信息传达数达到450亿，较去年增⻓18%;视频通话4.1亿次,增⻓100% </li><li>⼩程序覆盖超过200+⾏业，交易额增⻓超过6倍，服务1000亿+⼈次,创造出了5000亿+的商业价值</li></ol><h2 id="4-还有其他的⼩程序-不容忽视"><a href="#4-还有其他的⼩程序-不容忽视" class="headerlink" title="4. 还有其他的⼩程序 不容忽视"></a>4. 还有其他的⼩程序 不容忽视</h2><ol><li>⽀付宝⼩程序 </li><li>百度⼩程序 </li><li>QQ⼩程序 </li><li>今⽇头条 + 抖⾳⼩程序</li></ol><h2 id="5-官⽅微信⼩程序体验"><a href="#5-官⽅微信⼩程序体验" class="headerlink" title="5. 官⽅微信⼩程序体验"></a>5. 官⽅微信⼩程序体验</h2><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210604153344.png"></p>]]></content>
      
      
      <categories>
          
          <category> Mina </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>路由的基本使用</title>
      <link href="2021/06/02/Basic-use-of-routing/"/>
      <url>2021/06/02/Basic-use-of-routing/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="page-header"><h2>前端路由阶段</h2><p>核心：改变URL，但是页面不进行整体的刷新</p></div>### URL的hash<p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210602104329.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//在浏览器终端输入</span><br><span class="line">location.hash = &#x27;/foo&#x27;</span><br><span class="line"></span><br><span class="line">location.href</span><br><span class="line"></span><br><span class="line">//改变URL是不会刷新页面的</span><br></pre></td></tr></table></figure><h3 id="HTML的history模式：pushState"><a href="#HTML的history模式：pushState" class="headerlink" title="HTML的history模式：pushState"></a>HTML的history模式：pushState</h3><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210602104606.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">history.pushState(&#123;data&#125;,&#x27;title&#x27;,&#x27;url&#x27;)</span><br><span class="line"></span><br><span class="line">//通过HTML5这种pushState的方式，是栈结构。</span><br><span class="line">//可以通过 history.back()出栈，history.forward() 入栈</span><br><span class="line">//使用 history.go(-1) 出栈一个，history.go(1) 进栈一个</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210602105915.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210602105950.png"></p><hr><h2 id="安装vue-router"><a href="#安装vue-router" class="headerlink" title="安装vue-router"></a>安装vue-router</h2><ol><li>通过npm安装vue脚手架项目的时候安装路由</li><li>安装vue-router：<code>npm install vue-router --save</code></li><li>在模块化工程中使用它（因为是一个插件，所以可以通过<code>Vue.use()</code>来安装路由功能）<ul><li>导入路由对象，并调用 <code>Vue.use(VueRouter)</code></li><li>创建路由实例，并且传入路由映射配置</li><li>在Vue实例中挂载创建的路由实例</li></ul></li></ol><h2 id="使用vue-router的步骤"><a href="#使用vue-router的步骤" class="headerlink" title="使用vue-router的步骤"></a>使用vue-router的步骤</h2><ul><li>第一步：创建路由组件</li><li>第二步：配置路由映射关系，组件和路径的映射关系</li><li>第三步：使用路径，通过<code>&lt;router-link&gt; 和 &lt;router-view&gt;</code></li></ul><br><h3 id="创建路由组件"><a href="#创建路由组件" class="headerlink" title="创建路由组件"></a>创建路由组件</h3><p><code>/src/components </code>放vue组件</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210602134243.png"></p><br><h3 id="配置路由映射关系，组件和路径的映射关系"><a href="#配置路由映射关系，组件和路径的映射关系" class="headerlink" title="配置路由映射关系，组件和路径的映射关系"></a>配置路由映射关系，组件和路径的映射关系</h3><p><code>/src/router/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入vue和router</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入home.js about.js</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&#x27;../components/home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> about <span class="keyword">from</span> <span class="string">&#x27;../components/about.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: about</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><h3 id="使用路径，通过-lt-router-link-gt-和-lt-router-view-gt"><a href="#使用路径，通过-lt-router-link-gt-和-lt-router-view-gt" class="headerlink" title="使用路径，通过&lt;router-link&gt; 和 &lt;router-view&gt;"></a>使用路径，通过<code>&lt;router-link&gt; 和 &lt;router-view&gt;</code></h3><p><code>/src/App.vue</code> main.js渲染的就是这个vue模板，因此我们在里面写全局组件<code>&lt;router-link&gt; 和 &lt;router-view&gt;</code></p><p><b>App.vue</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/home&quot;&gt;home&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/about&quot;&gt;about&lt;/router-link&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br><h3 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a>内置组件</h3><p><code>&lt;router-link&gt;</code>该标签是一个vue-router中已经内置的组件,它会被渲染成一个<code>&lt;a&gt;</code>标签.</p><p><code>&lt;router-view&gt;</code>该标签会根据当前的路径,动态渲染出不同的组件</p><p>网页的其他内容,比如顶部的标题/导航,或者底部的一些版权信息等会和<code>&lt;router-view&gt;</code>处于同一个等级.</p><p>在路由切换时,切换的是<code>&lt;router-view&gt;</code>挂载的组件,其他内容不会发生改变.</p><h3 id="lt-router-link-gt-默认渲染-lt-a-gt-标签"><a href="#lt-router-link-gt-默认渲染-lt-a-gt-标签" class="headerlink" title="&lt;router-link&gt;默认渲染&lt;a&gt;标签"></a><code>&lt;router-link&gt;</code>默认渲染<code>&lt;a&gt;</code>标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加tag=&quot;button&quot;属性，现在渲染的就是按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&#x27;/home&#x27;</span> <span class="attr">tag</span>=<span class="string">&quot;button&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>默认页面路径使用的是pushState栈结构，可以使用返回向前操作，如果不允许这样使用，可以在<code>router-link</code> 添加属性replace</p></blockquote><ul><li><cst>tag</cst>：tag可以指定渲染组件</li><li><cst>replace</cst>：不会留下history记录，因此不能使用后退健返回上一个页面</li><li>active-class：默认的class类叫<code>router-link-class</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&#x27;/home&#x27;</span> <span class="attr">tag</span>=<span class="string">&quot;button&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p><cst>更改后，就是active类了，但是尽量使用默认的名字，不修改</cst></p><p>在路由配置里面，修改默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span> ,<span class="comment">//修改模式</span></span><br><span class="line">  <span class="attr">linkActiveClass</span>: <span class="string">&#x27;cst-active&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由默认路径，显示首页"><a href="#路由默认路径，显示首页" class="headerlink" title="路由默认路径，显示首页"></a>路由默认路径，显示首页</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>router/index.js</code></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210602142008.png"></p><br><h2 id="配置router参数"><a href="#配置router参数" class="headerlink" title="配置router参数"></a>配置router参数</h2><h3 id="默认模式hash"><a href="#默认模式hash" class="headerlink" title="默认模式hash"></a>默认模式hash</h3><p>默认模式路径带#号，对路径不美观，我们可以修改模式为HTML5的history模式</p><p><code>/router/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽离了一下 routes</span></span><br><span class="line"><span class="keyword">const</span> routes  = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: Home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: About</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/content&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: Content</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes, <span class="comment">//增强写法</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span> <span class="comment">//修改模式</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用methods方法来跳转网页"><a href="#使用methods方法来跳转网页" class="headerlink" title="使用methods方法来跳转网页"></a>使用methods方法来跳转网页</h2><p><b>App.vue</b></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;home&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;about&quot;</span>&gt;</span>about/button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="function"><span class="title">home</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// this.$router.push(&#x27;/home&#x27;)</span></span><br><span class="line">      <span class="built_in">this</span>.$router.replace(<span class="string">&#x27;/home&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">about</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// this.$router.push(&#x27;/about&#x27;)</span></span><br><span class="line">      <span class="built_in">this</span>.$router.replace(<span class="string">&#x27;/about&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Vue-Router </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue-Router </tag>
            
            <tag> 基础使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Router路由的目录</title>
      <link href="2021/06/01/Vue-Router%20Content/"/>
      <url>2021/06/01/Vue-Router%20Content/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="page-header"><h2 class="huise">认识路由</h2><p>首先了解后端渲染、前端渲染和SPA单页面富应用，掌握理解路由映射表<a class="btn-beautify button--animated block outline right larger" href="/./2021/06/01/router1/"   title="认识路由"><i class="far fa-hand-point-right"></i><span>认识路由</span></a></p></div><div class="page-header"><h2 class="blue">路由基本使用</h2><p>学习安装和使用vue路由，了解其原理  <a class="btn-beautify button--animated block outline right blue larger" href="/./2021/06/02/Basic-use-of-routing/"   title="路由基本使用"><i class="far fa-hand-point-right"></i><span>路由基本使用</span></a>  </p></div><div class="page-header"><h2 class="orange">路由的进阶使用</h2><p>路由的进阶使用，了解动态路由、懒加载、路由嵌套。掌握路由传参，动态更改用户页面  <a class="btn-beautify button--animated block outline right orange larger" href="/./2021/06/20/routerlazy/"   title="路由的进阶使用"><i class="far fa-hand-point-right"></i><span>路由的进阶使用</span></a>  </p></div><div class="page-header"><h2 class="pink">参数传递</h2><p>路由传递参数的方式,两种类型params和query. 前者只能传递一个参数,后者可以传递对象. 了解&router 和 $route 的区别.  <a class="btn-beautify button--animated block outline right pink larger" href="/./2021/07/10/Parameter_transfer/"   title="参数传递"><i class="far fa-hand-point-right"></i><span>参数传递</span></a></p></div><div class="page-header"><h2 class="red">导航守卫</h2><p>最主要的作用是用于监听，当点击路由跳转时，可以监听事件，处理变化。<a class="btn-beautify button--animated block outline right red larger" href="/./2021/07/10/Navigation_guard/"   title="导航守卫"><i class="far fa-hand-point-right"></i><span>导航守卫</span></a></p></div><div class="page-header"><h2 class="purple">keep-alive</h2><p>通过vue组件keep-alive来保留页面状态。当页面处于新闻列表，当页面跳回来仍然处于该页面状态，而不是新的首页<a class="btn-beautify button--animated block outline right purple larger" href="/./2021/07/11/Keep_alive/"   title="keep-alive"><i class="far fa-hand-point-right"></i><span>keep-alive</span></a></p></div>]]></content>
      
      
      <categories>
          
          <category> 目录 </category>
          
          <category> Vue-Router </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue-Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识路由</title>
      <link href="2021/06/01/router1/"/>
      <url>2021/06/01/router1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>明确三个概念：<cst>「后端渲染」</cst>指传统的 ASP、Java 或 PHP 的渲染机制；<cst>「前端渲染」</cst>指使用 JS 来渲染页面大部分内容，代表是现在流行的 SPA 单页面富应用；<cst>「同构渲染」</cst>指前后端共用 JS，首次渲染时使用 Node.js 来直出 HTML。一般来说同构渲染是介于前后端中的共有部分。</p></blockquote><h2 id="后端渲染"><a href="#后端渲染" class="headerlink" title="后端渲染"></a>后端渲染</h2><p>早期的 Web 项目一般是在服务器端进行渲染，服务器进程从数据库获取数据后，利用后端模板引擎，甚至于直接在 HTML 模板中嵌入后端语言（例如 JSP），将数据加载进来生成 HTML，然后通过网络传输到用户的浏览器中，然后被浏览器解析成可见的页面。</p><p>后端渲染的优点：</p><ul><li>对搜索引擎友好。</li><li>首页加载时间短，后端渲染加载完成后就直接显示 HTML，但前端渲染在加载完成 后还需要有段 js 渲染的时间。</li><li>有利于SEO的优化</li><li>服务端渲染不用关心浏览器兼容性问题（随意浏览器发展，这个优点逐渐消失）</li></ul><p>后端渲染的缺点：</p><ul><li>前后端开发交叉，不利于维护</li><li>做不到app化，体验较差</li><li>占用了大量的计算资源和带宽放在了与业务无关的渲染上</li></ul><h2 id="前端渲染"><a href="#前端渲染" class="headerlink" title="前端渲染"></a>前端渲染</h2><p>前端渲染 则是在浏览器里利用 JS 把数据和 HTML 模板进行组合。两种方式各有自己的优缺点，需要更 具自己的业务场景来选择技术方案。</p><p>前端渲染的优点在于：</p><ul><li>UI体验更好，在当下这越来越重要，用户除了看重功能之外，也越来越注重体验，通过使用vue.js、react等前端框架，可以搭建优秀的单页面web app，比传统的网页拥有更好的体验。</li><li>业务分离，后端只需要提供数据接口，前端在开发时也不需要部署对应的后端环境， 通过一些代理服务器工具就能远程获取后端数据进行开发，能够提升开发效率。</li><li>计算量转移，原本需要后端渲染的任务转移给了前端，减轻了服务器的压力。</li><li>通过使用前端框架，可以实现快速开发、迭代开发</li></ul><p>前端渲染主要面临的问题有两个 <strong>SEO、首屏性能</strong>。</p><p>SEO 很好理解。由于传统的搜索引擎只会从 HTML 中抓取数据，导致前端渲染的页面无法被抓取。前端渲染常使用的 SPA 会把所有 JS 整体打包，无法忽视的问题就是文件太大，导致渲染前等待很长时间。特别是网速差的时候，让用户等待白屏结束并非一个很好的体验。</p><h2 id="同构的优点"><a href="#同构的优点" class="headerlink" title="同构的优点"></a>同构的优点</h2><p>同构恰恰就是为了解决前端渲染遇到的问题才产生的，至 2014 年底伴随着 React 的崛起而被认为是前端框架应具备的一大杀器，以至于当时很多人为了用此特性而 <a href="https://link.zhihu.com/?target=https://blog.risingstack.com/from-angularjs-to-react-the-isomorphic-way/">放弃 Angular 1 而转向 React</a>。然而近3年过去了，很多产品逐渐从全栈同构的理想化逐渐转到首屏或部分同构。让我们再一次思考同构的优点真是优点吗？</p><h2 id="认识Vue-Router"><a href="#认识Vue-Router" class="headerlink" title="认识Vue-Router"></a>认识Vue-Router</h2><p><b>目前前端流行的三大框架，都有自己的路由实现：</b></p><ul><li>Angular的ngRouter</li><li>React的ReactRouter</li><li>Vue的vue-router</li></ul><p><b>我们重点学习Vue-Router</b></p><ul><li><p>vue-router 是 Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用</p></li><li><p>我们可以访问其官方网站进行学习：</p><a class="btn-beautify button--animated block right blue larger" href="https://router.vuejs.org/zh/"   title="官方网站"><i class="far fa-hand-point-right"></i><span>官方网站</span></a></li></ul><p><b>vue-router 是基于路由和组件的</b></p><ul><li>路由用于设定访问路径，将路径和组件映射起来</li><li>在vue-router的单页面应用中，页面的路径的改变就是组件的切换</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue-Router </tag>
            
            <tag> 前端渲染 </tag>
            
            <tag> 后端渲染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鼠标右键菜单管理</title>
      <link href="2021/05/31/Right%20click%20menu%20management/"/>
      <url>2021/05/31/Right%20click%20menu%20management/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>按住window健+R，输入<code>regedit</code>，进入注册表编辑</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210601082114.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210601081609.png"></p><h2 id="桌面右键菜单管理"><a href="#桌面右键菜单管理" class="headerlink" title="桌面右键菜单管理"></a>桌面右键菜单管理</h2><p>路径：<code>计算机\HKEY_CLASSES_ROOT\Directory\Background\shell</code></p><p>选中shell右键，添加新建项，命名你的右键菜单名字。</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210531213137.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210531213333.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210531213421.png"></p><p>在空白处，右键新建 –&gt; 字符串值，命名<code>Icon</code>。这是放图标的。</p><p>双击修改值，将你的文件.exe后缀路径填入</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210531213629.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210601082013.png"></p><h2 id="文件夹右键菜单管理"><a href="#文件夹右键菜单管理" class="headerlink" title="文件夹右键菜单管理"></a>文件夹右键菜单管理</h2><p>路径：<code>计算机\HKEY_CLASSES_ROOT\Directory\shell</code></p><p><cst>步骤同上</cst></p><h2 id="文件右键菜单管理"><a href="#文件右键菜单管理" class="headerlink" title="文件右键菜单管理"></a>文件右键菜单管理</h2><p>路径：<code>计算机\HKEY_CLASSES_ROOT\*\shell</code></p><p><cst>步骤同上</cst></p>]]></content>
      
      
      <categories>
          
          <category> 仓库 </category>
          
          <category> 鼠标管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> 鼠标快捷操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Runtime-Compiler和Runtime-only的区别</title>
      <link href="2021/05/31/compiler-only/"/>
      <url>2021/05/31/compiler-only/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="区别在于main-js"><a href="#区别在于main-js" class="headerlink" title="区别在于main.js"></a>区别在于main.js</h2><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210531161629.png" alt="a"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210531163953.png"></p><p>对比区别在于Vue实例中，<code>render</code>使用了一个箭头函数，原型是createElement()，用于替换<code>&lt;div class=&quot;id&quot;&gt;</code></p><p>内部函数<code>createElement()</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--真实开发不会这么写，但是需要了解原理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">createElement(<span class="string">&#x27;标签&#x27;</span>,&#123;标签属性&#125;,[标签内容])</span></span><br><span class="line"><span class="javascript">createElement(<span class="string">&#x27;h2&#x27;</span>,&#123;<span class="attr">class</span>: <span class="string">&#x27;box&#x27;</span>&#125;,[<span class="string">&#x27;hello world&#x27;</span>])</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 写子标签</span></span></span><br><span class="line"><span class="javascript">  createElement(<span class="string">&#x27;h2&#x27;</span>,&#123;<span class="attr">class</span>: <span class="string">&#x27;box&#x27;</span>&#125;,[<span class="string">&#x27;hello world&#x27;</span>,createElement(<span class="string">&#x27;button&#x27;</span>,[<span class="string">&#x27;按钮&#x27;</span>])])</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">||</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  hello world</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue的编译渲染过程"><a href="#Vue的编译渲染过程" class="headerlink" title="Vue的编译渲染过程"></a>Vue的编译渲染过程</h2><p><code>template</code> –&gt; <code>ast</code>(abstract syntax tree 抽象语法树) –&gt; <code>render函数</code> –&gt; <code>VDOM</code> –&gt; <code>DOM</code></p><ul><li>先将template解析(parse)成抽象语法树(ast)</li><li>将ast编译(compiler)成render函数</li><li>将render函数渲染(render)成虚拟DOM</li><li>最后将<cst>虚拟DOM</cst>渲染成<cst>真实DOM</cst></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//vuerender.png"></p><h3 id="runtime-compiler的步骤"><a href="#runtime-compiler的步骤" class="headerlink" title="runtime-compiler的步骤"></a>runtime-compiler的步骤</h3><p><code>template</code> –&gt; <code>ast</code> –&gt; <code>render函数</code> –&gt; <code>VDOM</code> –&gt; <code>DOM</code></p><h3 id="runtime-only的步骤"><a href="#runtime-only的步骤" class="headerlink" title="runtime-only的步骤"></a>runtime-only的步骤</h3><p><code>render函数</code> –&gt; <code>VDOM</code> –&gt; <code>DOM</code></p><h2 id="对比两者的区别"><a href="#对比两者的区别" class="headerlink" title="对比两者的区别"></a>对比两者的区别</h2><p>(1) 首先从代码的完整性来看，runtime-only版本比runtime-compiler版本少了一个API – <code>Vue.compile</code>，这个API是执行前两步，将一个模板字符串编译成 render 函数。因此，runtime-only是无法使用<code>template</code>选项的。</p><p>(2) 由于runtime-only少了相应的功能，使得该版本的体积更小。</p><table><thead><tr><th align="center"><strong>runtime-compiler</strong></th><th align="center"><strong>runtime-only</strong></th></tr></thead><tbody><tr><td align="center">体积大</td><td align="center">体积小</td></tr><tr><td align="center">有<code>Vue.compile</code> API</td><td align="center">无<code>Vue.compile</code> API</td></tr><tr><td align="center">可以使用<code>template模板</code>、<code>render函数</code>渲染</td><td align="center">只可使用<code>render</code>函数渲染</td></tr></tbody></table><h2 id="开发项目选择哪种呢"><a href="#开发项目选择哪种呢" class="headerlink" title="开发项目选择哪种呢"></a>开发项目选择哪种呢</h2><p>在实际开发项目中，我们偏向使用<code>runtime-only</code>，渲染性能更高，体积小。我们不需要担心template组件无法渲染，因为在开发项目时，我们安装过<code>vue-template-compiler</code>，可以利用它去渲染。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Vue-CLI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue-CLI 进阶</title>
      <link href="2021/05/31/vueclicontent/"/>
      <url>2021/05/31/vueclicontent/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="page-header">  <h2 class="huise">Runtime-Compiler和Runtime-only的区别</h2><p>  它们的区别在于渲染步骤,compiler可以渲染template组件，only是不需要渲染的  <div class="text-right">    <a class="btn-beautify button--animated outline huise larger" href="/./2021/05/31/compiler-only/"   title="Runtime-Compiler和Runtime-only的区别"><i class="far fa-hand-point-right"></i><span>Runtime-Compiler和Runtime-only的区别</span></a>  </div></p></div>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Vue-CLI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚手架进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件的基本使用</title>
      <link href="2021/05/28/vue-baseuse/"/>
      <url>2021/05/28/vue-baseuse/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h2><blockquote><p>组件分为：非单文件组件和单文件组件</p><p>非单文件组件：一个文件中包含有n个组件，通过html文件管理</p><p>单文件组件：一个文件中只包含有1个组件，如.vue文件</p></blockquote><p><strong>1.基本使用组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Vue中使用组件的三大步骤：</span></span><br><span class="line"><span class="comment">  1.创建组件</span></span><br><span class="line"><span class="comment">  2.注册组件</span></span><br><span class="line"><span class="comment">  3.使用组件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建组件 Vue.extend(&#123;&#125;)方法创建</span></span><br><span class="line"><span class="keyword">const</span> simple = Vue.extend(&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">`&lt;div&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;simplelife&#x27;</span>&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.注册组件，让根组件管理子组件</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>:&#123;&#125;,</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    simple(组件名):simple(创建名) <span class="comment">//=&gt; 同名可以使用ES6简写方式</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.使用组件</span></span><br><span class="line"><span class="comment">// 假设这段是 Vue接管的容器</span></span><br><span class="line">&lt;div id=<span class="string">&quot;demo&quot;</span>&gt;</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">simple</span>&gt;</span><span class="tag">&lt;/<span class="name">simple</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>2.Vue.extend({})</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建组件可以省略 Vue.extend</span></span><br><span class="line"><span class="comment">// 省略并不是没使用这个函数，而是当被注册的时候，才会调用这个函数</span></span><br><span class="line"><span class="keyword">const</span> simple = &#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">``</span>,</span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建的组件，不需要填写 el 属性，其它和new Vue一样</span></span><br><span class="line"><span class="comment">// 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。</span></span><br><span class="line"><span class="comment">// data必须写成函数，为什么？ ———— 避免组件被复用时，数据存在引用关系。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.组件创建还有一个 `name` 属性</span></span><br><span class="line"><span class="comment">// 这个名字是用于 devTools 工具展示的名称，用于区别模块</span></span><br><span class="line"><span class="keyword">const</span> simple = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;SimpleLife&#x27;</span></span><br><span class="line">  <span class="attr">template</span>:<span class="string">``</span>,</span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.创建的组件，谁注册谁能使用</span></span><br><span class="line"><span class="comment">// 局部注册：靠new Vue的时候传入components选项</span></span><br></pre></td></tr></table></figure><p> <strong>3.全局组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如上称为局部组件，谁注册谁就能用</span></span><br><span class="line"><span class="comment">// 1.创建组件构造器对象</span></span><br><span class="line"><span class="comment">// 全局注册：靠Vue.component(&#x27;组件名&#x27;,组件)</span></span><br><span class="line"><span class="keyword">const</span> cpnConstruct = Vue.extend(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;标题&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;内容&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt; </span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)<span class="comment">//使用的tab健的引号，ES6语法，作用跟双引号单引号一样，但是可以换行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.注册组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;my-cpn&#x27;</span>,cpnConstruct);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.使用组件(在Vue的实例范围内使用组件)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>4.注意事项</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  1.关于组件名命名规范：</span></span><br><span class="line"><span class="comment">       一个单词组成：</span></span><br><span class="line"><span class="comment">          第一种写法(首字母小写)：simple</span></span><br><span class="line"><span class="comment">          第二种写法(首字母大写): Simple</span></span><br><span class="line"><span class="comment">       多个单词组成：</span></span><br><span class="line"><span class="comment">          第一种(kebad-case命名): my-simple</span></span><br><span class="line"><span class="comment">          第二种(CamelCase命名): MySimple(需要脚手架才能解析这种命名)</span></span><br><span class="line"><span class="comment">       备注：</span></span><br><span class="line"><span class="comment">          (1). 组件名避免HTML已有的元素名称，否则解析失败，按正常HTML标签解析</span></span><br><span class="line"><span class="comment">          (2). 可以使用name配置项指定组件在开发者工具(devtool)中呈现的名字</span></span><br><span class="line"><span class="comment">  2.关于组件标签:</span></span><br><span class="line"><span class="comment">       第一种写法：&lt;simple&gt;&lt;/simple&gt;</span></span><br><span class="line"><span class="comment">       第二种写法：&lt;simple/&gt;</span></span><br><span class="line"><span class="comment">       备注：不使用脚手架时，&lt;school/&gt;会导致后续组件不能渲染。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p><strong>5.组件嵌套使用（父子组件）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  子组件生命必须在父组件之前，由上自下</span></span><br><span class="line"><span class="comment">*  创建Vue实例对象vm，再创建app组件，去替代vm接管子组件</span></span><br><span class="line"><span class="comment">*  因此 school 组件生命在 app 组件里面</span></span><br><span class="line"><span class="comment">*  school子组件 student 组件，声明在school里面</span></span><br><span class="line"><span class="comment">*  这种使用就是组件嵌套使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//定义student组件</span></span><br><span class="line"><span class="keyword">const</span> student = Vue.extend(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;student&#x27;</span>,</span><br><span class="line"><span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;simplelife&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义school组件</span></span><br><span class="line"><span class="keyword">const</span> school = Vue.extend(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;school&#x27;</span>,</span><br><span class="line"><span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;student&gt;&lt;/student&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;simplelife&#x27;</span>,</span><br><span class="line"><span class="attr">address</span>:<span class="string">&#x27;江西&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//注册组件（局部）</span></span><br><span class="line"><span class="attr">components</span>:&#123;</span><br><span class="line">student</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义app组件</span></span><br><span class="line"><span class="keyword">const</span> app = Vue.extend(&#123;</span><br><span class="line"><span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;hello&gt;&lt;/hello&gt;</span></span><br><span class="line"><span class="string">&lt;school&gt;&lt;/school&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line"><span class="attr">components</span>:&#123;</span><br><span class="line">school,</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">template</span>:<span class="string">&#x27;&lt;app&gt;&lt;/app&gt;&#x27;</span>,</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line"><span class="comment">//注册组件（局部）</span></span><br><span class="line"><span class="attr">components</span>:&#123;app&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="VueComponent"><a href="#VueComponent" class="headerlink" title="VueComponent"></a>VueComponent</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义school组件</span></span><br><span class="line"><span class="keyword">const</span> school = Vue.extend(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;school&#x27;</span>,</span><br><span class="line"><span class="attr">template</span>:<span class="string">``</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的</span></span><br><span class="line"><span class="comment">// 特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！！</span></span><br></pre></td></tr></table></figure><p><strong>1.关于this指向</strong></p><ol><li><p>组件配置中：</p><p> data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】。</p></li><li><p>new Vue(options)配置中：</p><p>data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。</p></li></ol><p><strong>2.重要的内置关系</strong></p><p><code>VueComponent.prototype.__proto__ === Vue.prototype</code></p><p><em>为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。</em></p><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><blockquote><p>单文件组件由Vue创建的.vue文件，里面有三种标签<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;style&gt;</code></p></blockquote><p><strong>1.组件Vue文件创建</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// JS代码</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// ES6模块化导出三种方式</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">const</span> simple = Vue.extend(&#123;&#125;)</span></span><br><span class="line"><span class="javascript">  </span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> &#123;</span></span><br><span class="line"><span class="javascript">    simple</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  </span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> simple <span class="comment">// 常用该默认导出</span></span></span><br><span class="line"><span class="javascript">  </span></span><br><span class="line"><span class="javascript">  <span class="comment">// Vue.extend 之前解释过可以省略，最后Vue会帮我们调用Vue.extend()</span></span></span><br><span class="line"><span class="javascript">  </span></span><br><span class="line"><span class="javascript">  <span class="comment">// 常用导出形式</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>:<span class="string">&#x27;Simple&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> &#123;&#125; &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/*CSS样式，只对当前组件有效*/</span></span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.App文件管理组件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  将所有的组件，通过App组件来接管</span></span><br><span class="line"><span class="comment">  和嵌套组件的方式差不多，只是需要导入组件 通过 `import xxx form &#x27;./xxx&#x27;`</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Simple form <span class="string">&#x27;./Simple.vue&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>:<span class="string">&#x27;Simple&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> &#123;&#125; &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3.创建Vue实例 <code>main.js</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue选择一个文件命名 main.js 来管理vm</span></span><br><span class="line"><span class="comment">// 只需要导入一个大组件</span></span><br><span class="line"><span class="keyword">import</span> App form <span class="string">&#x27;./App.vue&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>:&#123;App&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>4.index.html使用组件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果不想引用组件，可以在main.js，将vm实例的template属性写入 `&lt;App&gt;`  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入相关JS，在引入Vue.js后，引入main.js--&gt;</span></span><br></pre></td></tr></table></figure><p>PS：目前一切就绪，但是浏览器无法识别ES6语法，更无法加载<code>.vue</code>文件，因此需要打包工具 <code>webpack</code></p><h2 id="初期组件模板分离"><a href="#初期组件模板分离" class="headerlink" title="初期组件模板分离"></a>初期组件模板分离</h2><blockquote><p>抽离组件模板，将模板放置在其它地方，我们将使用两种方法，来抽离。</p></blockquote><h3 id="lt-script-gt-标签"><a href="#lt-script-gt-标签" class="headerlink" title="&lt;script&gt;标签"></a><code>&lt;script&gt;</code>标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">demo</span>&gt;</span><span class="tag">&lt;/<span class="name">demo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  将模板通过 `script` 脚本标签展示</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">message</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"> Vue.component(<span class="string">&#x27;demo&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript">   <span class="attr">template</span>:<span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line"><span class="javascript">   <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> &#123;<span class="attr">message</span>:<span class="string">&#x27;simplelife&#x27;</span>&#125;&#125;</span></span><br><span class="line"><span class="javascript"> &#125;)</span></span><br><span class="line"><span class="javascript">  </span></span><br><span class="line"><span class="javascript"> <span class="comment">//注册根组件省略</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-template-gt-标签"><a href="#lt-template-gt-标签" class="headerlink" title="&lt;template&gt;标签"></a><code>&lt;template&gt;</code>标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">demo</span>&gt;</span><span class="tag">&lt;/<span class="name">demo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  将模板通过 `template` 标签展示</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"> Vue.component(<span class="string">&#x27;demo&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript">   <span class="attr">template</span>:<span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line"><span class="javascript">   <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> &#123;<span class="attr">message</span>:<span class="string">&#x27;simplelife&#x27;</span>&#125;&#125;</span></span><br><span class="line"><span class="javascript"> &#125;)</span></span><br><span class="line"><span class="javascript">  </span></span><br><span class="line"><span class="javascript"> <span class="comment">//注册根组件省略</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><cst class="red">PS：通过脚手架帮我们构建项目，会非常便捷，且易维护。这种早期非单文件分离模板的做法，显然已不再使用</cst></p><h2 id="Vue组件数据-data"><a href="#Vue组件数据-data" class="headerlink" title="Vue组件数据 data"></a>Vue组件数据 data</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Vue组件数据data必须是函数，以保证组件复用性</span></span><br><span class="line"><span class="comment">  通过案例，更改的解答问题</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例一，对象形式</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;simplelife&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = obj</span><br><span class="line"><span class="keyword">var</span> obj2 = obj</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 obj1 修改name 和 age</span></span><br><span class="line">obj1.name = <span class="string">&#x27;life&#x27;</span></span><br><span class="line">obj1.age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj1) <span class="comment">// 打印结果 &#123; name: &#x27;life&#x27; , age:20&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">// 打印结果 &#123; name: &#x27;life&#x27; , age:20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 显然 obj2中的对象也被更改了</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例二，函数形式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;simplelife&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test1 = getName()</span><br><span class="line"><span class="keyword">var</span> test2 = getName()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 obj1 修改name 和 age</span></span><br><span class="line">test1.name = <span class="string">&#x27;life&#x27;</span></span><br><span class="line">test1.age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj1) <span class="comment">// 打印结果 &#123; name: &#x27;life&#x27; , age:20&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">// 打印结果 &#123; name: &#x27;lsimplelifeife&#x27; , age:18&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时修改不会影响到其它的组件，这样就可以放心的复用组件</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>父组件和子组件的通信</title>
      <link href="2021/05/28/vue-component(3)/"/>
      <url>2021/05/28/vue-component(3)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="通信：父传子"><a href="#通信：父传子" class="headerlink" title="通信：父传子"></a>通信：父传子</h2><h3 id="props基本用法"><a href="#props基本用法" class="headerlink" title="props基本用法"></a>props基本用法</h3><blockquote><p>在组件中，使用选项<code>props</code>来声明需要从父级接收到的数据</p><p>props的值有两种方式：一：字符串数组，数组中的字符串就是传递时的名称；二：对象，对象可以设置传递时的类型，也可以设置默认值</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 用v-bind绑定vue id=&quot;app&quot;实例的数据data值，存入子组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpnn</span> <span class="attr">:cpnmovies</span>=<span class="string">&quot;movies&quot;</span> <span class="attr">:cpnmessage</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpnn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;cpnmovies&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;cpnmessage&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 父子通信演示</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 以Vue实例为父组件，该注册为子组件</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 父组件传数据给子组件用props获取</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> cpnn = &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">template</span>:<span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">props</span>:[<span class="string">&#x27;cpnmovies&#x27;</span>,<span class="string">&#x27;cpnmessage&#x27;</span>],</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">movies</span>:[<span class="string">&#x27;海贼王&#x27;</span>,<span class="string">&#x27;西游记&#x27;</span>,<span class="string">&#x27;爱情公寓&#x27;</span>]</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="javascript">      cpnn</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>PS：一开始使用模板的无法获取到message数据，不能展现在hmtl中，然后<code>template</code>标签内添加一个容器div，现在可以完全获取数据展现<code>hmtl</code>中</p><p>在组件需要被一个容器包裹，template解析的时候，发现有多个根元素，就无法判断。因此需要一个容器</p><h3 id="props数据验证"><a href="#props数据验证" class="headerlink" title="props数据验证"></a>props数据验证</h3><blockquote><p>对父组件传递的数据类型，进行锁定。有如下类型：<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Array</code>、<code>Object</code>、<code>Data</code>、<code>Function</code>、<code>Sysmbol</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1) 数组传递形式</span></span><br><span class="line"><span class="keyword">const</span> cpnn = &#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;#cpn&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>:[<span class="string">&#x27;cpnmovies&#x27;</span>,<span class="string">&#x27;cpnmessage&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) 对象传递形式，只确认数据类型</span></span><br><span class="line"><span class="keyword">const</span> cpnn1 = &#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;#cpn&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">cpnmovies</span>:<span class="built_in">Array</span>,</span><br><span class="line">    <span class="attr">cpnmessage</span>:<span class="built_in">String</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (3) 对象传递形式，完整形式</span></span><br><span class="line"><span class="comment">// type：类型、default：默认值、required：必须传入该值【true】</span></span><br><span class="line"><span class="keyword">const</span> cpnn2 = &#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;#cpn&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">cpnmessage</span>:&#123;</span><br><span class="line">      <span class="attr">type</span>:<span class="built_in">String</span>,</span><br><span class="line">      <span class="attr">default</span>:<span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line">      <span class="attr">required</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (3) 数据类型不同默认值写法不同，比如是Object或Array</span></span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">  <span class="attr">propE</span>:&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="built_in">Object</span>,</span><br><span class="line">    <span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class="line">    <span class="attr">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方示例</span></span><br><span class="line">Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span></span><br><span class="line">    <span class="attr">propA</span>: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多个可能的类型</span></span><br><span class="line">    <span class="attr">propB</span>: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必填的字符串</span></span><br><span class="line">    <span class="attr">propC</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的数字</span></span><br><span class="line">    <span class="attr">propD</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的对象</span></span><br><span class="line">    <span class="attr">propE</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class="line">      <span class="attr">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    <span class="attr">propF</span>: &#123;</span><br><span class="line">      <span class="attr">validator</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>].indexOf(value) !== -<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><p>props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。(<cst>props比data数据优先级更高，且不能在data重名</cst>)</p><p>一般完整属性的 <code>required </code>和 <code>default </code>不会同时使用</p><hr><h2 id="通信：子传父"><a href="#通信：子传父" class="headerlink" title="通信：子传父"></a>通信：子传父</h2><blockquote><p>父组件访问子组件的数据，通过<code>$children</code> 和 <code>$ref</code></p></blockquote><h3 id="children"><a href="#children" class="headerlink" title="$children"></a><code>$children</code></h3><p>了解<code>$children</code>属性的根源，可以通过<code>methods</code>，去<code>console.log(this)</code> 输出一下 this，可以得到如下</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//image-20211031214503481.png" alt="image-20211031214503481"></p><p>组件实例对象都有 <code>$children</code> 属性。如果你在该组件上注册了子组件，那么<code>$children</code>属性就有子组件的 <code>this</code>属性，可以获取到 <code>data </code>数据。</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//image-20211031220419184.png" alt="image-20211031220419184"></p><h3 id="refs"><a href="#refs" class="headerlink" title="$refs"></a><code>$refs</code></h3><blockquote><p><code>$refs</code>跟<code>$children</code>一样是Vue实例对象上的属性，默认是空对象。需要子组件去绑定</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用 $refs 访问子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 4. 绑定ref值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">&quot;app1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;printlog&quot;</span>&gt;</span>输出打印结果<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 省略子组件 cpn 的创建，直接注册</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="javascript">      cpn</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">printlog</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 通过之间的学习，函数里面的this是指向Vue实例对象的</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.app1) <span class="comment">// 打印的是 子组件this</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.app1 === <span class="built_in">this</span>.$children[<span class="number">0</span>]) <span class="comment">//logs true</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  console.log(this.$refs.app1 === this.$children[0])</span></span><br><span class="line"><span class="comment">  打印结果返回 true，表示通过 ref绑定值获取到的 全等 $children 获取的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p><strong>ref绑定元素</strong><br>  <code>ref </code>同样可以用来绑定容器下的元素，效果就是真实DOM<br>  等同于 <code>getElementById </code>获取</p><p><strong>总结</strong></p><p>通过 <code>$children</code>、<code>$refs </code>都能获取到子组件的this属性，前者是通过数组的形式，将注册的组件存放起来；后者是通过对象的形式，将绑定了<code>ref=&quot;name&quot;</code>值，存储。</p><p>如果你只需要个别组件的属性，可以通过绑定 <code>ref</code> 值去指定获取；如果需要对每一个子组件属性进行使用，可以通过遍历数据的方式遍历 <code>$children</code> 数组</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Components </category>
          
      </categories>
      
      
        <tags>
            
            <tag> props </tag>
            
            <tag> data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计数器实例</title>
      <link href="2021/05/28/vue-component(6)/"/>
      <url>2021/05/28/vue-component(6)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h2><blockquote><p>计数器实例：子组件从父组件获取counter数据，子组件有两个button按钮，通过点击事件<code>$emit()</code>向父级传递事件，在父级的emthods写方法，来改变counter值</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子组件有+-按钮，父组件有counter数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">:childcounter</span>=<span class="string">&quot;counter&quot;</span> @<span class="attr">subnumber</span>=<span class="string">&quot;fathersubnumber&quot;</span> @<span class="attr">addnumber</span>=<span class="string">&quot;fatheraddnumber&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数:&#123;&#123;childcounter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;childsubnumber&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;childaddnumber&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> child = &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">template</span>:<span class="string">&#x27;#child&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">message</span>:<span class="string">&#x27;hello child&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">childsubnumber</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$emit(<span class="string">&#x27;subnumber&#x27;</span>);</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">childaddnumber</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$emit(<span class="string">&#x27;addnumber&#x27;</span>);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">props</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">childcounter</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">type</span>:<span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">default</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">required</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">message</span>:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">counter</span>:<span class="number">0</span></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">fathersubnumber</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.counter--;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">fatheraddnumber</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.counter++;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="javascript">child</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Components </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件化开发</title>
      <link href="2021/05/28/vue-components/"/>
      <url>2021/05/28/vue-components/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="page-header"><h2 class="huise">Vue组件的基本使用</h2><p>    学习掌握全局组件和局部组件    <a class="btn-beautify button--animated block right larger" href="/2021/05/28/vue-baseuse/"   title="Vue组件的基本使用"><i class="far fa-hand-point-right"></i><span>Vue组件的基本使用</span></a></p></div><div class="page-header"><h2 class="purple">父组件和子组件的通信</h2><p>   父传子：props基本用法、props数据验证和Data中的数据类型；子传父：`$children`,`$refs`    <a class="btn-beautify button--animated block right purple larger" href="/2021/05/28/vue-component(3)/"   title="父子通信"><i class="far fa-hand-point-right"></i><span>父子通信</span></a></p></div><div class="page-header"><h2 class="huise">计数器实例</h2><p>子组件从父组件获取counter数据，子组件有两个button按钮，通过点击事件$emit()向父级传递事件，在父级的methods写方法，来改变counter值<a class="btn-beautify button--animated block right larger" href="/2021/05/28/vue-component(6)/"   title="计数器实例"><i class="far fa-hand-point-right"></i><span>计数器实例</span></a></p></div><div class="page-header"><h2 class="pink">插槽slot</h2><p>了解插槽Slot的基本使用、学习新概念具名，通过给slot添加值name，指定修改内容、理解插槽作用域：父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的<a class="btn-beautify button--animated block right pink larger" href="/2021/05/13/Vue_slot/"   title="插槽slot"><i class="far fa-hand-point-right"></i><span>插槽slot</span></a></p></div>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Components </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-CLI 脚手架</title>
      <link href="2021/05/27/vue-cli/"/>
      <url>2021/05/27/vue-cli/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2>  <p>右方是一个vue官方脚手架链接，写了更为详细的介绍    <a class="btn-beautify button--animated block outline blue right larger" href="https://cli.vuejs.org/zh/guide/"   title="官方文档"><i class="far fa-hand-point-right"></i><span>官方文档</span></a></p><p><cst>CLI</cst>：全称Command-Line interface，翻译为命令行界面，但俗称脚手架</p><p>Vue CLI 是一个基于Vue.js 进行快速开发的完整系统，使用vue-cli 可以快速搭建Vue开发环境以及对应的webpack配置</p><p>Vue CLI 致力于将 Vue 生态中的<cst>工具基础标准化</cst>。它确保了各种构建工具能够基于智能的<cst>默认配置</cst>即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去<cst>纠结配置的问题</cst>。与此同时，它也为每个工具提供了调整配置的<cst>灵活性</cst>，无需 eject。</p><h2 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h2><p>CLI (<code>@vue/cli</code>) 是一个全局安装的 npm 包，提供了终端里的 <code>vue</code> 命令。它可以通过 <code>vue create</code> 快速搭建一个新项目，或者直接通过 <code>vue serve</code> 构建新想法的原型。你也可以通过 <code>vue ui</code> 通过一套图形化界面管理你的所有项目。我们会在接下来的指南中逐章节深入介绍。</p><h2 id="CLI-服务"><a href="#CLI-服务" class="headerlink" title="CLI 服务"></a>CLI 服务</h2><p>CLI 服务 (<code>@vue/cli-service</code>) 是一个开发环境依赖。它是一个 npm 包，局部安装在每个 <code>@vue/cli</code> 创建的项目中。</p><p>CLI 服务是构建于 <a href="http://webpack.js.org/">webpack</a> 和 <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> 之上的。它包含了：</p><ul><li>加载其它 CLI 插件的核心服务；</li><li>一个针对绝大部分应用优化过的内部的 webpack 配置；</li><li>项目内部的 <code>vue-cli-service</code> 命令，提供 <code>serve</code>、<code>build</code> 和 <code>inspect</code> 命令。</li></ul><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="关于旧版本"><a href="#关于旧版本" class="headerlink" title="关于旧版本"></a>关于旧版本</h3><p>Vue CLI 的包名称由 <code>vue-cli</code> 改成了 <code>@vue/cli</code>。 如果你已经全局安装了旧版本的 <code>vue-cli</code> (1.x 或 2.x)，你需要先通过 <code>npm uninstall vue-cli -g</code> 或 <code>yarn global remove vue-cli</code> 卸载它。</p><h3 id="Node-版本要求"><a href="#Node-版本要求" class="headerlink" title="Node 版本要求"></a>Node 版本要求</h3><p>Vue CLI 4.x 需要 <a href="https://nodejs.org/">Node.js</a> v8.9 或更高版本 (推荐 v10 以上)。你可以使用 <a href="https://github.com/tj/n">n</a>，<a href="https://github.com/creationix/nvm">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows">nvm-windows</a> 在同一台电脑中管理多个 Node 版本。</p><h3 id="使用npm-或-yarn-安装"><a href="#使用npm-或-yarn-安装" class="headerlink" title="使用npm 或 yarn 安装"></a>使用npm 或 yarn 安装</h3><p><cst>自动安装的是最新版3.0以上，如果需要使用2.0Vue-CLi，那么我们下面将会提到拉取CLI2.0模板</cst></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><h3 id="检查版本"><a href="#检查版本" class="headerlink" title="检查版本"></a>检查版本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">vue -V</span><br></pre></td></tr></table></figure><h3 id="拉取Vue2-x模板-旧版本"><a href="#拉取Vue2-x模板-旧版本" class="headerlink" title="拉取Vue2.x模板(旧版本)"></a>拉取Vue2.x模板(旧版本)</h3><p>Vue CLI &gt;= 3 和旧版使用了相同的 <code>vue</code> 命令，所以 Vue CLI 2 (<code>vue-cli</code>) 被覆盖了。如果你仍然需要使用旧版本的 <code>vue init</code> 功能，你可以全局安装一个桥接工具：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br><span class="line"><span class="comment"># `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同</span></span><br><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure><hr><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="vue-create"><a href="#vue-create" class="headerlink" title="vue create"></a>vue create</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> create hello-vue <span class="comment">#创建3.0脚手架</span></span><br><span class="line"><span class="comment"># hello-vue 是项目名字</span></span><br><span class="line">vue init webpack hello-vue <span class="comment">#创建2.0脚手架</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210527213221.png"></p><blockquote><p> 使用vue create创建vue项目，会弹出默认default和Manually select features(手动选择)。Default Vue 2 是Vue2.x版本、Default Vue 3 是Vue3.x版本</p></blockquote><h3 id="选择-Default"><a href="#选择-Default" class="headerlink" title="选择[Default]"></a>选择[Default]</h3><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210527213642.png" alt="安装中"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210527213849.png"></p><blockquote><p>输入命令后，直接安装好项目了。使用命名<code>cd vue-cli</code>进入我的项目，<code>npm run serve</code> 运行本地服务器，脚手架是自动配置了本地服务器。</p></blockquote><h3 id="选择Manually-select-features"><a href="#选择Manually-select-features" class="headerlink" title="选择Manually select features"></a>选择Manually select features</h3><p>自定义选择一些配置，如果你倾向于快速创建，选择默认。<cst>可以通过空格选中/取消，选中你需要的功能回车创建项目</cst></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210531155700.png"></p><h2 id="使用旧版本方式创建Vue2-x项目"><a href="#使用旧版本方式创建Vue2-x项目" class="headerlink" title="使用旧版本方式创建Vue2.x项目"></a>使用旧版本方式创建Vue2.x项目</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> init webpack project</span><br></pre></td></tr></table></figure><p><strong>? Project name (hello-vue-2.x)</strong></p><p>确认项目名字，如果你需要修改，直接输入名字，不修改就回车</p><p><strong>? Project description (A Vue.js project)</strong></p><p>项目描述说明，不更改回车</p><p> <strong>? Author (alovelyyou&lt;noti163@163.com)</strong></p><p>默认是读取C盘Confjg配置文件的名字&amp;&amp;邮箱</p><p> <strong>?Runtime Compiler &amp;&amp; Runtime-only</strong></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210528082820.png"></p><p>前者能够解析<code>template</code>模板，因为有Compiler。后者无法解析，但是更小，在项目开发时，会使用这个，使用某种方法可以解决无法解析<code>template</code>的问题。目前我们暂时选择前者</p><p> <strong>? Install vue-router? (Y/n)</strong></p><p>是否下载Vue路由，这是暂时不使用vue路由，因此选择<code>n</code></p><p> <strong>? Use ESLint to lint your code? (Y/n)</strong></p><p>规范代码的，如果你写代码，经常随意空格，没有去规范书写，那么你可以选择<code>Y</code>。这里我选择<code>n</code></p><blockquote><p>通过我们会通过ESLint管理我们的代码，但开发的时候，会将它暂时关闭，等上线项目，开启检测一下。通过配置<code>vue.config.js</code>文件，可以开启或关闭。</p></blockquote><p><strong>? Set up unit tests (Y/n)</strong></p><p>是否设置单元测试，这里我选择<code>n</code></p><p> <strong>? Setup e2e tests with Nightwatch? (Y/n)</strong><br>e2e就是端到端测试，不需要设置n</p><p><strong>？选择 NPM 或 Yarn 管理项目</strong></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210528083540.png"></p><h2 id="认识vue-CLI3"><a href="#认识vue-CLI3" class="headerlink" title="认识vue-CLI3"></a>认识vue-CLI3</h2><h3 id="vue-cli-3-与-2-版本有很大的区别"><a href="#vue-cli-3-与-2-版本有很大的区别" class="headerlink" title="vue cli 3 与 2 版本有很大的区别"></a>vue cli 3 与 2 版本有很大的区别</h3><ol><li>vue-cli 3 是基于 webpack 4 打招，vue-cli 2 还是webpack 3</li><li>vue-cli 3 的设计原则 “0配置”，移除的配置文件根目录下的<code>build</code> 和 <code>config</code>等目录</li><li>vue-cli 3 提供了vue ui命令，提供了可视化配置，更加人性化</li><li>提出了static，新增了public文件夹，并且index.html移到了public中</li></ol><p><strong>内置了vue ui命令，可以修改配置文件</strong></p><p><code>vue ui </code> 进入ui界面，可以通过导入创建的vue-cli3 项目，然后修改配置文件</p><hr><h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//image-20211101111220519.png" alt="image-20211101111220519"></p><p><strong>1.main.js 入口文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  该文件是整个项目的入口文件</span></span><br><span class="line"><span class="comment">  引入的vue文件是一个残缺的文件，不携带解析模板内容</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App组件，它是所有组件的父组件</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Vue实例对象---vm</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">//render函数完成了这个功能：将App组件放入容器中</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  <span class="comment">// template:`&lt;h1&gt;你好啊&lt;/h1&gt;`,</span></span><br><span class="line">  <span class="comment">// components:&#123;App&#125;,</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// render函数的还原</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// 接收 createElement 函数，Vue会调用render帮我们渲染App组件</span></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">createElement</span>)</span>&#123;</span><br><span class="line">    createElement(<span class="string">&#x27;&lt;h1&gt;&lt;/h1&gt;&#x27;</span>,<span class="string">&#x27;内容&#x27;</span>); <span class="comment">// =&gt; createElement(App)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  关于不同版本的Vue：</span></span><br><span class="line"><span class="comment">    1.vue.js与vue.runtime.xxx.js的区别：</span></span><br><span class="line"><span class="comment">        (1).vue.js是完整版的Vue，包含：核心功能+模板解析器。</span></span><br><span class="line"><span class="comment">        (2).vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</span></span><br><span class="line"><span class="comment">    2.因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用</span></span><br><span class="line"><span class="comment">      render函数接收到的createElement函数去指定具体内容。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>2.vue.config.js 配置文件</strong></p><p>在Vue-CLI3以上版本，对webpack的配置文件进行了隐藏，Vue不再允许你去修改它，但是创建了其它修改的方式</p><p>在项目下，创建 <code>vue.config.js</code> 文件，里面的配置内容最终会去合并webpack配置</p><a class="btn-beautify button--animated block blue right larger" href="https://cli.vuejs.org/zh/config/#vue-config-js"   title="配置文档"><i class="far fa-hand-point-right"></i><span>配置文档</span></a><h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin 混入"></a>mixin 混入</h2><p>通过 mixin 混入配置，可以把多个组件共用的配置提取成一个混入对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  如下两个组件，需要一样的age 和 一样的 getWebName 函数，因此需要 mixin 混入进行配置</span></span><br><span class="line"><span class="comment">  让组件复用配置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 组件一</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"> <span class="attr">name</span>:<span class="string">&#x27;simple1&#x27;</span></span><br><span class="line"> <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span>&#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;simplelife1&#x27;</span></span><br><span class="line">     <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">methods</span>:&#123;</span><br><span class="line">   <span class="function"><span class="title">getWebName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件二</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"> <span class="attr">name</span>:<span class="string">&#x27;simple2&#x27;</span></span><br><span class="line"> <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span>&#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;simplelif2&#x27;</span></span><br><span class="line">     <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">methods</span>:&#123;</span><br><span class="line">   <span class="function"><span class="title">getWebName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>1.创建mixin.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 局部 mixin</span></span><br><span class="line"><span class="comment">// 将混入的名称，暴露出来</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin = &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="function"><span class="title">getWebName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以有多个配置模式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin2 = &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.有混入的配置，组件省略相同的部分</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入混入文件</span></span><br><span class="line"><span class="keyword">import</span> &#123;mixin,mixin2&#125; <span class="keyword">from</span> <span class="string">&#x27;./mixin.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"> <span class="attr">name</span>:<span class="string">&#x27;simple1&#x27;</span></span><br><span class="line"> <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span>&#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;simplelife1&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">mixins</span>:[mixin,mixin2]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件二</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"> <span class="attr">name</span>:<span class="string">&#x27;simple2&#x27;</span></span><br><span class="line"> <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span>&#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;simplelif2&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">mixins</span>:[mixin,mixin2]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>3.全局配置混入</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 main.js 文件进行混入，所有的组件都进行配置合并</span></span><br><span class="line"><span class="comment">// 导入混入文件</span></span><br><span class="line"><span class="keyword">import</span> &#123;mixin,mixin2&#125; <span class="keyword">from</span> <span class="string">&#x27;./mixin.js&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.mixin(mixin)</span><br><span class="line">Vue.mixin(mixin2)</span><br></pre></td></tr></table></figure><p><strong>4.注意</strong></p><p>混入存在优先级，如果组件存在该配置，则不会被替换。</p><p>如 data属性存在 age 数据，mixin混入也存在age数据，则以组件的为准</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>功能：用于增强Vue</p><p> 本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p><p><strong>1.在项目文件下，创建plugins.js 文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了一些全局属性</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">install</span>(<span class="params">Vue,x,y,z</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x,y,z)</span><br><span class="line">    <span class="comment">//全局过滤器</span></span><br><span class="line">    Vue.filter(<span class="string">&#x27;mySlice&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value.slice(<span class="number">0</span>,<span class="number">4</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义全局指令</span></span><br><span class="line">    Vue.directive(<span class="string">&#x27;fbind&#x27;</span>,&#123;</span><br><span class="line">      <span class="comment">//指令与元素成功绑定时（一上来）</span></span><br><span class="line">      <span class="function"><span class="title">bind</span>(<span class="params">element,binding</span>)</span>&#123;</span><br><span class="line">        element.value = binding.value</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//指令所在元素被插入页面时</span></span><br><span class="line">      <span class="function"><span class="title">inserted</span>(<span class="params">element,binding</span>)</span>&#123;</span><br><span class="line">        element.focus()</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//指令所在的模板被重新解析时</span></span><br><span class="line">      <span class="function"><span class="title">update</span>(<span class="params">element,binding</span>)</span>&#123;</span><br><span class="line">        element.value = binding.value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义混入</span></span><br><span class="line">    Vue.mixin(&#123;</span><br><span class="line">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">x</span>:<span class="number">100</span>,</span><br><span class="line">          <span class="attr">y</span>:<span class="number">200</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给Vue原型上添加一个方法（vm和vc就都能用了）</span></span><br><span class="line">    Vue.prototype.hello = <span class="function">()=&gt;</span>&#123;alert(<span class="string">&#x27;你好啊&#x27;</span>)&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.在main.js 引用插件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//引入插件</span></span><br><span class="line"><span class="keyword">import</span> plugins <span class="keyword">from</span> <span class="string">&#x27;./plugins&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//应用（使用）插件，options 是可选参数</span></span><br><span class="line">Vue.use(plugins,options……)</span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>3.使用插件的方式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将来可以引入他人写的插件，来增强Vue</span></span><br><span class="line"><span class="comment">// 使用的方式 类似NodeJS的中间件 use</span></span><br><span class="line">Vue.use(plugins)</span><br></pre></td></tr></table></figure><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 ===&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></li><li>第二种方式，在父组件中：</li></ol></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Demo ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">**......**</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$refs.xxx.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="built_in">this</span>.test)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li><li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code>   </p></li><li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><p><strong>App.vue</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- (1)通过父组件给子组件传递函数类型的props实现：子给父传递数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">School</span> <span class="attr">:getSchoolName</span>=<span class="string">&quot;getSchoolName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第一种写法，使用@或v-on） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Student</span> @<span class="attr">simplelife</span>=<span class="string">&quot;getStudentName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第二种写法，使用ref） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Student</span> <span class="attr">ref</span>=<span class="string">&quot;student&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;show&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Student <span class="keyword">from</span> <span class="string">&#x27;./components/Student&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> School <span class="keyword">from</span> <span class="string">&#x27;./components/School&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>:&#123;School,Student&#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">msg</span>:<span class="string">&#x27;你好啊！&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">studentName</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">getSchoolName</span>(<span class="params">name</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;App收到了学校名：&#x27;</span>,name)</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">getStudentName</span>(<span class="params">name,...params</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;App收到了学生名：&#x27;</span>,name,params)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.studentName = name</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs.student.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="built_in">this</span>.getStudentName) <span class="comment">//绑定自定义事件</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// this.$refs.student.$once(&#x27;atguigu&#x27;,this.getStudentName) //绑定自定义事件（一次性）</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>School.vue &amp;&amp; Student.vue</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;school&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendSchoolName&quot;</span>&gt;</span>把学校名给App<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">props</span>:[<span class="string">&#x27;getSchoolName&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">sendSchoolName</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.getSchoolName(<span class="built_in">this</span>.name)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendStudentlName&quot;</span>&gt;</span>把学生名给App<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">sendStudentlName</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//触发Student组件实例身上的simplelife事件</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;simplelife&#x27;</span>,<span class="built_in">this</span>.name,<span class="number">666</span>,<span class="number">888</span>,<span class="number">900</span>)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>父组件App.vue，给引用的子组件Student.vue 绑定自定义事件 <code>&lt;Student @simplelife=&quot;getStudentName&quot;/&gt;</code>，在子组件的实例对象身上可以使用<code>$emit</code>去触发这个事件 <code>this.$emit(&#39;simplelife&#39;,options)</code></p><p>父组件不仅可以传递参数给子组件，而且可以传递函数。然后子组件可以调用父组件的函数，达到目的</p><p>父组件可以通过<code>$children</code> 和 <code>$refs</code> 获取到子组件的实例对象</p><p><strong>解绑事件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给组件绑定了事件，就在该组件去解绑</span></span><br><span class="line"><span class="comment">// 当事件不使用了，就销毁该事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line"><span class="built_in">this</span>.$emit(<span class="string">&#x27;simplelife&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解绑单个事件】</span></span><br><span class="line"><span class="built_in">this</span>.$off(<span class="string">&#x27;simplelife&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解绑多个事件</span></span><br><span class="line"><span class="built_in">this</span>.$off([<span class="string">&#x27;simplelife&#x27;</span>,<span class="string">&#x27;life&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解绑全部事件</span></span><br><span class="line"><span class="built_in">this</span>.$off()</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ol><li><p><code>&lt;Student ref=&quot;student&quot; @click=&quot;show&quot;/&gt;</code> 在组件绑定事件，Vue都认为是自定义事件，需要<code>$emit</code> 去触发</p><p>在事件名上加上修饰符，表示原始事件 <code>@click.native=&quot;show&quot;</code> ，当Vue处理的时候，会把点击事件给组件的容器</p></li></ol><h2 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"> <span class="comment">//......</span></span><br><span class="line"> <span class="comment">// 利用钩子函数，在vm未渲染模板之前，安装全局事件总线</span></span><br><span class="line"> <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   Vue.prototype.$bus = <span class="built_in">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line"> &#125;,</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ul><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件A</span></span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> &#123;<span class="attr">name</span>:<span class="string">&#x27;我叫simplelife&#x27;</span>&#125;&#125;,</span><br><span class="line"><span class="function"><span class="title">methods</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 点击A组件按钮，就会和B进行交互，B得到了A的name数据</span></span><br><span class="line">  <span class="function"><span class="title">sendName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.$bus.$emit(<span class="string">&#x27;simplelife&#x27;</span>,<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件B</span></span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 绑定事件 `simplelife` 调用demo函数</span></span><br><span class="line">  <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;simplelife&#x27;</span>,<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 使用箭头函数是确保this指向是组件实例对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</li></ol><h2 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ul><li>安装pubsub：<code>npm i pubsub-js</code></li><li>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></li></ul></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件A订阅消息，接收数据</span></span><br><span class="line"><span class="function"><span class="title">methods</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">demo</span>(<span class="params">data</span>)</span>&#123;**......**&#125;</span><br><span class="line">&#125;</span><br><span class="line">**......**</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 订阅的消息会接收一个id，用于取消订阅的</span></span><br><span class="line">  <span class="built_in">this</span>.pid = pubsub.subscribe(<span class="string">&#x27;xxx&#x27;</span>,<span class="built_in">this</span>.demo) <span class="comment">//订阅消息</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// (2) 第二种写法</span></span><br><span class="line">  pubsub.subscribe(<span class="string">&#x27;xxx&#x27;</span>,<span class="function">(<span class="params">msgName,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 使用箭头函数，可以将this指向Vue实例</span></span><br><span class="line">    <span class="comment">// msgName 消息名、data 传递的数据；当传递数据会将第一个形参作为</span></span><br><span class="line">    <span class="comment">// msgName ，第二次形参才是接收的数据</span></span><br><span class="line">  &#125;) </span><br><span class="line">  </span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  pubsub.unsubscribe(<span class="built_in">this</span>.pid) <span class="comment">// 销毁前取消订阅</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 组件B发布消息，传递数据</span></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="function"><span class="title">publishMessage</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    pubsub.publish(<span class="string">&#x27;xxx&#x27;</span>,<span class="number">666</span>) <span class="comment">// 消息名 xxx , 数据 666</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol><p>  <strong>总结</strong></p><p>使用 <code>pubsub-js</code>能够使用任意组件的通信，和 Vue 的事件总线是一样，但是它能在任意框架中实现组件通信，不过在Vue会比较少用，毕竟Vue实现了任意组件通信的功能</p><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Vue 准备了一个API `$nextTick` 让DOM重新编译了才执行的函数</span></span><br><span class="line"><span class="comment">  有一个要求，需要给input框显示的时候就加上焦点，如下</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="function"><span class="title">inputShow</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 假设数据改变了，Vue要重新遍历模板了</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 然后给input添加焦点</span></span><br><span class="line">    input.focus() <span class="comment">// 显示焦点</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  如上的写法，能让input显示的时候，出现焦点吗</span></span><br><span class="line"><span class="comment">  显示是不可能的，Vue在重新解析模板的时候，不是数据一改变就编译</span></span><br><span class="line"><span class="comment">  而是等方法执行结束，才重新编译；那时input还是隐藏的，因此调用</span></span><br><span class="line"><span class="comment">  focus() 方法是没有用的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  利用$textTick解决这个问题 </span></span><br><span class="line"><span class="comment">  当方法执行到 $nextTick Vue就知道，需要去解析模板后才能调用它</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  input.focus()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h2><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//image-20211103112052537.png" alt="image-20211103112052537"></p></li></ol><ol start="3"><li>写法</li></ol><ul><li>动画的形式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      Vue对过渡动画准备了一个容器，去包裹；</span></span><br><span class="line"><span class="comment">      使用 transition，且只有一个节点，如果要给多个子节点，用相同的动画</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      添加了name=&quot;simple&quot;属性值，该容器只调用 simple-enter-active 和 simple-leave-active 类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      添加 apper / :apper=&#x27;true&#x27; 属性，动画会自动执行一次（显示 or 隐藏）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;simple&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>有动画效果的文字<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">  (1) 第一种方式需要自己写动画 </span></span></span><br><span class="line"><span class="comment"><span class="css">      在 &lt;transition&gt; 标签包裹的会自动调用 v-enter-active 和 v-leave-active 的类</span></span></span><br><span class="line"><span class="comment"><span class="css">      默认Vue调用的类名是 v-enter-active，在标签transtion 中有一个属性name 可以更改默认名</span></span></span><br><span class="line"><span class="comment"><span class="css">*/</span> </span></span><br><span class="line"><span class="css">  <span class="keyword">@keyframes</span> myfirst</span></span><br><span class="line"><span class="css">  &#123;</span></span><br><span class="line"><span class="css">    <span class="comment">/*隐藏到显示的动画*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">form</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>)&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">to</span>   &#123; <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>)&#125;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.v-enter-active</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">animation</span>: myfirst <span class="number">0.5s</span> linear;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.v-leave-active</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">animation</span>: myfirst <span class="number">0.5s</span> linear reverse; <span class="comment">/* 反转动画 */</span></span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>过渡的形式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  (2) 使用CSS3过渡</span></span><br><span class="line"><span class="comment">      Vue提供过渡完整的类有6个</span></span><br><span class="line"><span class="comment">      进入：v-enter、v-enter-to、v-enter-active</span></span><br><span class="line"><span class="comment">      离开：v-leave、v-leave-to、v-leave-active</span></span><br><span class="line"><span class="comment">--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;simple&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>有动画效果的文字<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 进入的起点、离开的终点 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.simple-enter</span>,<span class="selector-class">.simple-leave-to</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.simple-enter-active</span>,<span class="selector-class">.simple-leave-active</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition</span>: <span class="number">0.5s</span> linear;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 进入的终点、离开的起点 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.simple-enter-to</span>,<span class="selector-class">.simple-leave</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>引入动画库 <code>animate.css</code> ，<a href="https://animate.style/">官网地址</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">$ npm install animate.css --save</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;animate.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部样式</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">/&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  在Vue组件中使用</span></span><br><span class="line"><span class="comment">  transtion标签的name值必须是 name=&quot;animate__animated animate__bounce&quot; </span></span><br><span class="line"><span class="comment">  enter-active-class=&quot;animate__swing&quot; 指定动画进入类名</span></span><br><span class="line"><span class="comment">  leave-active-class=&quot;animate__backOutUp&quot; 指定动画离开类名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;animate__animated animate__bounce&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">enter-active-class</span>=<span class="string">&quot;animate__swing&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">leave-active-class</span>=<span class="string">&quot;animate__backOutUp&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;!isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>你好啊！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>尚硅谷！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&#x27;animate.css&#x27;</span> <span class="comment">// 引入</span></span></span><br><span class="line"><span class="javascript">  </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="comment">/*  样式只需要写元素的基本样式 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>你好啊！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</li></ol><h2 id="Vue脚手架配置代理"><a href="#Vue脚手架配置代理" class="headerlink" title="Vue脚手架配置代理"></a>Vue脚手架配置代理</h2><p>前端在请求数据，因为同源策略，会导致跨域CROS。Vue通过axios请求数据，同样也出现了CROS问题，因此VUE-CLI给我们提供看配置代理，来解决这个问题</p><p>Vue脚手架给我们提供了代理服务器，我们向代理服务器发送请求，然后代理服务器和目标服务器发送请求，因为服务器之间是不存在跨域的，因此代理服务可以接收到数据。前端和代理服务器都是同样的地址，同端口，不发送跨域</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p> 在vue.config.js中添加如下配置：<a href="https://cli.vuejs.org/zh/config/#devserver-proxy">https://cli.vuejs.org/zh/config/#devserver-proxy</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span> <span class="comment">// 发送请求的目标地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端请求模拟 ，假设自己的地址 localhost:8080</span></span><br><span class="line"><span class="comment">// 请求地址和本机地址一样，才不会发送跨域，当请求 http://locahost:8080 会到代理服务器中</span></span><br><span class="line"><span class="comment">// 代理服务器 再向目标服务器发送请求</span></span><br><span class="line">axios.get(<span class="string">&#x27;http://locahost:8080&#x27;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。当前端有该请求地址的文件，则不会走代理，会导致请求的是错误数据</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p> 编写vue.config.js配置具体代理规则：</p><p>可以配置多个代理，还能去控制是否走代理。在请求的地址会加上前缀，让代理服务器知道本地没有，一定要去目标服务器请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">&#x27;http://localhost:8080/api1&#x27;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  http://localhost:8080/api1 请求的代理服务器 前缀是 &#x27;api1&#x27; </span></span><br><span class="line"><span class="comment">  pathRewrite: &#123;&#x27;^/api1&#x27;: &#x27;&#x27;&#125; 作用用于将前缀取消掉</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h2 id="Ajax请求"><a href="#Ajax请求" class="headerlink" title="Ajax请求"></a>Ajax请求</h2><p>发送Ajax请求，有很多种如<code>xhr</code>、<code>JQuery</code>、<code>axios</code>、<code>vue-resource</code></p><p>Vue在1.0使用<code>vue-resource</code> 发送Ajax请求非常频繁，目前已经不再有Vue团队维护，Vue土推荐使用 <code>axios</code> 发送Ajax请求</p><p><strong>了解 vue-resource 的使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">$ npm i vue-resource</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装的是插件，需要通过use使用</span></span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> vueResource <span class="keyword">from</span> <span class="string">&#x27;vue-resource&#x27;</span></span><br><span class="line">Vue.use(vueResource) <span class="comment">// 使用</span></span><br><span class="line"><span class="comment">// 给所有组件Vue实例对象下，添加了 $http 属性。用于Ajax请求，使用方式和axios一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用请求，this是组件实例对象</span></span><br><span class="line"><span class="built_in">this</span>.$http.get(<span class="string">&#x27;url&#x27;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res) <span class="comment">// 返回的数据</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Vue-CLI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚手架 </tag>
            
            <tag> Vue2.x </tag>
            
            <tag> Vue3.x </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建本地服务器</title>
      <link href="2021/05/26/buildserver/"/>
      <url>2021/05/26/buildserver/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="page-header">  <h2>搭建本地服务器</h2>  <p>    webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js,内部使用<cst>express框架</cst>，可以实现我们想要的让浏览器<cst>自动刷新</cst>显示我们的打包结果  </p>  <p>    在开发项目时，经常需要打包项目，瞅一瞅啥样子。但是妮，通过npm打包项目，很费时间，因此我们需要<cst>搭建本地服务器</cst>，让内存缓存项目，通过<cst>localhost的方式</cst>，来打开网页。  </p></div><blockquote><p><cst>总结搭建心得</cst>：学习webpack时，需要安装各种依赖，如果安装的依赖不兼容就无法允许，因此我也遇到了这个问题。在webpack4.0以上，都需要安装webpack-cli，但是安装的webpack-cli可能与webpack-dev-server不兼容，因此我们无法运行本地服务器</p></blockquote><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure><p><b>devserver 也是作为webpack中的一个选项，选项本身可以设置如下属性</b></p><ul><li><code>contentBase</code>：为哪一个文件夹提供本地服务器，默认是根文件夹，我们这里填写<code>./dist</code></li><li><code>port</code>：端口号</li><li><code>inline</code>：页面实时刷新</li><li><code>historyApiFallback</code>：在SPA页面，中依赖HTML5的history模式</li></ul><p><b>webpack.config.js</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">        <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">        <span class="attr">inline</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210526102213.png"></p><p><b>package.json</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server&quot;</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server&quot;</span> <span class="comment">//启动本地服务器</span></span><br><span class="line"><span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --open&quot;</span> <span class="comment">//直接打开浏览器</span></span><br></pre></td></tr></table></figure><blockquote><p>如果我们没有去配置”scripts”，那么我们直接运行<code>webpack-dev-server</code>是运行全局的，但是我们并没有在全局安装</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210526102449.png"></p><p>在<code>node_modules</code>安装了我们的本地服务器，因此在脚本配置<code>webpack-dev-server</code>，通过<code>npm run dev</code>启动服务器。然后它会在本地找这个服务器，如果没有才去全局找</p><p><b class="red">Warning</b></p><p>这时你是无法启动本地服务器的，如果你的是4.0以上的webpack，那么肯定存在依赖不兼容的问题</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p><cst>降级处理</cst>：将4.0以上版本的webpack，降级安装3.6.0。但是新版出来了不使用，还要使用旧版本。4.0以下的版本是不需要安装webpack-cli，因此不会和webpack-dev-server出现不兼容的情况</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p><cst>兼容依赖</cst>：webpack-cli 和 webpack-dev-server 安装的版本是不兼容的，因此我们需要安装它们兼容的版本</p><h2 id="报错截图"><a href="#报错截图" class="headerlink" title="报错截图"></a>报错截图</h2><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//error.png"></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//原因是 less-loader安装的版本过高</span><br><span class="line">//解决方案：卸载之前的less-loader,安装less-loader@5.0.0</span><br><span class="line"><span class="attribute">npm</span> uninstall less-loader</span><br><span class="line">npm install less-loader@<span class="number">5</span>.<span class="number">0</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//code.jpg"></p><p><b>版本修改</b></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 在安装之前，我们需要进行卸载操作</span><br><span class="line"><span class="attribute">npm</span> i webpack@<span class="number">4</span> -D</span><br><span class="line">npm i webpack-cli@<span class="number">3</span> -D</span><br><span class="line">npm i webpack-dev-server@<span class="number">3</span> -D</span><br></pre></td></tr></table></figure><p>待安装好时，我们将<code>node_modules</code>文件夹和 <code>package.json</code>文件删掉，通过<code>npm install</code>重新安装以下这些文件夹，在配置好了的情况下，我们再<code>npm run dev</code> 运行以下本地服务器，没想到就ok了</p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack配置文件分离</title>
      <link href="2021/05/26/webpackconfig/"/>
      <url>2021/05/26/webpackconfig/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装webpack-merge"><a href="#安装webpack-merge" class="headerlink" title="安装webpack-merge"></a>安装webpack-merge</h2><p>用于对文件进行合并，我们将开发版或产品版，让其与共用的<code>base.config.js</code> 进行合并</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> i webpack-merge</span><br></pre></td></tr></table></figure><div class="page-header">  <h2>webpack.config.js</h2>  <p>    对webpack配置文件进行分离，分为共用的<code>base.config.js</code>，开发版<code>dev.config.js</code>，产品版<code>prod.config.js</code>。看似一个文件分成三个文件，更复杂了些。当开发板和产品板相差很多的时候，我们就很有必要分离它们  </p></div>## base.config.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个共用的配置文件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入webpack自带插件</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader/lib/plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">limit</span>: <span class="number">25</span> * <span class="number">1024</span>,</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&#x27;./img/[name].[hash:8].[ext]&#x27;</span>, <span class="comment">//[option] 用中括号，表示参数，hash:8 保留8位哈希值</span></span><br><span class="line">                    &#125;,</span><br><span class="line"></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">presets</span>: [<span class="string">&#x27;es2015&#x27;</span>],</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">&#x27;最终版权归Simplelife所有&#x27;</span>),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.css&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>],</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="prod-config-js"><a href="#prod-config-js" class="headerlink" title="prod.config.js"></a>prod.config.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//丑化压缩代码，开发时不需要</span></span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./base.config&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = webpackMerge.merge(baseConfig, &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> UglifyJsPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="dev-config-js"><a href="#dev-config-js" class="headerlink" title="dev.config.js"></a>dev.config.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./base.config&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = webpackMerge.merge(baseConfig, &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">        <span class="attr">inline</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --config ./build/prod.config.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --open --config ./build/dev.config.js&quot;</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>原先是使用<code>webpack.config.js</code>，现在我们打包使用<code>prod.config.js</code>，本地开发使用<code>dev.config.js</code>，</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>打包文件会自动生成在<code>build/dist</code>文件夹下，因为<code>dist</code>文件是基于配置文件生成的</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210526152538.png"></p><p>我们自己创建的<code>index.html</code>文件是不需要绑定js文件的，当我们打包后，webpack会自动帮我们绑定打包的js文件</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210526152707.png"></p><p>自动生成的<code>index.html</code>如下</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210526152741.png"></p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack.config.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识plugin</title>
      <link href="2021/05/24/plugin/"/>
      <url>2021/05/24/plugin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><h3 id="plugin是什么？"><a href="#plugin是什么？" class="headerlink" title="plugin是什么？"></a>plugin是什么？</h3><p>plugin是插件的意思，通常是用于对某个现有的<cst>架构进行扩展</cst>。webpack中插件，就是对webpack现有功能的各种扩展，比如<cst>打包优化，文件压缩</cst>等</p><h3 id="loader-和-plugin区别"><a href="#loader-和-plugin区别" class="headerlink" title="loader 和 plugin区别"></a>loader 和 plugin区别</h3><ul><li>loader 主要用于转换某些类型的模块，它是一个<cst>转换器</cst></li><li>plugin 是插件，它是对webpack本身的扩展，是一个<cst>扩展器</cst></li></ul><h3 id="plugind-的使用过程"><a href="#plugind-的使用过程" class="headerlink" title="plugind 的使用过程"></a>plugind 的使用过程</h3><ul><li>步骤一：通过npm安装需要使用的plugins（某些webpack已经<cst>内置的插件</cst>不需要安装）</li><li>步骤二：在<code>webpack.config.js</code>中plugins中配置插件</li></ul><h2 id="添加版权的Plugin"><a href="#添加版权的Plugin" class="headerlink" title="添加版权的Plugin"></a>添加版权的Plugin</h2><p>使用一个最简单的插件，为打包的文件添加版权声明。插件名字叫<cst>BannerPlugin</cst>，属于webpack自带的插件 </p><p><b>webpack.config.js</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入webpack自带插件</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">&#x27;最终版权归Simplelife所有&#x27;</span>)</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210525142718.png"></p><h2 id="打包html的plugin"><a href="#打包html的plugin" class="headerlink" title="打包html的plugin"></a>打包html的plugin</h2><p>在真实开发项目时，发布的dist文件夹，但是dist文件夹中如果没有index.html文件，那么打包的js等文件也就没有意义，因此我们需要通过HtmlWebpackPlugin插件，将index.html文件打包到dist文件夹中</p><h3 id="HtmlWebpackPlugin插件的作用："><a href="#HtmlWebpackPlugin插件的作用：" class="headerlink" title="HtmlWebpackPlugin插件的作用："></a>HtmlWebpackPlugin插件的作用：</h3><ul><li>自动生成index.html文件（可以指定模板来生成）</li><li>将打包好的js文件，自动通过script标签插入到body中</li></ul><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><h3 id="使用插件，配置修改"><a href="#使用插件，配置修改" class="headerlink" title="使用插件，配置修改"></a>使用插件，配置修改</h3><p>修改<code>webpack.config.js</code> 文件中plugins部分内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在plugins添加 new HtmlWebpackPlugin()时，会自动添加这个导入，如果你没有，还请手动导入</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line"><span class="attr">template</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>这里的<code>template</code>表示根据什么模板来生成<code>index.html</code>，另外，我们需要删掉之前在<code>output</code>中添加的<code>publicPath</code>属性(好吧我根本没有)，否则会影响插入的script标签中src可能会有问题</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 1. 安装plugins插件</span><br><span class="line">// 2. 配置plugins内容</span><br><span class="line">// 3. 允许<span class="attribute">npm</span> run build</span><br><span class="line">// <span class="number">4</span>. 成功后点开dist文件夹下，会有一个index.html</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><h2 id="JS压缩的plugin"><a href="#JS压缩的plugin" class="headerlink" title="JS压缩的plugin"></a>JS压缩的plugin</h2><p>在项目发布之前，我们必然需要对JS等文件进行压缩处理。这里，我们就对打包的js文件进行压缩，我们使用一个第三方的插件<code>uglifyjs-webpack-plugin</code></p><h3 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install uglifyjs-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p><b>webpack.config.js</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">plugins:[</span><br><span class="line"><span class="keyword">new</span> UglifyJsPlugin()</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210525210649.png"></p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack配置进阶</title>
      <link href="2021/05/23/webpack3/"/>
      <url>2021/05/23/webpack3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="package-json-中定义启动"><a href="#package-json-中定义启动" class="headerlink" title="package.json 中定义启动"></a><code>package.json</code> 中定义启动</h2><p>有时候，我们需要在本地安装webpack服务，来对应项目开发。但是在终端输入的webpack命令都是全局webpack。这是我们通过脚本进入本地webpack</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json 文件</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;mywebpack&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;3.6.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span>: &#123; <span class="comment">//在scripts脚本下面添加build</span></span><br><span class="line">        <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终端执行命令：<code>npm run bulid</code> 会自动搜索本地webpack服务，其次全局</p><p>本地webpack路径寻找：<code>node_modules/.bin</code></p><h2 id="webpack添加mode"><a href="#webpack添加mode" class="headerlink" title="webpack添加mode"></a>webpack添加mode</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mode模式：development 开发者模式，便于查看打包文件内容</span></span><br><span class="line"><span class="comment">//          production 产品模式，不便于查看</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  ……………………………………………………………………</span><br></pre></td></tr></table></figure><div class="page-header">  <h2>Less文件处理</h2>  <p>    webpack工具有很多功能，通过npm安装一些loader，来扩展这些功能。增填打包less、css、img等类型的文件  </p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先在 ./src/css/index.less 创建less文件 </span></span><br><span class="line"><span class="comment">//写一些简单的样式</span></span><br><span class="line">@fontSize:70px;</span><br><span class="line">@fontColor:#<span class="number">000000</span>;</span><br><span class="line"></span><br><span class="line">body&#123;</span><br><span class="line">  font-size: @fontSize;</span><br><span class="line">  color: @fontColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/index.js</span></span><br><span class="line"><span class="comment">// 导入刚才main.js导出的变量函数等</span></span><br><span class="line"><span class="comment">// import &#123; add, mul, name, age, obj &#125; from &#x27;./main.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; add, mul, name, age, obj &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./js/main.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">&#x27;的年龄：&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="built_in">console</span>.log(obj.name + <span class="string">&#x27;的年龄：&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj.age);</span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">&#x27;和&#x27;</span> + obj.name + <span class="string">&#x27;的年纪相加等于&#x27;</span> + <span class="string">&#x27;=&#x27;</span> + add(age, obj.age));</span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">&#x27;和&#x27;</span> + obj.name + <span class="string">&#x27;的年纪相乘等于&#x27;</span> + <span class="string">&#x27;=&#x27;</span> + mul(age, obj.age));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入你需要依赖的css文件</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./css/index.css&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入依赖的less文件</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./css/index.css&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// js 输入文字，显示效果</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;hello world!&#x27;</span>)</span><br></pre></td></tr></table></figure><p><cst>webpack.config.js</cst></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use: [&#123; <span class="attr">loader</span>: <span class="string">&#x27;style-loader&#x27;</span>,<span class="attr">option</span>:&#125;,</span><br><span class="line">                      &#123; <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,<span class="attr">option</span>:&#125;, </span><br><span class="line">                      &#123; <span class="attr">loader</span>: <span class="string">&#x27;less-loader&#x27;</span>,<span class="attr">option</span>:&#125;]</span><br><span class="line">                       <span class="comment">//与上面的方式不同，这种方式可以添加更多的参数</span></span><br><span class="line">                       <span class="comment">//这里用到了less-loader、css-loader、style-loader</span></span><br><span class="line">                       <span class="comment">//从右往左，从下往上解析</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>首先，你需要先安装 <code>less</code> 和 <code>less-loader</code>：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="attribute">npm</span> install less less-loader --save-dev</span><br></pre></td></tr></table></figure><p>配置好文件后，通过命令打包</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="attribute">npm</span> run build</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210523225430.png" alt="运行index.html效果图"></p><p><br><br></p><div class="page-header">  <h2>图片文件的处理</h2>  <p>    通过webpack对图片的打包处理，我们需要提前准备两张背景图，一张24k,另一张64k。我们通过url加载图片，然后需要下载<code>url-loader</code>  </p></div><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>首先，你需要安装<code>url-loader</code>和 <code>file-loader</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install url-loader --save-dev</span><br><span class="line"></span><br><span class="line">npm install file-loader --save-dev</span><br></pre></td></tr></table></figure><p><b>index.js</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> img <span class="keyword">from</span> <span class="string">&#x27;./image.png&#x27;</span>;</span><br></pre></td></tr></table></figure><p><b>index.css</b></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;../img/tangsan.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>url-loader</code> 功能类似于 <a href="https://webpack.docschina.org/loaders/file-loader/"><code>file-loader</code></a>, 但是在文件大小（单位为字节）低于指定的限制时，可以返回一个 DataURL。</p><p><b>webpack.config.js</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>, <span class="comment">//jpeg 和 jpg格式没有很多区别，当初的DOS系统不允许4位后缀名</span></span><br><span class="line">         use: [&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 当加载的图片, 小于limit时，会将图片编译成base64字符串形式 不需要单独的文件存储</span></span><br><span class="line">                    <span class="comment">// 当加载的图片，大于limit时，会使用file-loader模块进行加载</span></span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">limit</span>: <span class="number">25</span> * <span class="number">1024</span>,</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&#x27;./img/[name].[hash:8].[ext]&#x27;</span>, <span class="comment">//[option] 用中括号，表示参数，   //hash:8 保留8位哈希值</span></span><br><span class="line">                        <span class="comment">// [ext] 后缀名</span></span><br><span class="line">                        <span class="comment">// 打包文件自动生成在dist，自动引用dist下文件</span></span><br><span class="line">                        <span class="comment">// 利用这种方式规范命名</span></span><br><span class="line">                    &#125;,</span><br><span class="line"></span><br><span class="line">                &#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a><code>limit</code></h3><p>类型: <code>Boolean|Number|String</code> 默认值: <code>true</code></p><p>该值可以通过 loader 的 options 参数来指定，默认为 <code>undefined</code>。</p><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a><code>Boolean</code></h3><p>开启/关闭将文件转换为 base64。</p><br><div class="page-header">  <h2>ES6语法处理</h2>  <p>    将js文件的ES6语法转换成ES5，因为有些浏览器可能不支持ES6语法。在处理ES6语法时，我们需要学习新的,babel-loader  </p></div><h3 id="快速开始-1"><a href="#快速开始-1" class="headerlink" title="快速开始"></a><a href="https://webpack.docschina.org/loaders/babel-loader/#install">快速开始</a></h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install --save-dev babel-loader@<span class="number">7</span> babel-core babel-preset-es2015</span><br></pre></td></tr></table></figure><p><b>webpack.config.js</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">      <span class="comment">// exclude：表示哪些文件不需要去转换</span></span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">      use: &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">presets</span>: [<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加mode类型，安装命令 || 配置文件，执行打包命令，查看打包后的文件语法，已经是es5语法了</span></span><br></pre></td></tr></table></figure><h2 id="webpack配置vue"><a href="#webpack配置vue" class="headerlink" title="webpack配置vue"></a>webpack配置vue</h2><h3 id="快速开始-2"><a href="#快速开始-2" class="headerlink" title="快速开始"></a>快速开始</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 安装vue, 不使用 --save-dev,这表示开发者依赖，但是vue打包后仍然依赖</span><br><span class="line"><span class="attribute">npm</span> install vue --save</span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p><b>index.js</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用vue实例</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;hello webpack&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><b>index.html</b></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">       &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><cst class="red">Warning<cst>：打开控制台检测错误</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210524103725.png"></p><ul><li><cst>runtime-only</cst>：代码中，不可以有任何的template，对于vue实例用div绑定id的也是template</li><li><cst>runtime-compiler</cst>：与它相反，可以有。因为含有compiler，可以编译template</li></ul><h3 id="如何指定-runtime-compiler"><a href="#如何指定-runtime-compiler" class="headerlink" title="如何指定 runtime-compiler"></a>如何指定 <code>runtime-compiler</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">   <span class="attr">alias</span>: &#123;</span><br><span class="line">       <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210524104227.png"></p><br><h2 id="vue中template和el的关系"><a href="#vue中template和el的关系" class="headerlink" title="vue中template和el的关系"></a>vue中template和el的关系</h2><h3 id="正常运行之后，我们来考虑另外一个问题："><a href="#正常运行之后，我们来考虑另外一个问题：" class="headerlink" title="正常运行之后，我们来考虑另外一个问题："></a>正常运行之后，我们来考虑另外一个问题：</h3><ul><li>如果我们希望将data中的数据显示在界面中，就必须是修改index.html</li><li>如果我们后自定义了组件，也必须修改index.html来使用组件</li><li>但是html模板在之后的开发中，我并不希望手动的来频繁修改，如何做到？</li></ul><h3 id="定义template属性："><a href="#定义template属性：" class="headerlink" title="定义template属性："></a>定义template属性：</h3><ul><li>在前面的Vue实例中，我们定义了el属性，用于和index.html中的#app进行绑定，让Vue实例之后可以管理它其中的内容</li><li>这里，我们可以将div元素中的内容删掉，只保留一个基本的id为div 的元素</li><li>但是如果我依然希望在其中显示的内容，如何操作呢？</li><li>我们可以再定义一个template属性，代码如下</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const app = new Vue(&#123;&#125;) 可以省略前面如下面所示</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123;message&#125;&#125;-&#123;&#123;test&#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;hello webpack&#x27;</span>,</span><br><span class="line">        <span class="attr">test</span>: <span class="string">&#x27;不更改基本模板&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>总结：当template和el同时出现时，template会替换el</p></blockquote><h3 id="将template代码移出vue实例"><a href="#将template代码移出vue实例" class="headerlink" title="将template代码移出vue实例"></a>将template代码移出vue实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123;message&#125;&#125;-&#123;&#123;test&#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;hello webpack&#x27;</span>,</span><br><span class="line">            <span class="attr">test</span>: <span class="string">&#x27;不更改基本模板&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;App/&gt;`</span>,<span class="comment">//使用子组件</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        App  <span class="comment">//注册子组件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="一-使用-js-文件来存放子组件的模板"><a href="#一-使用-js-文件来存放子组件的模板" class="headerlink" title="(一)使用 js 文件来存放子组件的模板"></a>(一)使用 js 文件来存放子组件的模板</h3><p><b>app.js</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123;message&#125;&#125;-&#123;&#123;test&#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;hello webpack&#x27;</span>,</span><br><span class="line">            <span class="attr">test</span>: <span class="string">&#x27;不更改基本模板&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./vue/app.js&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="二-使用-vue-文件存放子组件的模板"><a href="#二-使用-vue-文件存放子组件的模板" class="headerlink" title="(二)使用 .vue 文件存放子组件的模板"></a>(二)使用 .vue 文件存放子组件的模板</h3><p><b>App.js</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 模板</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &lt;p class=&quot;app&quot;&gt;  &#123;&#123;message&#125;&#125;-&#123;&#123;test&#125;&#125; &lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">// 写模板data、mothods等</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default&#123;</span><br><span class="line">    name: &quot;App&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            message: &#x27;hello webpack&#x27;,</span><br><span class="line">            test: &#x27;不更改基本模板&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// 写style样式</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .app&#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./vue/App.vue&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="快速开始-3"><a href="#快速开始-3" class="headerlink" title="快速开始"></a>快速开始</h4><p>使用vue文件，需要安装新的loader来加载，vue-template-compiler 模板编译</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install --save-dev vue-loader vue-template-compiler</span><br></pre></td></tr></table></figure><p><b>webpack.config.js</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略了一些其他之前的代码，如果需要运行，需要补齐</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line"><span class="attr">rules</span>: [&#123;</span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">use: &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><b>运行</b></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> run build</span><br></pre></td></tr></table></figure><p><cst class="red">Warning</cst></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210524144747.png"></p><blockquote><p>安装的vue-loader有很多版本，但是从14.0版本开始，vue-loader就需要plugin插件，但是我们，没有</p></blockquote><p><b>package.json</b><br><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210524150912.png"></p><p>更改版本：”13.0.0”，然后在终端输入 npm install，重新安装一下</p><blockquote><p>根据测验，我们直接改版本数据，是不能安装到13.0.0版本的，返回在npm install 时会损坏vue-loader插件，导致无法识别vue文件</p></blockquote><h4 id="解决方案一"><a href="#解决方案一" class="headerlink" title="解决方案一"></a>解决方案一</h4><p>先卸载之前的版本，然后通过添加@+版本号，安装早期版本</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> uninstall vue-loader</span><br><span class="line">npm install vue-leader@<span class="number">14</span>.<span class="number">2</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure><p>这时我们在进行打包操作，能够正常运行了</p><h4 id="解决方案二"><a href="#解决方案二" class="headerlink" title="解决方案二"></a>解决方案二</h4><p>直接按照报错要求，添加依赖的plugin插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader/lib/plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210524152537.png"></p><h4 id="注册子组件"><a href="#注册子组件" class="headerlink" title="注册子组件"></a>注册子组件</h4><p><b>Cpn.vue</b>：这里的命名并不是使用模板的名字，是导入的路径名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;&quot;&gt;我是子组件&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;&quot;&gt;我是子组件&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Cpn&#x27;,</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;&#125;,</span><br><span class="line">  computed: &#123;&#125;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  created() &#123;&#125;,</span><br><span class="line">  mounted() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><b>App.js</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &lt;p class=&quot;app&quot;&gt;  &#123;&#123;message&#125;&#125;-&#123;&#123;test&#125;&#125; &lt;/p&gt;</span><br><span class="line">  &lt;cpn/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //导入Cpn.vue，命名cpn</span><br><span class="line">  import cpn from &#x27;./Cpn.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default&#123;</span><br><span class="line">    name: &quot;App&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            message: &#x27;hello webpack&#x27;,</span><br><span class="line">            test: &#x27;不更改基本模板&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      cpn:cpn // 同样的名字可以写成如下</span><br><span class="line">      //cpn</span><br><span class="line">      //模板名 : 导入名import</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .app&#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这样就可以利用组件化开发，配合webpack操作</p></blockquote><h3 id="路径文件省略后缀名"><a href="#路径文件省略后缀名" class="headerlink" title="路径文件省略后缀名"></a>路径文件省略后缀名</h3><p><b>webpack.config.js</b></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210524170327.png"></p><p>这样配置webpack，可以省略路径后缀名</p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack.config.js </tag>
            
            <tag> package.json </tag>
            
            <tag> loader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Github图床</title>
      <link href="2021/05/22/howtopig/"/>
      <url>2021/05/22/howtopig/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="page-header">  <h2>新建Github仓库 获取token</h2>  <p>    如果你不知道如何去创建Github仓库，这里有一个教程链接直达    <a class="btn-beautify button--animated block right blue larger" href="/2021/05/16/Hexo1/"   title="创建Github仓库"><i class="far fa-hand-point-right"></i><span>创建Github仓库</span></a>  </p></div><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210522221243.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210522221815.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210522221912.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210522222115.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210522222257.png"></p><p><cst>滑到最下面，点击Generate token</cst></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210522222627.png"></p><div class="page-header">  <h2>    配置PicGo图床工具  </h2>  <p>    如果你还没下载图床工具，给你一个链接直达吧，省的你再去翻上一个页面啦  </p>  <a class="btn-beautify button--animated block blue right larger" href="/2021/05/19/tooltip/"   title="PicGo图床工具"><i class="far fa-hand-point-right"></i><span>PicGo图床工具</span></a></div><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210522223457.png"></p><p><cst>username</cst> 是创建github的账号用户名</p><p><cst>设定分支名</cst>：我的默认是main，你也有可能是master</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210522223747.png"></p><p><cst class="red">设定自定义域名：这是最重要的，我们会使用一个免费CDN加速访问，让你的照片访问很快</cst></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main/</span><br><span class="line"></span><br><span class="line">https://cdn.jsdelivr.net/gh/username/仓库名@分支/</span><br></pre></td></tr></table></figure><br><blockquote><p>以上就是搭建图床的全部啦，如有错误，请留言改正</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 仓库 </category>
          
          <category> 图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> Github图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习webpack工具</title>
      <link href="2021/05/22/webpack1/"/>
      <url>2021/05/22/webpack1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>从v4.00开始，webpack可以不用再引入一个配置文件来打包项目，然而，它仍然有着高度可配置性，可以很好满足你的需求</p><p><cst>打包命令<code>npx webpack</code> 前提配置好<code>webpack.config.js</code> 文件，否则默认打包方式</cst></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>文件和文件夹解析：</p><ul><li>dist 文件夹 ：用于存放之后打包的文件，也可不创建，在打包时可以生成</li><li>src 文件夹：用于存放我们写的源文件</li><li><code>package.json</code>: 通过<code>npm init</code> 初始化生成，npm包管理文件</li></ul><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p>入口起点指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack会找出有哪些模块和库是入口起点（直接和间接）依赖的。</p><p>默认值是<code>./src/index.js</code>，但是你可以通过<cst>webpack configuration</cst>中配置<code>entry</code>属性<br><br><strong>webpack.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./path/to/my/entry/file.js&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p><strong>output</strong> 属性告诉 webpack 在哪里输出它所创建的 <em>bundle</em>，以及如何命名这些文件。主要输出文件的默认值是 <code>./dist/main.js</code>，其他生成文件默认放置在 <code>./dist</code> 文件夹中。</p><p>你可以通过在配置中指定一个 <code>output</code> 字段，来配置这些处理过程：</p><p><strong>webpack.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>); <span class="comment">//获取路径</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./path/to/my/entry/file.js&#x27;</span>,  <span class="comment">//入口</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>), <span class="comment">//path是绝对路径，通过path获取</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span>, <span class="comment">//打包bundle.js的命名</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>在上面的示例中，我们通过 <code>output.filename</code> 和 <code>output.path</code> 属性，来告诉 webpack bundle 的名称，以及我们想要 bundle 生成到哪里。可能你想要了解在代码最上面导入的 path 模块是什么，它是一个 <a href="https://nodejs.org/api/modules.html">Node.js 核心模块</a>，用于操作文件路径。</p></blockquote><p>配置好简单的webpack文件，试着打包一下我们的项目</p><div id="projectpackbao">  <p class="text-right">    打包项目示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/main.js</span></span><br><span class="line"><span class="comment">// main.js写了一些变量、函数、对象，进行ES6导出操作</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;小明&#x27;</span></span><br><span class="line"><span class="keyword">let</span> age  = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> obj =&#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;小华&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="string">&#x27;19&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1 * num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span>&#123;</span><br><span class="line">add,</span><br><span class="line">mul,</span><br><span class="line">  name,</span><br><span class="line">  age,</span><br><span class="line">  obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/index.js</span></span><br><span class="line"><span class="comment">// 导入刚才main.js导出的变量函数等</span></span><br><span class="line"><span class="keyword">import</span> &#123;add,mul,name,age,obj&#125; <span class="keyword">from</span> <span class="string">&#x27;./main.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">&#x27;的年龄：&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="built_in">console</span>.log(obj.name + <span class="string">&#x27;的年龄：&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj.age);</span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">&#x27;和&#x27;</span> + obj.name + <span class="string">&#x27;的年纪相加等于&#x27;</span> + <span class="string">&#x27;=&#x27;</span> + add(age, obj.age));</span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">&#x27;和&#x27;</span> + obj.name + <span class="string">&#x27;的年纪相乘等于&#x27;</span> + <span class="string">&#x27;=&#x27;</span> + mul(age, obj.age));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置文件 webpack.config.js，</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// _dirname: 是node里面的webpack.config.js的绝对路径, 然后加一个dist文件</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建一个index.html文件引用打包的js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/my-first-webpack.bundle.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><cst>打包命令<code>npx webpack</code> 前提配置好<code>webpack.config.js</code> 文件，否则默认打包方式</cst></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210522165104.png"></p></div><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a><a href="https://webpack.docschina.org/loaders/#styling">loader</a></h2><p>webpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。<strong>loader</strong> 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 <a href="https://webpack.docschina.org/concepts/modules">模块</a>，以供应用程序使用，以及被添加到依赖图中。</p><blockquote><p>注意，loader 能够 <code>import</code> 导入任何类型的模块（例如 <code>.css</code> 文件），这是 webpack 特有的功能，其他打包程序或任务执行器的可能并不支持。我们认为这种语言扩展是很有必要的，因为这可以使开发人员创建出更准确的依赖关系图。</p></blockquote><p>在更高层面，在 webpack 的配置中，<strong>loader</strong> 有两个属性：</p><ol><li><code>test</code> 属性，识别出哪些文件会被转换。<cst>使用正则表达式匹配后缀名文件</cst></li><li><code>use</code> 属性，定义出在进行转换时，应该使用哪个 loader。</li></ol><p><strong>webpack.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, use: <span class="string">&#x27;raw-loader&#x27;</span> &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//使用多个loader时：use: [&#x27;style-loader,&#x27;css.loader&#x27;]</span></span><br><span class="line">  <span class="comment">//逐渐webpack解析是从右到左的，先加载css.loader,再加载style-loader</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上配置中，对一个单独的 module 对象定义了 <code>rules</code> 属性，里面包含两个必须属性：<code>test</code> 和 <code>use</code>。这告诉 webpack 编译器(compiler) 如下信息： </p><p><em>“嘿，webpack 编译器，当你碰到「在 <code>require()</code>/<code>import</code> 语句中被解析为 ‘.txt’ 的路径」时，在你对它打包之前，先 <strong>use(使用)</strong> <code>raw-loader</code> 转换一下。”</em></p><div class="loadercss">  <div class="text-right">     演示一下  </div><p><cst>请一定要输入正确的配置名，否则报错你都不知道为什么</cst></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/index.js</span></span><br><span class="line"><span class="comment">// 导入刚才main.js导出的变量函数等</span></span><br><span class="line"><span class="comment">// import &#123; add, mul, name, age, obj &#125; from &#x27;./main.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; add, mul, name, age, obj &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./main.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">&#x27;的年龄：&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="built_in">console</span>.log(obj.name + <span class="string">&#x27;的年龄：&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj.age);</span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">&#x27;和&#x27;</span> + obj.name + <span class="string">&#x27;的年纪相加等于&#x27;</span> + <span class="string">&#x27;=&#x27;</span> + add(age, obj.age));</span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">&#x27;和&#x27;</span> + obj.name + <span class="string">&#x27;的年纪相乘等于&#x27;</span> + <span class="string">&#x27;=&#x27;</span> + mul(age, obj.age));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们定义了一个css文件，index.css</span></span><br><span class="line"><span class="comment">// 来让index.js文件 依赖index.css文件</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./css/index.css&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我使用了两个loader，因此我们需要允许之前安装一下loader</p><p><code>npm install --save-dev style-loader</code> </p><p><code>npm install --save-dev css-loader</code></p><p>通过这个两个命令安装<code>style-loader</code> 和 <code>css-loader</code> ，前者负责解析css文件，后者负责打包依赖文件</p><p>使用命令进行打包：<code>npm run build</code> 启动本地webpack</p><br></div><p><label class="red"><strong>Warning</strong></label></p><blockquote><p>重要的是要记住，在 webpack 配置中定义 rules 时，要定义在 <code>module.rules</code> 而不是 <code>rules</code> 中。为了使你便于理解，如果没有按照正确方式去做，webpack 会给出警告。</p></blockquote><blockquote><p>请记住，使用正则表达式匹配文件时，你不要为它添加引号。也就是说，<code>/\.txt$/</code> 与 <code>&#39;/\.txt$/&#39;</code> 或 <code>&quot;/\.txt$/&quot;</code> 不一样。前者指示 webpack 匹配任何以 .txt 结尾的文件，后者指示 webpack 匹配具有绝对路径 ‘.txt’ 的单个文件; 这可能不符合你的意图。</p></blockquote><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。</p><p>想要使用一个插件，你只需要 <code>require()</code> 它，然后把它添加到 <code>plugins</code> 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 <code>new</code> 操作符来创建一个插件实例。</p><p><strong>webpack.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>); <span class="comment">// 通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>); <span class="comment">// 用于访问内置插件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, use: <span class="string">&#x27;raw-loader&#x27;</span> &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> HtmlWebpackPlugin(&#123; <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span> &#125;)],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>html-webpack-plugin</code> 为应用程序生成一个 HTML 文件，并自动注入所有生成的 bundle。</p><p><em>在 webpack 配置中使用插件是简单直接的。然而，也有很多值得我们进一步探讨的用例。<a href="https://webpack.docschina.org/concepts/plugins">查看这里了解更多</a>。</em></p><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><p>通过选择 <code>development</code>, <code>production</code> 或 <code>none</code> 之中的一个，来设置 <code>mode</code> 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 <code>production</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// development 开发者模式，打包后可以清晰看到webpack结构</span></span><br><span class="line"><span class="comment">// production  产品模式，无法看清webpack结构</span></span><br><span class="line"><span class="comment">// 当你需要看webpack打包的内容，请选择开发者模式</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>想要了解更多，请查阅 <a href="https://webpack.docschina.org/configuration/mode">mode 配置</a>，这里有具体每个值相应的优化行为。</p><h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><p>webpack 支持所有符合 <a href="https://kangax.github.io/compat-table/es5/">ES5 标准</a> 的浏览器（不支持 IE8 及以下版本）。webpack 的 <code>import()</code> 和 <code>require.ensure()</code> 需要 <code>Promise</code>。如果你想要支持旧版本浏览器，在使用这些表达式之前，还需要 <a href="https://webpack.docschina.org/guides/shimming/">提前加载 polyfill</a>。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>webpack 5 运行于 Node.js v10.13.0+ 的版本。</p><br> <div class="text-right">   <a class="btn-beautify button--animated outline blue larger" href="/2021/05/21/webpack/"   title="前端模块化 || 安装webpack"><i class="far fa-hand-point-left"></i><span>前端模块化 || 安装webpack</span></a>   <a class="btn-beautify button--animated inline outline blue larger" href="/2021/05/23/webpack3"   title="webpack.config.js || package.json"><i class="far fa-hand-point-right"></i><span>webpack.config.js || package.json</span></a>   </div>   ]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue数组应用</title>
      <link href="2021/05/21/vuevfor/"/>
      <url>2021/05/21/vuevfor/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><blockquote><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：<strong>双花括号插值和 <code>v-bind</code> 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：</p></blockquote><p><strong>局部过滤器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在双花括号中 --&gt;</span></span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在 `v-bind` 中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;rawId | formatId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--通过filters写过滤方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">filters</span>:&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">capitalize</span>(<span class="params">val</span>)</span>&#123;  <span class="comment">// val 是由过滤器管道符前的值</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> val;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>定义全局过滤器</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">&#x27;capitalize&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  value = value.toString()</span><br><span class="line">  <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>PS：当全局过滤器和局部过滤器重名时，会采用局部过滤器。</p><p>过滤器可以串联</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  message 值先由过滤器A过滤，再由过滤器B过滤</span></span><br><span class="line"><span class="comment">  不会直接让最后一个过滤</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>过滤器是JavaScript函数，因此可以接收参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA(&#x27;arg1&#x27;, arg2) &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  这里，filterA 被定义为接收三个参数的过滤器函数。</span></span><br><span class="line"><span class="comment">  其中 message的值作为第一个参数，普通字符串 &#x27;arg1&#x27; 作为第二个参  数，表达式arg2的值作为第三个参数。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="JS高阶函数"><a href="#JS高阶函数" class="headerlink" title="JS高阶函数"></a>JS高阶函数</h2><p><strong>1. <code>filtet</code>函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  filter中的回调函数有一个要求：必须返回一个boolean值</span></span><br><span class="line"><span class="comment">  true：当返回true时，函数内部会自动将这次回调的n加入到新的数组中</span></span><br><span class="line"><span class="comment">  false:当返回false时，函数内部会过滤掉这次的n</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">111</span>,<span class="number">222</span>,<span class="number">444</span>,<span class="number">50</span>,<span class="number">60</span>]</span><br><span class="line"><span class="keyword">let</span> newnums = nums.filter(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n&lt;<span class="number">100</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//返回是小于100的元素</span></span><br></pre></td></tr></table></figure><p><strong>2. <code>map</code>函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">111</span>,<span class="number">222</span>,<span class="number">444</span>,<span class="number">50</span>,<span class="number">60</span>]</span><br><span class="line"><span class="keyword">let</span> newnums = nums.map(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n*<span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//数组有几个元素执行几次，返回的元素，现在返回的两倍的值</span></span><br></pre></td></tr></table></figure><p><strong>3.<code>reduce</code>函数</strong></p><p>作用：汇总元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> total = newNums.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preValue,n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preValue + n</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数有两个参数值 preValue和n</span></span><br><span class="line"><span class="comment">//元素过程···</span></span><br><span class="line"><span class="comment">//第一次 prevalue n1</span></span><br><span class="line"><span class="comment">//第二次 prevalue+n1 n2</span></span><br><span class="line"><span class="comment">//第三次 prevalue+n1+n2 n3</span></span><br><span class="line"><span class="comment">//第四次 prevalue+n1+n2+n3 n4</span></span><br><span class="line"><span class="comment">//假如只有4个元素，最后返回prevalue+n1+n2+n3+n4</span></span><br></pre></td></tr></table></figure><hr><h2 id="Vue响应式数组方法"><a href="#Vue响应式数组方法" class="headerlink" title="Vue响应式数组方法"></a>Vue响应式数组方法</h2><blockquote><p>push、pop、shift、unshift、splice、reverse、sort 等7个数组，由Vue包裹了一层，再调用Array.原型数组方法，被Vue处理过使得它是响应式的</p></blockquote><ol><li><code>push</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push(<span class="string">&#x27;F&#x27;</span>);<span class="comment">//在数组尾部添加新元素&#x27;F&#x27;，并同时更新网页界面可添加多个元素</span></span><br><span class="line">push(<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;E&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li><code>pop</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop();<span class="comment">//删掉数组最后一个元素</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>shift</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shift();<span class="comment">//删掉数组第一元素，与pop方法相反</span></span><br></pre></td></tr></table></figure><ol start="4"><li><code>unshift</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unshift(<span class="string">&#x27;F&#x27;</span>);<span class="comment">//在数组最前面添加新元素&#x27;F&#x27;</span></span><br><span class="line">可添加多个元素</span><br><span class="line">unshift(<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;E&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li><code>splice</code></li></ol><blockquote><p>作用：删除元素/插入元素/替换元素<br>删除元素：第一个参数开始后的位置，第二个参数删除的个数，<br>         没有第二个参数，表示某位置后面元素全部删掉<br>         格式：splice(2)/splice(2,2);</p><p>替换元素：splice(start,num,’new1’,’new2’,’new…’);<br>         num为替换元素的个数，后面的元素就改成需要替换的元素<br>         splice(2,3,’a’,’b’,’c’);第二个元素后面替换三个元素<br>         原理：是先将元素删掉，然后再添加元素</p><p>插入元素：splice(start,0,’new1’,’new2’,’new…’);<br>         num改为零了，表示不删掉元素，后面直接追加新元素<br>         strat是值意思都是一样的</p></blockquote><ol start="6"><li><code>reverse</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">作用：反转数组</span><br><span class="line">reserve();</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>] ==&gt; [<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;1&#x27;</span>]</span><br></pre></td></tr></table></figure><ol start="7"><li><code>sort</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--冒泡排序方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">sortNumber</span>(<span class="params">a,b</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript"></span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> a - b</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">6</span>)</span></span><br><span class="line"><span class="javascript">  arr[<span class="number">0</span>] = <span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="javascript">  arr[<span class="number">1</span>] = <span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="javascript">  arr[<span class="number">2</span>] = <span class="string">&quot;40&quot;</span></span></span><br><span class="line"><span class="javascript">  arr[<span class="number">3</span>] = <span class="string">&quot;25&quot;</span></span></span><br><span class="line"><span class="javascript">  arr[<span class="number">4</span>] = <span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="javascript">  arr[<span class="number">5</span>] = <span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(arr + <span class="string">&quot;&lt;br /&gt;&quot;</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(arr.sort(sortNumber))</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> vue基础 </tag>
            
            <tag> vue数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础指令</title>
      <link href="2021/05/21/vuezhiling/"/>
      <url>2021/05/21/vuezhiling/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="插值语法"><a href="#插值语法" class="headerlink" title="插值语法"></a>插值语法</h2><p>通过Mustache语法，让vue实例的数据data，显示在页面当中</p><p>双大括号会将数据解释为普通文本，而非 HTML 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用 JavaScript 表达式</strong></p><p>迄今为止，在我们的模板中，我们一直都只绑定简单的 property 键值。但实际上，对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">语句是不会生效的，例如 if()、for()</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. v-bind  : 单向绑定解析表达式, 可简写为 :xxx</span></span><br><span class="line"><span class="comment">2. v-model: 双向数据绑定</span></span><br><span class="line"><span class="comment">3. v-for  : 遍历数组/对象/字符串</span></span><br><span class="line"><span class="comment">4. v-on   : 绑定事件监听, 可简写为@</span></span><br><span class="line"><span class="comment">5. v-if     : 条件渲染（动态控制节点是否存存在</span></span><br><span class="line"><span class="comment">6. v-else : 条件渲染（动态控制节点是否存存在</span></span><br><span class="line"><span class="comment">   v-else-if</span></span><br><span class="line"><span class="comment">7. v-show : 条件渲染 (动态控制节点是否展示)</span></span><br><span class="line"><span class="comment">8. v-text   : 向其所在的节点中渲染文本内容。与插值语法的区别：v-text会替换掉节点中的内容，&#123;&#123;xx&#125;&#125;则不会。</span></span><br><span class="line"><span class="comment">9. v-html   : 向指定节点中渲染包含html结构的内容</span></span><br><span class="line"><span class="comment">10.v-pre    : 跳过其所在节点的编译过程。可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译。</span></span><br><span class="line"><span class="comment">11.v-once   : v-once所在节点在初次动态渲染后，就视为静态内容了。</span></span><br><span class="line"><span class="comment">              以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p>组件绑定<code>v-once</code>，该组件只会解析一次插值语法，之后改变data数据，也不会影响界面数据</p><p>只渲染元素和组件<strong>一次</strong>。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  当控制台改变app.message的值，但是html中message值不改变</span></span><br><span class="line"><span class="comment">  因为使用了v-once</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><p>在vue实例中的data直接使用HTML标签，是无法通过mustache语法解析出来，但是给组件绑定<code>v-html</code>让该组件解析html标签</p><blockquote><p>在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS 攻击</a>。只在可信内容上使用 <code>v-html</code>，<strong>永不</strong>用在用户提交的内容上。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  当控制台改变app.message的值，但是html中message值不改变</span></span><br><span class="line"><span class="comment">  因为使用了v-once</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-html</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">data</span>:[</span></span><br><span class="line"><span class="javascript">          message:<span class="string">&#x27;&lt;a href=&quot;https://www.baidu.com&quot;&gt;百度一下&lt;/a&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">      ]</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><p>不需要使用mustache语法显示数据，直接通过<code>v-text=&quot;message&quot;</code>绑定数据。缺点明显，不灵活</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等价于，但不完全等价，因为v-text是去替换span标签的全部内容，而插值语法很灵活的拼接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><p>原封不动的解析标签内容，不解析mustache语法</p><p>当不需要使用插值语法或指令，可以使用 <code>v-pre</code> 去跳过Vue解析它，加快解析过程</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> <span class="comment">&lt;!--结果： &#123;&#123;message&#125;&#125;--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><p>当vue未解析的时候，htmlDOM提前解析了，展现的内容对用户 不友好，给组件添加v-bloak，当没有解析的时候，通过css样式隐藏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果解析时，先解析的是div标签，而不是vue实例，那么展现的结果就是 &#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="comment">这样的效果，对用户体验不好 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定v-cloak时，在没有解析vue实例之前，该标签不会展现内容 </span></span><br><span class="line"><span class="comment">避免让用户看到了 &#123;&#123;message&#125;&#125; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">当Vue开始渲染的时候，会销毁 v-cloak属性</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*css添加该属性的样式，去隐藏*/</span></span><br><span class="line"><span class="selector-attr">[v-cloak]</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>根据表达式的真假值，切换元素的 <code>display</code> CSS 属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;true&quot;</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><ul><li><p><strong>缩写</strong>：<code>@</code></p></li><li><p><strong>预期</strong>：<code>Function | Inline Statement | Object</code></p></li><li><p><strong>参数</strong>：<code>event</code></p></li><li><p><strong>修饰符</strong>：</p><ul><li><code>.stop</code> - 调用 <code>event.stopPropagation()</code>。</li><li><code>.prevent</code> - 调用 <code>event.preventDefault()</code>。</li><li><code>.capture</code> - 添加事件侦听器时使用 capture 模式。</li><li><code>.self</code> - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li><li><code>.&#123;keyAlias&#125;</code> - 仅当事件是从特定键触发时才触发回调。</li><li><code>.once</code> - 只触发一次回调。</li><li><code>.left</code> - 只当点击鼠标左键时触发。</li><li><code>.right</code> - 只当点击鼠标右键时触发。</li><li><code>.middle</code> - 只当点击鼠标中键时触发。</li><li><code>.passive</code> - <code>&#123; passive: true &#125;</code> 模式添加侦听器</li></ul></li><li><p><strong>用法</strong>：</p><p>绑定事件监听器。事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句，如果没有修饰符也可以省略。</p><p>用在普通元素上时，只能监听<a href="https://developer.mozilla.org/en-US/docs/Web/Events">原生 DOM 事件</a>。用在自定义元素组件上时，也可以监听子组件触发的<strong>自定义事件</strong>。</p><p>监听原生 DOM 事件时，方法以事件为唯一的参数。如果使用内联语句，语句可以访问一个 <code>$event</code> property：<code>v-on:click=&quot;handle(&#39;ok&#39;, $event)&quot;</code>。</p><p><code>v-on</code> 同样支持不带参数绑定一个事件/监听器键值对的对象。注意当使用对象语法时，是不支持任何修饰器的。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方法处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:</span>[<span class="attr">event</span>]=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内联语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doThat(&#x27;hello&#x27;, $event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态事件缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @[<span class="attr">event</span>]=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 停止冒泡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认行为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认行为，没有表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 串联修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop.prevent</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 键修饰符，键别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;onEnter&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 点击回调只会触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.once</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 对象语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on</span>=<span class="string">&quot;&#123; mousedown: doThis, mouseup: doThat &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在子组件上监听自定义事件 (当子组件触发“my-event”时将调用事件处理器)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> @<span class="attr">my-event</span>=<span class="string">&quot;handleThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内联语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> @<span class="attr">my-event</span>=<span class="string">&quot;handleThis(123, $event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><ul><li><p><strong>缩写</strong>：<code>:</code></p></li><li><p><strong>预期</strong>：<code>any (with argument) | Object (without argument)</code></p></li><li><p><strong>参数</strong>：<code>attrOrProp (optional)</code></p></li><li><p><strong>修饰符</strong>：</p><ul><li><code>.camel</code> - 将 kebab-case attribute 名转换为 camelCase。</li></ul></li><li><p><strong>用法</strong>：</p><p>动态地绑定一个或多个 attribute，或一个组件 prop 到表达式。</p><p>在绑定 <code>class</code> 或 <code>style</code> attribute 时，支持其它类型的值，如数组或对象。可以通过下面的教程链接查看详情。</p><p>在绑定 prop 时，prop 必须在子组件中声明。可以用修饰符指定不同的绑定类型。</p><p>没有参数时，可以绑定到一个包含键值对的对象。注意此时 <code>class</code> 和 <code>style</code> 绑定不支持数组和对象。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定 attribute --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imageSrc&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态 attribute 名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:</span>[<span class="attr">key</span>]=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imageSrc&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态 attribute 名缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:</span>[<span class="attr">key</span>]=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内联字符串拼接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;&#x27;/path/to/images/&#x27; + fileName&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- class 绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; red: isRed &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[classA, classB]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[classA, &#123; classB: isB, classC: isC &#125;]&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- style 绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; fontSize: size + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[styleObjectA, styleObjectB]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定一个全是 attribute 的对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind</span>=<span class="string">&quot;&#123; id: someProp, &#x27;other-attr&#x27;: otherProp &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- prop 绑定。&quot;prop&quot; 必须在 my-component 声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:prop</span>=<span class="string">&quot;someThing&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 $props 将父组件的 props 一起传给子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-component</span> <span class="attr">v-bind</span>=<span class="string">&quot;$props&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- XLink --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">:xlink:special</span>=<span class="string">&quot;foo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>.camel</code> 修饰符允许在使用 DOM 模板时将 <code>v-bind</code> property 名称驼峰化，例如 SVG 的 <code>viewBox</code> property：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">:view-box.camel</span>=<span class="string">&quot;viewBox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在使用字符串模板或通过 <code>vue-loader</code> / <code>vueify</code> 编译时，无需使用 <code>.camel</code>。</p></li><li><p><strong>参考</strong>：</p><ul><li><a href="https://v3.cn.vuejs.org/guide/class-and-style.html">Class 和 Style 绑定</a></li><li><a href="https://v3.cn.vuejs.org/guide/component-basics.html#%E9%80%9A%E8%BF%87-prop-%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE">组件 - Props</a></li></ul></li></ul><h2 id="v-model"><a href="#v-model" class="headerlink" title="#v-model"></a><a href="https://v3.cn.vuejs.org/api/directives.html#v-model">#</a>v-model</h2><ul><li><p><strong>预期</strong>：随表单控件类型不同而不同。</p></li><li><p><strong>限制于</strong>：</p><ul><li><code>&lt;input&gt;</code></li><li><code>&lt;select&gt;</code></li><li><code>&lt;textarea&gt;</code></li><li>components</li></ul></li><li><p><strong>修饰符</strong>：</p><ul><li><a href="https://v3.cn.vuejs.org/guide/forms.html#lazy"><code>.lazy</code></a> - 监听 <code>change</code> 而不是 <code>input</code> 事件</li><li><a href="https://v3.cn.vuejs.org/guide/forms.html#number"><code>.number</code></a> - 输入字符串转为有效的数字</li><li><a href="https://v3.cn.vuejs.org/guide/forms.html#trim"><code>.trim</code></a> - 输入首尾空格过滤</li></ul></li><li><p><strong>用法</strong>：</p><p>在表单控件或者组件上创建双向绑定。细节请看下面的教程链接。</p></li><li><p><strong>参考</strong>：</p><ul><li><a href="https://v3.cn.vuejs.org/guide/forms.html">表单控件绑定</a></li><li><a href="https://v3.cn.vuejs.org/guide/component-custom-events.html#v-model-%E5%8F%82%E6%95%B0">组件 - 在输入组件上使用自定义事件</a></li></ul></li></ul><h2 id="v-slot"><a href="#v-slot" class="headerlink" title="#v-slot"></a><a href="https://v3.cn.vuejs.org/api/directives.html#v-slot">#</a>v-slot</h2><ul><li><p><strong>缩写</strong>：<code>#</code></p></li><li><p><strong>预期</strong>：可放置在函数参数位置的 JavaScript 表达式 (在<a href="https://v3.cn.vuejs.org/guide/component-slots.html#%E8%A7%A3%E6%9E%84%E6%8F%92%E6%A7%BD-prop">支持的环境</a>下可使用解构)。可选，即只需要在为插槽传入 prop 的时候使用。</p></li><li><p><strong>参数</strong>：插槽名 (可选，默认值是 <code>default</code>)</p></li><li><p><strong>限用于</strong>：</p><ul><li><code>&lt;template&gt;</code></li><li><a href="https://v3.cn.vuejs.org/guide/component-slots.html#%E7%8B%AC%E5%8D%A0%E9%BB%98%E8%AE%A4%E6%8F%92%E6%A7%BD%E7%9A%84%E7%BC%A9%E5%86%99%E8%AF%AD%E6%B3%95">组件</a> (对于一个单独的带 prop 的默认插槽)</li></ul></li><li><p><strong>用法</strong>：</p><p>提供具名插槽或需要接收 prop 的插槽。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 具名插槽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    Header content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">    Default slot content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    Footer content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 接收 prop 的具名插槽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">infinite-scroll</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:item</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; slotProps.item.text &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">infinite-scroll</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 接收 prop 的默认插槽，使用了解构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mouse-position</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; x, y &#125;&quot;</span>&gt;</span></span><br><span class="line">  Mouse position: &#123;&#123; x &#125;&#125;, &#123;&#123; y &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">mouse-position</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p><strong>1.局部自定义指令</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  局部自定义指令</span></span><br><span class="line"><span class="comment">  v-text会将num数据渲染在h2标签内</span></span><br><span class="line"><span class="comment">  v-big模仿它的功能，并放大十倍</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;num&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-big</span>=<span class="string">&quot;num&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;num&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">&quot;#demo&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">num</span>:<span class="number">1</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 这种定义方式属于局部定义，也是简写方式</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// big函数何时会被调用？1.指令与元素成功绑定时（一上来）。2.指令所在的模板被重新解析时。</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">big</span>(<span class="params">element,binding</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 自定义指令，Vue将操作DOM权交给用户，此时this不再是Vue实例对象，而是window</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;big&#x27;</span>,<span class="built_in">this</span>) <span class="comment">// logs window</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(element,binding.value) <span class="comment">// element 是元素，binding.value绑定的值</span></span></span><br><span class="line"><span class="javascript">        element.innerText = binding.value * <span class="number">10</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 定义 v-fbind 指令使用完整写法</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 简写方式的函数是融合了 bind方法 和 updata 方法</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 假如我们有一个需求:希望输入框出现默认获取焦点</span></span></span><br><span class="line"><span class="javascript">      </span></span><br><span class="line"><span class="javascript">      <span class="comment">// 在使用简写方式调用 element.focus() 初始页面是无效的，只有数据发生改变重新解析模板时，才能有用</span></span></span><br><span class="line"><span class="javascript">      </span></span><br><span class="line"><span class="javascript">      <span class="comment">// 简写模式初始化只有bind的方法，那时指令元素并为插入页面，执行 focus 自然无效</span></span></span><br><span class="line"><span class="javascript">      </span></span><br><span class="line"><span class="javascript">      <span class="comment">// 重新解析模板，此时DOM的存在输入框元素，调用focus有效</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">fbind</span>:&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//指令与元素成功绑定时（一上来)</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">bind</span>(<span class="params">element,binding</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          element.value = binding.value</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">inserted</span>(<span class="params">element,binding</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          element.focus()</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">update</span>(<span class="params">element,binding</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          element.value = binding.value</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.全局自定义指令</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  全局自定义指令</span></span><br><span class="line"><span class="comment">  在定义全局指令时，是单个定义，因此是 directiv</span></span><br><span class="line"><span class="comment">  局部自定义指令可以定义多个，叫 directives</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;big&#x27;</span>,(element,binding)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;big&#x27;</span>,<span class="built_in">this</span>) <span class="comment">//注意此处的this是window</span></span><br><span class="line">  <span class="comment">// console.log(&#x27;big&#x27;)</span></span><br><span class="line">  element.innerText = binding.value * <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Vue.directive(<span class="string">&#x27;fbind&#x27;</span>,&#123;</span><br><span class="line"><span class="comment">//指令与元素成功绑定时（一上来）</span></span><br><span class="line">  <span class="function"><span class="title">bind</span>(<span class="params">element,binding</span>)</span>&#123;</span><br><span class="line">    element.value = binding.value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//指令所在元素被插入页面时</span></span><br><span class="line">  <span class="function"><span class="title">inserted</span>(<span class="params">element,binding</span>)</span>&#123;</span><br><span class="line">    element.focus()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//指令所在的模板被重新解析时</span></span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">element,binding</span>)</span>&#123;</span><br><span class="line">    element.value = binding.value</span><br><span class="line">  &#125;</span><br><span class="line">) </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>自定义指令总结：</strong></p><p> 一、配置对象中常用的3个回调：</p><p>​         (1).bind：指令与元素成功绑定时调用。</p><p>​         (2).inserted：指令所在元素被插入页面时调用。</p><p>​         (3).update：指令所在模板结构被重新解析时调用。</p><p>二、注意：</p><p>​         1.指令定义时不加<code>v-</code>，但使用时要加<code>v-</code>；</p><p>​         2.指令名如果是多个单词，要使用<code>kebab-case</code>命名方式，不要用<code>camelCase</code>命名。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模块化</title>
      <link href="2021/05/21/webpack/"/>
      <url>2021/05/21/webpack/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h2><div class="page-header">  <h3>前言</h3>  <p>    在<cst>JavaScript</cst>发展初期就是为了实现简单的页面交互逻辑，寥寥数语即可；如今CPU、浏览器性能得到了极大的提升，很多页面逻辑迁移到了客户端（表单验证等），随着<cst>web2.0时代</cst>的到来，<cst>Ajax技术</cst>得到广泛应用，<cst>jQuery</cst>等前端库层出不穷，前端代码日益膨胀，此时在JS方面就会考虑使用<cst>模块化规范</cst>去管理。  </p></div><div class="page-header"><h3>理解模块化</h3><p>模块化是一个语言发展的必经之路，其能够帮助开发者拆分和组织代码，随着前端技术的发展，前端编写的代码量也越来越大，就需要对代码有很好的管理，而模块化能够帮助开发者解决命名冲突、管理依赖、提高代码的可读性、代码解耦以及提高代码的复用性。  </p></div><div class="page-header"><h3>描述</h3><p>模块化开发其实就是封装细节，提供使用接口，彼此之间互不影响，每个模块都是实现某一特定的功能，同时也需要避免全局变量的污染，最初通过函数实现模块，实际上是利用了函数的局部作用域来形成模块。</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述的<code>func1</code>与<code>func2</code>函数分别形成了两个模块，需要使用的时候直接调用即可，但是这样无法保证不与其他模块发生变量名冲突，而且模块成员之间看不出直接关系，再之后便有使用对象作为模块，将成员的都放置于对象中。</p><div class="page-header"><h3>模块化规范</h3><p><cst>CommonJs、AMD、CMD、ES6</cst>都是用于模块化定义中使用的规范，其为了规范化模块的引入与处理模块之间的依赖关系以及解决命名冲突问题，并使用模块化方案来使复杂系统分解为代码结构更合理，可维护性更高的可管理的模块。</p></div><div class="page-header"><h3>CommonJS</h3> <p>   <cst>CommonJS</cst>是<cst>NodeJs</cst>服务器端模块的规范，根据这个规范，每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。CommonJS规范规定，每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性是对外的接口。加载某个模块，其实是加载该模块exports属性。总之，<cst>CommonJS规范通过require导入，module.exports与exports进行导出。</cst>  </p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.js，定义变量、函数等</span></span><br><span class="line"><span class="keyword">var</span> a  = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出方法，类似对象定义</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">a</span>: a,</span><br><span class="line">    <span class="attr">b</span>: b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// 当导出的模块名与被导出的成员或方法重名时可以有如下写法</span></span><br><span class="line"><span class="comment">module.exports = &#123;</span></span><br><span class="line"><span class="comment">    a,</span></span><br><span class="line"><span class="comment">    b</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.js  导入方式一</span></span><br><span class="line"><span class="keyword">const</span> m1 = <span class="built_in">require</span>(<span class="string">&quot;./1.js&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(m1.a); <span class="comment">// 1</span></span><br><span class="line">m1.b(); <span class="comment">// 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><cst>require是依赖于node环境的，浏览器无法解析require，所以CommonJS是Node服务端的规范，我们将学一下ES6模块化</cst></p><div class="page-header"><h3>ES6</h3>  <p></p></div><p><code>ES6</code>在语言标准的层面上实现了模块的功能，是为了成为浏览器和服务器通用的模块解决方案，<code>ES6</code>标准使用<code>export</code>与<code>export default</code>来导出模块，使用<code>import</code>导入模块</p><p>导出方式两种<code>export</code> 和 <code>export default</code></p><ul><li><code>export</code> 能按需导入，<code>export default</code> 不行</li><li><code>export</code>  可以有多个，<code>export default</code> 仅有一个</li><li><code>export</code>能直接导出变量表达式，<code>export default</code>不行。</li><li><code>export</code>方式导出，在导入时要加<code>&#123;&#125;</code>，<code>export default</code>则不需要。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出单个特性</span></span><br><span class="line"><span class="comment">// 在js定义变量、</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name1, name2, …, nameN; <span class="comment">// also var, const</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name1 = …, name2 = …, …, nameN; <span class="comment">// also var, const</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">FunctionName</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出列表</span></span><br><span class="line"><span class="keyword">export</span> &#123; name1, name2, …, nameN &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重命名导出，引用的时候是newname1，newname2</span></span><br><span class="line"><span class="keyword">export</span> &#123; name1 <span class="keyword">as</span> newname1, name2 <span class="keyword">as</span> newname2 , …, nameN &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> expression;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">…</span>) </span>&#123; … &#125; <span class="comment">// also class, function*</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">name1</span>(<span class="params">…</span>) </span>&#123; … &#125; <span class="comment">// also class, function*</span></span><br><span class="line"><span class="keyword">export</span> &#123; name1 <span class="keyword">as</span> <span class="keyword">default</span>, … &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出模块合集</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> …; <span class="comment">// does not set the default export</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">as</span> name1 <span class="keyword">from</span> …; <span class="comment">// Draft ECMAScript® 2O21</span></span><br><span class="line"><span class="keyword">export</span> &#123; name1, name2, …, nameN &#125; <span class="keyword">from</span> …;</span><br><span class="line"><span class="keyword">export</span> &#123; import1 <span class="keyword">as</span> name1, import2 <span class="keyword">as</span> name2, …, nameN &#125; <span class="keyword">from</span> …;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> &#125; <span class="keyword">from</span> …;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> defaultMember <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> name <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; member &#125; <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; member <span class="keyword">as</span> alias &#125; <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; member1 , member2 &#125; <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; member1 , member2 <span class="keyword">as</span> alias2 , [...] &#125; <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> defaultMember, &#123; member [ , [...] ] &#125; <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> defaultMember, * <span class="keyword">as</span> name <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;module-name&quot;</span>; <span class="comment">// 将运行模块中的全局代码, 但实际上不导入任何值。</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常用的导出方式</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">a,</span><br><span class="line">  b,</span><br><span class="line">  c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入方式</span></span><br><span class="line"><span class="keyword">import</span> &#123;a,b,c&#125; <span class="keyword">from</span> <span class="string">&#x27;./a.js&#x27;</span></span><br></pre></td></tr></table></figure><div class="page-header"><h3>引用JS文件</h3>  <p class="blue">在引用JS文件时，需要给js添加type类型module，确保它是一个单独的模块</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./a.js&quot;</span> type=<span class="string">&quot;module&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./b.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div class="page-header"><h3>前端模块化雏形</h3>  <p>前端开发，代码逐渐复杂，开发人员越来重视模块化思想，模块化雏形是通过闭包的形式出现的</p></div><h4 id="匿名闭包，解决了命名冲突问题，但是出现了代码不可复用性"><a href="#匿名闭包，解决了命名冲突问题，但是出现了代码不可复用性" class="headerlink" title="匿名闭包，解决了命名冲突问题，但是出现了代码不可复用性"></a>匿名闭包，解决了命名冲突问题，但是出现了代码不可复用性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> name= <span class="string">&#x27;小明&#x27;</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n1,n2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> n1+n2</span><br><span class="line">&#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h4 id="通过obj对象导出"><a href="#通过obj对象导出" class="headerlink" title="通过obj对象导出"></a>通过obj对象导出</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.js文件</span></span><br><span class="line">;<span class="keyword">var</span> <span class="built_in">module</span> = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name= <span class="string">&#x27;小明&#x27;</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n1,n2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> n1+n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.name = name;</span><br><span class="line">obj.age  = age;</span><br><span class="line">obj.sum  = sum;</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.js文件，引用1.js导出的obj</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(moduleA.name) <span class="comment">// logs 小明</span></span><br><span class="line"><span class="built_in">console</span>.log(moduleA.age)  <span class="comment">// logs 18</span></span><br><span class="line"><span class="built_in">console</span>.log(moduleA.sum(<span class="number">150</span>,<span class="number">35</span>)) <span class="comment">//logs 185</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p><cst>早期模块化开发都是通过闭包的方式避免命名冲突，通过对象导出。规模每一个人使用的模块命名</cst></p><div class="page-header"><h2>Webpack安装</h2><p>本质上，webpack 是一个用于现代 JavaScript 应用程序的 静态模块打包工具。当 webpack 处理应用程序时，它会在内部构建一个 依赖图(dependency graph)，此依赖图对应映射到项目所需的每个模块，并生成一个或多个 bundle。</p><div style="text-align:right;"><a class="btn-beautify button--animated outline blue larger" href="https://webpack.docschina.org/concepts/"   title="Webpack官方文档"><i class="far fa-hand-point-right"></i><span>Webpack官方文档</span></a></div></div><h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><p>webpack 用于编译 JavaScript 模块。一旦完成 <a href="https://webpack.docschina.org/guides/installation">安装</a>，你就可以通过 webpack <a href="https://webpack.docschina.org/api/cli">CLI</a> 或 <a href="https://webpack.docschina.org/api/node">API</a> 与其配合交互。如果你还不熟悉 webpack，请阅读 <a href="https://webpack.docschina.org/concepts">核心概念</a> 和 <a href="https://webpack.docschina.org/comparison">对比</a>，了解为什么要使用 webpack，而不是社区中的其他工具。</p><p><label class="red">Warning<label>：运行 webpack 5 的 Node.js 最低版本是 10.13.0 (LTS)。</p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>在开始之前，请确保安装了 <a href="https://nodejs.org/en/">Node.js</a> 的最新版本。使用 Node.js 最新的长期支持版本(LTS - Long Term Support)，是理想的起步。 使用旧版本，你可能遇到各种问题，因为它们可能缺少 webpack 功能， 或者缺少相关 package。</p><div class="page-header"><h3>本地安装</h3><p>最新的 webpack 正式版本是：v5.37.1<br>要安装最新版本或特定版本，请运行以下命令之一：</p></div> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack</span><br><span class="line"># 或指定版本 </span><br><span class="line">npm install --save-dev webpack@&lt;version&gt;</span><br></pre></td></tr></table></figure><blockquote><p>是否使用 <code>--save-dev</code> 取决于你的应用场景。假设你仅使用 webpack 进行构建操作，那么建议你在安装时使用 <code>--save-dev</code> 选项，因为可能你不需要在生产环境上使用 webpack。如果需要应用于生产环境，请忽略 <code>--save-dev</code> 选项。</p></blockquote><div class="page-header"><h3>全局安装</h3><p>通过以下 NPM 安装方式，可以使 webpack 在全局环境下可用：</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global webpack</span><br></pre></td></tr></table></figure><blockquote><p><strong>不推荐</strong> 全局安装 webpack。这会将你项目中的 webpack 锁定到指定版本，并且在使用不同的 webpack 版本的项目中， 可能会导致构建失败。</p></blockquote><p>我在学vue的时候，是先安装全局的webpack，便于我在任何地方使用，也许以后开发项目，不能这样安装</p><br><a class="btn-beautify button--animated outline block right blue larger" href="/2021/05/22/webpack1/"   title="学习webpack工具"><i class="far fa-hand-point-right"></i><span>学习webpack工具</span></a>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack安装 </tag>
            
            <tag> 前端模块化 </tag>
            
            <tag> 打包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML、CSS、Javascript</title>
      <link href="2021/05/20/Html_CSS/"/>
      <url>2021/05/20/Html_CSS/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="page-header">    <h2 class="huise">HTML5</h2>    <p>    HTML5 是下一代 HTML 标准。HTML , HTML 4.01的上一个版本诞生于 1999 年。自从那以后，Web 世界已经经历了巨变。HTML5 仍处于完善之中。然而，大部分现代浏览器已经具备了某些 HTML5 支持。    <a class="btn-beautify button--animated block larger right" href="/2021/07/06/HTML5/"   title="HTML5"><i class="far fa-hand-point-right"></i><span>HTML5</span></a>    </p></div><div class="page-header">    <h2 class="blue">CSS3</h2>    <p>    CSS 用于控制网页的样式和布局。CSS3 是最新的 CSS 标准。    <a class="btn-beautify button--animated block larger blue right" href="/2021/07/07/CSS3/"   title="CSS3"><i class="far fa-hand-point-right"></i><span>CSS3</span></a>    </p></div><div class="page-header">    <h2 class="pink">ES6 Promise</h2>    <p>    Promise 是异步编程的一种解决方案    <a class="btn-beautify button--animated block larger pink right" href="/2021/07/13/Es6_Promise/"   title="ES6 Promise"><i class="far fa-hand-point-right"></i><span>ES6 Promise</span></a>    </p></div><div class="page-header">    <h2 class="orange">ECMAScript6</h2>    <p>    学习ES6 -ES11新特新，目前前端三大框架vue，react，anglar都运用了大量的ES6新特新。ES6是更新内容最多的版本，是前端必备学习内容。    <a class="btn-beautify button--animated block larger orange right" href="/2021/07/22/ES6/"   title="ECMAScript6"><i class="far fa-hand-point-right"></i><span>ECMAScript6</span></a>    </p></div><div class="page-header">    <h2 class="red">ES7 - ES11</h2>    <p>        <a class="btn-beautify button--animated block larger red right" href="/2021/07/24/ES7_ES11/"   title="ES7 - ES11"><i class="far fa-hand-point-right"></i><span>ES7 - ES11</span></a>    </p></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Front-matter || button</title>
      <link href="2021/05/20/frontmatter/"/>
      <url>2021/05/20/frontmatter/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="禁用布局"><a href="#禁用布局" class="headerlink" title="禁用布局"></a>禁用布局</h2><blockquote><p>如果您不希望使用主题处理文章（帖子/页面），请将<code>layout: false</code>其设置为头版</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>布局<code>layout</code> 设置false ，你的页面不受主题的影响，可以自行配置文章主题</p><div class="page-header">  <h2 class="blue">    Page Front-matter  </h2></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line"><span class="section">sticky:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标签、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>sticky</td><td>【可选】在需要文章置顶时，填写数字，最大999</td></tr></tbody></table><div class="page-header">  <h2 class="blue">    Post Front-matter<small>新增转载数据参数</small>  </h2></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">copyright:</span><br><span class="line">copyright<span class="emphasis">_author:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href:</span></span><br><span class="line"><span class="emphasis">copyright_</span>url:</span><br><span class="line">copyright<span class="emphasis">_info:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line"><span class="section">aside:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr></tbody></table><h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><blockquote><p>使用参数，版本适用于3.0以上</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br><span class="line"></span><br><span class="line">[url]         : 鏈接</span><br><span class="line">[text]        : 按鈕文字</span><br><span class="line">[icon]        : [可選] 圖標</span><br><span class="line">[color]       : [可選] 按鈕背景顔色(默認style時）</span><br><span class="line"><span class="code">                      按鈕字體和邊框顔色(outline時)</span></span><br><span class="line"><span class="code">                      default/blue/pink/red/purple/orange/green</span></span><br><span class="line"><span class="code">[style]       : [可選] 按鈕樣式 默認實心</span></span><br><span class="line"><span class="code">                      outline/留空</span></span><br><span class="line"><span class="code">[layout]      : [可選] 按鈕佈局 默認為line</span></span><br><span class="line"><span class="code">                      block/留空</span></span><br><span class="line"><span class="code">[position]    : [可選] 按鈕位置 前提是設置了layout為block 默認為左邊</span></span><br><span class="line"><span class="code">                      center/right/留空</span></span><br><span class="line"><span class="code">[size]        : [可選] 按鈕大小</span></span><br><span class="line"><span class="code">                      larger/留空</span></span><br></pre></td></tr></table></figure><blockquote><p>样式</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br></pre></td></tr></table></figure><p>This is my website, click the button <a class="btn-beautify button--animated " href="http://www.noti.top/"   title="SimpleLife"><span>SimpleLife</span></a><br>This is my website, click the button <a class="btn-beautify button--animated " href="http://www.noti.top/"   title="SimpleLife"><i class="far fa-hand-point-right"></i><span>SimpleLife</span></a><br>This is my website, click the button <a class="btn-beautify button--animated outline" href="http://www.noti.top/"   title="SimpleLife"><span>SimpleLife</span></a><br>This is my website, click the button <a class="btn-beautify button--animated outline" href="http://www.noti.top/"   title="SimpleLife"><i class="far fa-hand-point-right"></i><span>SimpleLife</span></a><br>This is my website, click the button <a class="btn-beautify button--animated larger" href="http://www.noti.top/"   title="SimpleLife"><i class="far fa-hand-point-right"></i><span>SimpleLife</span></a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#x27;http://www.noti.top/&#x27;,SimpleLife,far fa-hand-point-right,block %&#125;</span><br><span class="line">&#123;% btn &#x27;http://www.noti.top/&#x27;,SimpleLife,far fa-hand-point-right,block center larger %&#125;</span><br><span class="line">&#123;% btn &#x27;http://www.noti.top/&#x27;,SimpleLife,far fa-hand-point-right,block right outline larger %&#125;</span><br></pre></td></tr></table></figure><a class="btn-beautify button--animated block" href="http://www.noti.top/"   title="SimpleLife"><i class="far fa-hand-point-right"></i><span>SimpleLife</span></a><a class="btn-beautify button--animated block center larger" href="http://www.noti.top/"   title="SimpleLife"><i class="far fa-hand-point-right"></i><span>SimpleLife</span></a><a class="btn-beautify button--animated block right outline larger" href="http://www.noti.top/"   title="SimpleLife"><i class="far fa-hand-point-right"></i><span>SimpleLife</span></a><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,green larger %&#125;</span><br></pre></td></tr></table></figure><a class="btn-beautify button--animated larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated blue larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated pink larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated red larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated purple larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated orange larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated green larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span></span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline green larger %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="text-center"><a class="btn-beautify button--animated outline larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline blue larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline pink larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline red larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline purple larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline orange larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline green larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></div><h2 id="label"><a href="#label" class="headerlink" title="label"></a>label</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>text</td><td>文字</td></tr><tr><td>color</td><td>【可选】背景顏色，默认为 default/blue/pink/red/purple/orange/green</td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">臣亮言：&#123;% label 先帝 %&#125;創業未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此誠&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈於內；&#123;% label 忠志之士 purple %&#125;，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。</span><br><span class="line">宮中、府中，俱為一體；陟罰臧否，不宜異同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。</span><br></pre></td></tr></table></figure><p>臣亮言：<mark class="hl-label blue">先帝</mark> 創業未半，而<mark class="hl-label default">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此誠<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈於內；<mark class="hl-label purple">忠志之士</mark> ，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。<br>宮中、府中，俱為一體；陟罰臧否，不宜異同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。</p><h2 id="标签外挂"><a href="#标签外挂" class="headerlink" title="标签外挂"></a>标签外挂</h2><div class="note icon simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><p><br><br></p><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><p><br><br></p><div class="note pink icon simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><p><br><br></p><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><p><br><br></p><div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><p><br><br></p><div class="note purple icon simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><p><br><br></p><div class="note green icon simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Front_matter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> front-matter </tag>
            
            <tag> butterfly </tag>
            
            <tag> blog </tag>
            
            <tag> button </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础知识</title>
      <link href="2021/05/20/Vue2/"/>
      <url>2021/05/20/Vue2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="初识Vue"><a href="#初识Vue" class="headerlink" title="初识Vue"></a>初识Vue</h2><p><strong>1.发展历程</strong></p><ol><li><p>2013年，在 Google 工作的尤雨溪，受到 Angular 的启发，开发出了一款轻量框架，最初命名为 Seed。</p></li><li><p>2013年12月，更名为 Vue，图标颜色是代表勃勃生机的绿色，版本号是 0.6.0。</p></li><li><p>2015.10.26，1.0.0 Evangelion 是 Vue 历史上的第一个里程碑</p></li><li><p>2016.10.01，2.0.0 是第二个重要的里程碑，它吸收了 React 的虚拟 Dom 方案，还支持服务端渲染。</p></li><li><p>2020年09月18日，Vue.js 3.0 正式发布    </p></li></ol><p><strong>2.使用Vue</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- demo容器里面是 Vue模板 被Vue接管 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello，&#123;&#123;name.toUpperCase()&#125;&#125;，&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//创建Vue实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>, <span class="comment">//el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串。</span></span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>:&#123; <span class="comment">//data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。</span></span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;simplelife&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">address</span>:<span class="string">&#x27;南昌&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3.插值语法</strong> <code>&#123;&#123; xxx &#125;&#125;</code></p><p><code>&#123;&#123;xxx&#125;&#125;</code>中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；</p><p>一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；</p><p>PS：插值语法里面可以写 <code>JS表达式</code></p><p>区分：JS表达式 和 JS代码</p><ol><li>表达式：一个表达式会产生一个值，可以放任何一个需要值的地方：三目表达式、函数（没有返回值是 undefined）</li><li>js代码（语句）：<code>if()&#123;&#125;</code>、<code>for()&#123;&#125;</code></li></ol><p><strong>4.容器和实例匹配</strong></p><p>Vue实例和容器是一一对应的关系，容器是如何被Vue实例接管的呢</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>, <span class="comment">// (1)接管id=&#x27;demo&#x27;的容器</span></span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">  </span></span><br><span class="line"><span class="javascript">  <span class="comment">// (2) 第二接管方式</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;&#125;)</span></span><br><span class="line"><span class="javascript">  vm.$mount(<span class="string">&#x27;#demo&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>需要注意的是：</em></p><ol><li>Vue实例在DOM元素从上自下，遇到<code>id=&quot;demo&quot;</code>进行接管，后者不再接管</li><li>接管的DOM元素不一定要用 Id 选择器，可以选择class <code>vm.$mount(&#39;.demo&#39;);</code></li></ol><p><strong>5.Vue模板语法</strong></p><ol><li><p>插值语法</p></li><li><p>指令语法</p><p>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…..）。</p><p> 举例：<code>v-bind:href=&quot;xxx&quot;</code> 或  简写为<code> :href=&quot;xxx&quot;</code>，xxx同样要写js表达式，</p><p>​           且可以直接读取到data中的所有属性。</p><p> 备注：Vue中有很多的指令，且形式都是：v-????，此处我们只是拿v-bind举个例子。</p></li></ol><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p><strong>1.绑定方式：单向(v-bind)和双向(v-model)</strong></p><ol><li>单向绑定：<code>v-bind(:)</code>  语法糖简写成一个冒号</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写一段Vue实例</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;simplelife&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;name&quot;</span> /&gt;</span> 输入框显示 simplelife</span><br></pre></td></tr></table></figure><ol start="2"><li>双向绑定：<code>v-model:value</code> 语法糖写法 <code>v-model</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;name&quot;</span> /&gt; 输入框显示 simplelife</span><br></pre></td></tr></table></figure><p>如右代码是错误的，因为v-model只能应用在表单类元素（输入类元素）<code>&lt;h2 v-model:x=&quot;name&quot;&gt;你好啊&lt;/h2&gt;</code></p><p><strong>2.Vue实例data数据两种写法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// data 有两种写法：对象式、函数式</span></span><br><span class="line"><span class="comment">// (1) 对象式</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;simplelife&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) 函数式</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;simplelife&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总结：对象式更方便，函数式更麻烦，所以我们选择对象式 -_-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。请记住一定选择麻烦的那种，你会感谢我</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原则：由Vue管理的函数，一定不要写箭头函数，因为 this 指向问题。原本需要指向Vue实例，但是由于使用了箭头函数，可能导致this指向其它。</span></span><br></pre></td></tr></table></figure><p><strong>3.MVVM模型</strong></p><p>模型拆析：</p><ol><li>M：模型（Model）：data中的数据</li><li>V：视图（view）：模板代码</li><li>VM：视图模型（ViewModel)：Vue实例</li></ol><p>观察发现：</p><ol><li>data中所有的属性，最后都出现在了vm(vm指Vue实例对象)身上</li><li>vm身上所有的属性及 Vue 原型上所有属性，在Vue模板中都可以直接使用</li></ol><p><strong>4.数据代理</strong></p><p><em>数据代理：通过一个对象代理对另一个对象中属性的操作（读/写）</em></p><p>想要去理解Vue实现数据代理的原理，那就要追溯JS的一个对象方法 <code>Object.defineProperty</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;simplelife&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// number变化了，对象的age会变化吗</span></span><br><span class="line"><span class="comment">// 控制台</span></span><br><span class="line">number = <span class="number">20</span>;</span><br><span class="line">obj.age Enter 回车</span><br><span class="line"><span class="number">18</span> <span class="comment">// 显然现在number和obj.age没有半毛钱关系，那怎么制造关系呢</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们需要借助 Object.defineProperty 内置方法</span></span><br><span class="line"><span class="comment">// 那我们就有必要详细学习下这方法的门道了</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">  value,       <span class="comment">// 值</span></span><br><span class="line">  enumerable,  <span class="comment">// 是否能被枚举</span></span><br><span class="line">  writable,    <span class="comment">// 是否能被修改</span></span><br><span class="line">  configurable,<span class="comment">// 是否能被删除</span></span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 重点讲解 get(getter) 和 set(setter) 方法</span></span><br><span class="line"><span class="comment">// 当有人获取 age 值时，调用get函数去获取值，需要return返回</span></span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;有人读取age属性了&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> number <span class="comment">// 将number值返回给读age值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当有人修改 age 值时，调用set函数去修改，接受传递进来的值</span></span><br><span class="line"><span class="function"><span class="title">set</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;有人修改了age属性，且值是&#x27;</span>,val)</span><br><span class="line">  number = val <span class="comment">// 改变number值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相信此时，你对number的值影响obj.age有初步的理解了</span></span><br></pre></td></tr></table></figure><ol><li>Vue中的数据代理：</li></ol><p>​       通过vm对象来代理data对象中属性的操作（读/写）</p><ol start="2"><li>Vue中数据代理的好处：</li></ol><p>​       更加方便的操作data中的数据</p><ol start="3"><li>基本原理：</li></ol><p>​       通过Object.defineProperty()把data对象中所有属性添加到vm上。</p><p>​       为每一个添加到vm上的属性，都指定一个getter/setter。</p><p>​       在getter/setter内部去操作（读/写）data中对应的属性。</p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p><strong>1.事件的基本使用：</strong></p><ol><li>使用<code>v-on:xxx </code>或 <code>@xxx</code> 绑定事件，其中xxx是事件名；</li><li>事件的回调需要配置在methods对象中，最终会在vm上；</li><li>methods中配置的函数，不要用箭头函数！否则this就不是vm了；</li><li>methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象；</li><li><code>@click=&quot;demo&quot;</code> 和 <code>@click=&quot;demo($event)&quot;</code> 效果一致，但后者可以传参；</li></ol><p><strong>2.Vue中的事件修饰符：</strong></p><ol><li>prevent：阻止默认事件（常用）；</li><li>stop：阻止事件冒泡（常用）；</li><li>once：事件只触发一次（常用）；</li><li>capture：使用事件的捕获模式；</li><li>self：只有event.target是当前操作的元素时才触发事件；</li><li>passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">prevent ==&gt; e.preventDefault() 阻止默认事件</span></span><br><span class="line"><span class="comment">stop    ==&gt; e.stopPagation()   阻止事件冒泡</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickFather&quot;</span>&gt;</span> <span class="comment">&lt;!-- 给父元素点击事件添加 self 修饰符，不受冒泡影响 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--默认行为不阻止，不能跳转--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;clickMe&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事件修饰符组合技能，阻止默认事件和事件冒泡，不过有先后的，顺序会导致一些其它发生--&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span> @<span class="attr">click.prevent.stop</span>=<span class="string">&quot;clickMe&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.passive</span> = <span class="string">&quot;clickMe&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 假如clickMe方法内容很多执行效率低，那么不能第一时间去执行默认事件，此时就需要用passive修饰符，去立即执行默认事件了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.键盘事件修饰符：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1.Vue中常用的按键别名：</span></span><br><span class="line"><span class="comment">回车 ==&gt; enter(Enter)</span></span><br><span class="line"><span class="comment">      删除 ==&gt; delete(捕获&#x27;删除&#x27;和&#x27;退格&#x27;键)</span></span><br><span class="line"><span class="comment">退出 ==&gt; esc</span></span><br><span class="line"><span class="comment">空格 ==&gt; space</span></span><br><span class="line"><span class="comment">换行 ==&gt; tab (特殊，当按下tab时会取消表单类焦点，因此只能配合 keydown 事件)</span></span><br><span class="line"><span class="comment">上(up)、下(down)、左(left)、右(right)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当按下回车键会触发事件 clickMe  enter是Vue别名，原始键名Enter也是可以触发的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;clickMe&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.Enter</span>=<span class="string">&quot;clickMe&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">2.Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</span></span><br><span class="line"><span class="comment">大小写键：caps-locks</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  3.系统修饰键（用法特殊）：ctrl、alt、shift、meta(window徽标键)</span></span><br><span class="line"><span class="comment"> (1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。</span></span><br><span class="line"><span class="comment"> (2).配合keydown使用：正常触发事件。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(1)按下ctrl+按下任意键释放 触发 &lt;button @keyup.ctrl=&quot;clickMe&quot;&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="comment">(2)组合键：ctrl+y释放触发 &lt;button @keyup.ctrl.y=&quot;clickMe&quot;&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4.也可以使用keyCode去指定具体的按键（不推荐）</span></span><br><span class="line"><span class="comment">回车键Enter的keyCode的值是13，通过keyCode去指定按键，同样有效，只是不同的键盘keyCode值不一样</span></span><br><span class="line"><span class="comment">&lt;button @keyup.13=&quot;clickMe&quot;&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5.Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名</span></span><br><span class="line"><span class="comment">Vue.config.keyCodes.backCar = 13 // 回车键</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><blockquote><p>定义：要用的属性不存在，要通过已有属性计算得来</p><p>原理：底层借助了<code>Object.defineProperty</code>方法提供的getter和setter实现</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析计算属性 完整版</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;simplelife&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="function"><span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.age</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">  <span class="string">&#x27;getUpAge&#x27;</span>:&#123; <span class="comment">// &#x27;getUpAge&#x27; 默认是不用写引号，其实是存在的</span></span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.age</span><br><span class="line">&#125;,</span><br><span class="line">      <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span>&#123; <span class="comment">// 获取修改的值</span></span><br><span class="line">        <span class="built_in">this</span>.age = val</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 计算属性直接放入插值语法解析</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">这就是为什么插值解析methods方法需要去加一个括号</span></span><br><span class="line"><span class="comment">因为加一个括号是去执行返回获取返回值 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这时可能就有人问了，如果没有return给函数返回呢，那么函数就会返回 undefined，但是浏览器不会去显示undefined</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123; getAge() &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 而计算属性，它就真的只是属性，当你去读取计算属性的值，会自动调用它的get方法，修改会自动调用 set 方法 --&gt;</span></span><br><span class="line">&#123;&#123; getUpAge &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简写计算属性</span></span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">   <span class="function"><span class="title">getUpAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.age</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时计算属性就是 get 方法。简写方式无法去修改值，只能获取值</span></span><br><span class="line"><span class="comment">// 剖析原理才能明白 为啥插值解析 methods方法和computed的方法不一样</span></span><br></pre></td></tr></table></figure><p>优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便。</p><p>PS：计算属性最终会出现在vm上，直接读取使用即可。</p><h2 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h2><p><strong>Vue侦听器：watch，用于给用户去监听数据，实现原理类似Vue实现数据响应式原理。但它是提供给用户使用的</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1) new Vue配置watch侦听数据变化</span></span><br><span class="line"><span class="comment">// 完整版，需要注意的是，命名需要和侦听数据名称一致</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;simplelife&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>:&#123;</span><br><span class="line"><span class="string">&#x27;name&#x27;</span>:&#123;</span><br><span class="line">      <span class="attr">immediate</span>:<span class="literal">true</span>, <span class="comment">// 初始化时让handler调用一下</span></span><br><span class="line">      <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span><br><span class="line"><span class="comment">// newValue 新值，oldValue 旧值</span></span><br><span class="line">    <span class="built_in">this</span>.name = newValue</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//PS：在写计算属性和侦听属性，我都加了引号，并不是它们不能一定要加，我只是告诉你们，</span></span><br><span class="line"><span class="comment">//它这个是引号不加也是存在的，避让你不理解如下这种方式，添加侦听器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) 第二种方式添加侦听器</span></span><br><span class="line">vm.$watch(<span class="string">&#x27;name&#x27;</span>,&#123;</span><br><span class="line"><span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// (3) 以上两种完整写法，有时我们并不需要在初始化时调用下handler函数，我们可以简写watch侦听</span></span><br><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">  <span class="function"><span class="title">name</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = newValue</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vm.$watch(<span class="string">&#x27;name&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// (4) 深度监视 侦听器默认只能监听一级结构</span></span><br><span class="line"><span class="comment">// 此时name是一个对象，如果name里面的age被改变，侦听器无法监测到，因此handler函数不会执行</span></span><br><span class="line"><span class="comment">// 如何进行深度监测呢，开启深度</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;simplelife&#x27;</span></span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:&#123;</span><br><span class="line">      <span class="attr">deep</span>: <span class="literal">true</span>, <span class="comment">// 开启深度监测</span></span><br><span class="line">      <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = newValue</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h2><p><strong>1.class样式</strong></p><p> 写法:<code>class=&quot;xxx&quot;</code> xxx可以是字符串、对象、数组。</p><ol><li>字符串写法适用于：类名不确定，要动态获取。</li><li>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</li><li> 数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</li></ol><p><strong>2.style样式</strong></p><ol><li> <code>:style=&quot;&#123;fontSize: xxx&#125;&quot;</code>其中xxx是动态值。</li><li><code>  :style=&quot;[a,b]&quot;</code>其中a、b是样式对象。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1.class绑定</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">PS: `&lt;div class=&quot;one&quot; :class=&quot;classArr&quot;&gt;&lt;/div&gt;` 重复class并不会报错，因为`:class`由Vue解析，会</span></span><br><span class="line"><span class="comment">自动合并原先class</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> (1) 数组型</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> (2) 对象型</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;flag ? &#x27;one&#x27;:&#x27;two&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> (3) 三目表达式，根据flag真假动态获取</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;one&#x27;:flag&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> 同(3)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;mood&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> (4) 字符串型，可以通过方法去改变数据内容</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">flag</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">mood</span>:<span class="string">&#x27;nomal&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">classArr</span>:[<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;two&#x27;</span>,<span class="string">&#x27;three&#x27;</span>],</span></span><br><span class="line"><span class="javascript">      <span class="attr">classObj</span>:&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">one</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">two</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">three</span>:<span class="literal">false</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20211024171450.png"></p><p><em>style行内样式虽然很少用，但值得注意的是，命名规则都是驼峰命名，如下</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize:&#x27;40px&#x27;,backgroundImage:&#x27;xxx&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><div class="page-header"><p>控制切换一个元素是否显示。重要代码<code>v-if</code>、<code>v-else</code>、<code>v-else-if</code>、<code>v-show</code>  </p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--v-if=&quot;boolean&quot;是一个布尔值--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--v-show=&quot;boolean&quot;同样是布尔值&gt;</span></span><br><span class="line"><span class="comment">&lt;p v-show=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt;</span></span><br><span class="line"><span class="comment">  &lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;script&gt;</span></span><br><span class="line"><span class="comment">  var app3 = new Vue(&#123;</span></span><br><span class="line"><span class="comment">  el: &#x27;#app-3&#x27;,</span></span><br><span class="line"><span class="comment">  data: &#123;</span></span><br><span class="line"><span class="comment">    seen: true</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p><span class="blue">v-if 和 v-show的区别：</span>v-if 的布尔值是false是不执行该标签的，不会渲染在DOM结构。v-show 是改变display属性，渲染在DOM结构</p><p>PS：频繁的显示和隐藏标签，请使用<code>v-show</code></p><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 <span class="blue">true</span>值的时候被渲染。</p><p><code>v-if && v-else</code>联合使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-else</code> 元素必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素的后面，否则它将不会被识别。</p><p><code>v-else-if</code>和 js 里面的<code>else-if</code>是一样的功能，用来连续判断的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以用判断句返回boolean值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span></span><br><span class="line">  A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span></span><br><span class="line">  B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span></span><br><span class="line">  C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Not A/B/C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="用key管理可复用的元素"><a href="#用key管理可复用的元素" class="headerlink" title="用key管理可复用的元素"></a>用<code>key</code>管理可复用的元素</h3><p>Vue 会尽可能<cst>高效地渲染</cst>元素，通常会<cst>复用已有</cst>元素而不是从头开始渲染。这么做除了使 Vue 变得非常快之外，还有其它一些好处。例如，如果你允许用户在不同的登录方式之间切换：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your email address&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="blue text-left" style="width:200px">        效果模拟：      </div><div id="app">        <div id="inputid">            <div v-if="email">              <label>Username</label>              <input placeholder="Enter your username">            </div>            <div v-else>              <label>Email</label>              <input placeholder="Enter your email address">            </div>            <button type="button" class="btn btn-success" @click="qiehuan()">切换登录类型</button>        </div>    </div><script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js" type="text/javascript" charset="utf-8"></script><script type="text/javascript">    const app = new Vue({        el:'#app',        data:{            email: false        },        methods:{            qiehuan(){                this.email=!this.email;            }        }    })</script><p><br><cst class="red">结论：</cst>条件渲染时，会出现<cst>复用组件</cst>情况。这也是<cst>节约DOM性能</cst>。我们在输入值是，切换登录value值依然在，这就是<cst>复用了input</cst>组件。如果不希望出现这个结果，可以给input 添加<cst> key</cst>属性，<cst>不同的key值</cst>，将会重新渲染一个新的组件，而不是复用</p><h3 id="复用虚拟DOM，通过Key值"><a href="#复用虚拟DOM，通过Key值" class="headerlink" title="复用虚拟DOM，通过Key值"></a>复用虚拟DOM，通过Key值</h3><p>Vue渲染DOM，并不是简单的直接渲染成真实DOM，而是通过渲染成虚拟DOM，再渲染成真实DOM。Vue为了提高效率，会进行比对（diff算法），对可以进行复用的虚拟DOM直接拿过来渲染成真实DOM</p><p>在条件渲染<code>v-for</code>生成标签，使用<code>:key=&quot;index&quot;</code> 通过key绑定唯一标识，来让Vue渲染</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  item: 数组每一个元素</span></span><br><span class="line"><span class="comment">  index：索引值，如果以索引值作为唯一标识那么后期向数组arr后面添加元素是不会有问题的，但向前面添加就有问题了</span></span><br><span class="line"><span class="comment">:key最好绑定元素id，去绑定唯一标识，更好去复用虚拟DOM</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>1.虚拟DOM中key的作用：</strong></p><p>​          key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, </p><p>​          随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</p><p>​       </p><p><strong>2.对比规则：</strong></p><p>​         (1).旧虚拟DOM中找到了与新虚拟DOM相同的key：</p><p>​            ①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！</p><p>​            ②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</p><p>​         (2).旧虚拟DOM中未找到与新虚拟DOM相同的key</p><p>​            创建新的真实DOM，随后渲染到到页面。</p><p>​            </p><p><strong>3.用index作为key可能会引发的问题：</strong></p><ol><li>若对数据进行：逆序添加、逆序删除等破坏顺序操作:</li></ol><p>​               会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</p><ol start="2"><li>如果结构中还包含输入类的DOM：</li></ol><p>​               会产生错误DOM更新 ==&gt; 界面有问题。</p><p><strong>4.开发中如何选择key?:</strong></p><ol><li><p>最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</p></li><li><p>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，</p></li></ol><p>​            使用index作为key是没有问题的。</p><hr><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>我们可以用 <code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是<cst>源数据数组</cst>，而 <code>item</code> 则是被迭代的数组元素的<cst>别名</cst>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 渲染数组，在data数据中存放了items数组，每一个li标签绑定了不同的key值，避免复用，</span></span><br><span class="line"><span class="comment">item 是别名，可以任意，但最好能表达数组含义。--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> example1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">el</span>: <span class="string">&#x27;#example-1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">items</span>: [</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;</span></span><br><span class="line"><span class="javascript">    ]</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="cstimg"><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210521081004.png"/></div><p>在 <code>v-for</code> 块中，我们可以访问所有父作用域的 property。<code>v-for</code> 还支持一个可选的第二个参数，即当前项的索引。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example-2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> example2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">el</span>: <span class="string">&#x27;#example-2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">parentMessage</span>: <span class="string">&#x27;Parent&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">items</span>: [</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;</span></span><br><span class="line"><span class="javascript">    ]</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="cstimg">  <img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210521082043.png" /></div><p>你也可以用 <code>of</code> 替代 <code>in</code> 作为分隔符，因为它更接近 JavaScript 迭代器的语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item of items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在 <code>v-for</code> 里使用对象</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;v-for-object&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;value in object&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">el</span>: <span class="string">&#x27;#v-for-object&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">object</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">title</span>: <span class="string">&#x27;How to do lists in Vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">author</span>: <span class="string">&#x27;Jane Doe&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">publishedAt</span>: <span class="string">&#x27;2016-04-10&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="cstimg">  <img  src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210521082655.png"/></div><p>你也可以提供第二个的参数为 <cst>property </cst>名称 (也就是键名)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, name) in object&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还可以用第三个参数作为索引：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, name, index) in object&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ES6语法遍历数组"><a href="#ES6语法遍历数组" class="headerlink" title="ES6语法遍历数组"></a>ES6语法遍历数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//this.libararys是data数据数组，用in获取的是元素索引</span></span><br><span class="line"><span class="comment">//用of获取的是元素本身，如果是对象的话，直接获取拿到属性值</span></span><br><span class="line"><span class="keyword">let</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> <span class="built_in">this</span>.libararys)&#123;</span><br><span class="line">sum+=<span class="built_in">this</span>.libararys[i].num * <span class="built_in">this</span>.libararys[i].price;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">this</span>.libararys)&#123;</span><br><span class="line">    sum += item.price * item.num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// v-for使用of遍历数组或对象，更符合JS迭代语法</span></span><br><span class="line">v-<span class="keyword">for</span>=<span class="string">&quot;item of items&quot;</span></span><br></pre></td></tr></table></figure><h3 id="v-if-与-v-for-一起使用"><a href="#v-if-与-v-for-一起使用" class="headerlink" title="v-if 与 v-for 一起使用"></a><code>v-if</code> 与 <code>v-for</code> 一起使用</h3><p>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。所以不建议同时使用。</p><h3 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">keyWord</span>:<span class="string">&#x27;&#x27;</span><span class="comment">//关键词</span></span><br><span class="line">  <span class="attr">persons</span>:[</span><br><span class="line">      &#123;<span class="attr">id</span>:<span class="string">&#x27;1001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;simplelife1&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>:<span class="string">&#x27;1002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;simplelife2&#x27;</span>,<span class="attr">age</span>:<span class="number">15</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>:<span class="string">&#x27;1003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;simplelife3&#x27;</span>,<span class="attr">age</span>:<span class="number">28</span>&#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">filerPersons</span>:[]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>:&#123;</span><br><span class="line"><span class="attr">keyWord</span>:&#123; <span class="comment">// 检测关键词的变化</span></span><br><span class="line">      immediate=<span class="literal">true</span>,</span><br><span class="line">    <span class="function"><span class="title">handler</span>(<span class="params">val</span>)</span>&#123; <span class="comment">// val：最新的值</span></span><br><span class="line">      <span class="built_in">this</span>.filerPersons = <span class="built_in">this</span>.persons.filter(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p.name.inderOf(<span class="built_in">this</span>.keyWord) !=== -<span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter 过滤函数是不改变数组，因此我们需要去用一个新函数接收，</span></span><br><span class="line"><span class="comment">// 但是我们DOM用过滤后的数组去渲染的，但是默认是为空的，因此我们需要先初始化执行一次handler函数</span></span><br><span class="line"><span class="comment">// 使用 immediate</span></span><br></pre></td></tr></table></figure><h3 id="数据更新的问题"><a href="#数据更新的问题" class="headerlink" title="数据更新的问题"></a>数据更新的问题</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateMei&quot;</span>&gt;</span>更新马冬梅的信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">30</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">31</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span></span><br><span class="line"><span class="javascript">      ]</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">updateMei</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// this.persons[0].name = &#x27;马老师&#x27; //奏效</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// this.persons[0].age = 50 //奏效</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// this.persons[0].sex = &#x27;男&#x27; //奏效</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.persons[<span class="number">0</span>] = &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马老师&#x27;</span>,<span class="attr">age</span>:<span class="number">50</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125; <span class="comment">//不奏效</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// this.persons.splice(0,1,&#123;id:&#x27;001&#x27;,name:&#x27;马老师&#x27;,age:50,sex:&#x27;男&#x27;&#125;)</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;) </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">当前注释的更新数据方法，都是响应式的，可以渲染到页面</span></span><br><span class="line"><span class="comment">但是直接去替换元素对象，它不是响应式的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果你对数据代理有深刻的了解，那么你的一定知道每一项数据都带着`get`和`set`方法，</span></span><br><span class="line"><span class="comment">但如上这种情况，是没有 get 和 set 的方法的，因此无法响应式渲染页面</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue-set-方法的使用"><a href="#Vue-set-方法的使用" class="headerlink" title="Vue.set()方法的使用"></a><code>Vue.set()</code>方法的使用</h3><p><strong>Vue监视数据的原理：</strong></p><ol><li><p>vue会监视data中所有层次的数据。</p></li><li><p>如何监测对象中的数据？</p></li></ol><p>​        通过setter实现监视，且要在new Vue时就传入要监测的数据。</p><p>​         (1).对象中后追加的属性，Vue默认不做响应式处理</p><p>​         (2).如需给后添加的属性做响应式，请使用如下API：</p><p>​             <code>Vue.set(target，propertyName/index，value)</code> </p><p>​             <code>vm.$set(target，propertyName/index，value)</code></p><ol start="3"><li>如何监测数组中的数据？</li></ol><p>​         通过包裹数组更新元素的方法实现，本质就是做了两件事：</p><p>​          (1).调用原生对应的方法对数组进行更新。</p><p>​          (2).重新解析模板，进而更新页面。</p><ol start="4"><li>在Vue修改数组中的某个元素一定要用如下方法：</li></ol><ul><li>使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</li><li>Vue.set() 或 vm.$set() </li></ul><p>​    <em>PS：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！</em></p><h2 id="收集表单数据v-model"><a href="#收集表单数据v-model" class="headerlink" title="收集表单数据v-model"></a>收集表单数据<code>v-model</code></h2><p><strong>使用<code>v-model</code>收集表单数据</strong></p><p>若：<code>&lt;input type=&quot;text&quot;/&gt;</code>，则v-model收集的是value值，用户输入的就是value值。</p><p>若：<code>&lt;input type=&quot;radio&quot;/&gt;</code>，则v-model收集的是value值，且要给标签配置value值。</p><p>若：<code>&lt;input type=&quot;checkbox&quot;/&gt;</code></p><p>​       1.没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）</p><p>​       2.配置input的value属性:</p><p>​         (1)v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</p><p>​         (2)v-model的初始值是数组，那么收集的的就是value组成的数组</p><p><strong>PS：v-model的三个修饰符：</strong></p><p>​         lazy：失去焦点再收集数据</p><p>​         number：输入字符串转为有效的数字</p><p>​         trim：输入首尾空格过滤</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//lifecycle.png"></p><blockquote><p> 生命周期：又称生命周期回调函数、生命周期函数、生命周期钩子；Vue在关键时期会帮我们调用回调函数；生命周期函数的名称不可更改，不然无法被Vue识别；生命周期函数中的this指向Vue实例对象 或 组件实例对象。</p></blockquote><p><strong>1.常用的生命周期钩子：</strong></p><p>​      1.mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。</p><p>​      2.beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。</p><p><strong>2.关于销毁Vue实例</strong></p><p>​      1.销毁后借助Vue开发者工具看不到任何信息。</p><p>​      2.销毁后自定义事件会失效，但原生DOM事件依然有效。</p><p>​      3.一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> vue基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap框架学习之旅</title>
      <link href="2021/05/19/Bootstrap1/"/>
      <url>2021/05/19/Bootstrap1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://v3.bootcss.com/">Bootstrap</a>是最受欢迎的HTML、CSS和JS框架，用于响应式布局、移动设备优先的WEB项目</p></blockquote><h2 id="起步Bootstrap"><a href="#起步Bootstrap" class="headerlink" title="起步Bootstrap"></a>起步<a href="https://v3.bootcss.com/getting-started/">Bootstrap</a></h2><p>简要介绍Boostrap，以及如何下载、使用，还有基本模板和案例</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>Bootstrap（当前版本v3.4.1）提供一下几种方式帮你快速上手，每一种方式针对具有不用技能等级的开发者和不同的使用场景</p><div style="display: flex;justify-content: center;">    <div style="width:200px;height:200px;">        <h5>用于生产环境的Bootstrap</h5>        <div class="down_content">编译并压缩后的CSS、JS和字体文件。不包含文档和源码 </div>        <div class="downBtn"            onclick="window.open('https://github.com/twbs/bootstrap/releases/download/v3.4.1/bootstrap-3.4.1-dist.zip')">            下载 Boostrap        </div>    </div>    <div style="width:200px;margin: auto 50px;height:200px;">        <h5>Bootstrap 源码</h5>        <div class="down_content">Less、JavaScript 和 字体文件的源码，并且带有文档。需要 Less 编译器和一些设置工作。</div>        <div class="downBtn" onclick="window.open('https://github.com/twbs/bootstrap/archive/v3.4.1.zip')">下载源码</div>  </div><div style="width:200px;height:200px;">    <h5>Sass</h5>    <div class="down_content">这是 Bootstrap 从 Less 到 Sass 的源码移植项目，用于快速地在 Rails、Compass 或 只针对 Sass 的项目中引入。</div>    <div class="downBtn" onclick="window.open('https://github.com/twbs/bootstrap-sass/archive/v3.4.1.tar.gz')">        下载 Sass 项目    </div></div></div><h2 id="BootstrapCDN"><a href="#BootstrapCDN" class="headerlink" title="BootstrapCDN"></a>BootstrapCDN</h2><p>直接使用Bootstrap的CSS和JavaScript文件的链接，更加方便</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可选的 Bootstrap 主题文件（一般不用引入） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap-theme.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-6pzBo3FDv/PJ8r2KRkGHifhEocL+1X2rVCTTkUfGk7/0pbek5mMa1upzvWbrUbOZ&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入BootstrapJS文件，先引入Jquery文件，因为依赖它--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基本模板"><a href="#基本模板" class="headerlink" title="基本模板"></a>基本模板</h2><p>使用一下给出的这份超级简单的HTML模板，可以根据自己的需求进行修改，而不是简单的复制，粘贴</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap 101 Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- HTML5 shim 和 Respond.js 是为了让 IE8 支持 HTML5 元素和媒体查询（media queries）功能 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 警告：通过 file:// 协议（就是直接将 html 页面拖拽到浏览器中）访问页面时 Respond.js 不起作用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src=&quot;https://cdn.jsdelivr.net/npm/html5shiv@3.7.3/dist/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src=&quot;https://cdn.jsdelivr.net/npm/respond.js@1.4.2/dest/respond.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;![endif]--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="通过-npm-进行安装"><a href="#通过-npm-进行安装" class="headerlink" title="通过 npm 进行安装"></a>通过 npm 进行安装</h2><p>你还可以利用 npm 工具来安装 Bootstrap</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install bootstrap@<span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="实例精选"><a href="#实例精选" class="headerlink" title="实例精选"></a>实例精选</h2><p>以下实例全部基于前面所讲的基本模板并配合 Bootstrap 的众多组件开发而成。我们鼓励你根据自身项目的需要对 Bootstrap 进行定制和修改。</p><h3 id="Bootstrap-框架的基本用法"><a href="#Bootstrap-框架的基本用法" class="headerlink" title="Bootstrap 框架的基本用法"></a>Bootstrap 框架的基本用法</h3><div class="sl_jingxuan">  <div class="sl_img">    <img src="https://cdn.jsdelivr.net/npm/@bootcss/v3.bootcss.com@1.0.10/examples/screenshots/starter-template.jpg"  >       <div onclick="window.open('https://v3.bootcss.com/examples/starter-template/')">      <h4>        入门级模板      </h4>      <p>        只有基本的东西：引入了预编译版的 CSS 和 JavaScript 文件，页面只包含了一个 container 元素。      </p>    </div>  </div>  <div class="sl_img" >    <img src="https://cdn.jsdelivr.net/npm/@bootcss/v3.bootcss.com@1.0.10/examples/screenshots/theme.jpg">       <div onclick="window.open('https://v3.bootcss.com/examples/theme/')">      <h4>        Bootstrap 主题      </h4>      <p>        加载可选的 Bootstrap 主题，获得增强的视觉体验。      </p>    </div>  </div>  <div class="sl_img" >    <img src="https://cdn.jsdelivr.net/npm/@bootcss/v3.bootcss.com@1.0.10/examples/screenshots/grid.jpg">       <div onclick="window.open('https://v3.bootcss.com/examples/grid/')">      <h4>        栅格      </h4>      <p>        多个关于栅格布局方面的实例，涉及到层级（tier）、嵌套（nesting）等等。      </p>    </div>  </div>  <div class="sl_img" >    <img src="https://cdn.jsdelivr.net/npm/@bootcss/v3.bootcss.com@1.0.10/examples/screenshots/jumbotron.jpg">       <div onclick="window.open('https://v3.bootcss.com/examples/jumbotron/')">      <h4>        巨幕      </h4>      <p>        使用导航栏和一些基本的网格列围绕jumbotron构建.      </p>    </div>  </div>  <div class="sl_img" >    <img src="https://cdn.jsdelivr.net/npm/@bootcss/v3.bootcss.com@1.0.10/examples/screenshots/jumbotron-narrow.jpg">       <div onclick="window.open('https://v3.bootcss.com/examples/jumbotron-narrow/')">      <h4>        Narrow jumbotron      </h4>      <p>       通过缩小默认容器和jumbotron的范围来构建更自定义的页面.      </p>    </div>  </div></div><h3 id="导航精选"><a href="#导航精选" class="headerlink" title="导航精选"></a>导航精选</h3><div class="sl_jingxuan">  <div class="sl_img">    <img src="https://cdn.jsdelivr.net/npm/@bootcss/v3.bootcss.com@1.0.10/examples/screenshots/navbar.jpg"  >       <div onclick="window.open('https://v3.bootcss.com/examples/navbar/')">      <h4>        导航条      </h4>      <p>       包含导航条和一起附加内容的超级基础的模板。      </p>    </div>  </div>  <div class="sl_img" >    <img src="https://cdn.jsdelivr.net/npm/@bootcss/v3.bootcss.com@1.0.10/examples/screenshots/navbar-static.jpg">       <div onclick="window.open('https://v3.bootcss.com/examples/navbar-static-top/')">      <h4>        静态导航条      </h4>      <p>        包含一个静态导航条以及一些附加内容的超级基础的模板。      </p>    </div>  </div>  <div class="sl_img" >    <img src="https://cdn.jsdelivr.net/npm/@bootcss/v3.bootcss.com@1.0.10/examples/screenshots/navbar-fixed.jpg">       <div onclick="window.open('https://v3.bootcss.com/examples/navbar-fixed-top/')">      <h4>        固定位置的导航条      </h4>      <p>        这是一个超简单的页面，拥有一个固定在顶部的导航条和一些演示内容。      </p>    </div>  </div></div><h3 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h3><div class="sl_jingxuan">  <div class="sl_img">    <img src="https://cdn.jsdelivr.net/npm/@bootcss/v3.bootcss.com@1.0.10/examples/screenshots/cover.jpg"  >       <div onclick="window.open('https://v3.bootcss.com/examples/cover/')">      <h4>        封面图      </h4>      <p>       一个简单、漂亮的首页。      </p>    </div>  </div>  <div class="sl_img" >    <img src="https://cdn.jsdelivr.net/npm/@bootcss/v3.bootcss.com@1.0.10/examples/screenshots/carousel.jpg">       <div onclick="window.open('https://v3.bootcss.com/examples/carousel/')">      <h4>        轮播图      </h4>      <p>        自定义导航栏和轮播图，然后添加一些新组件。      </p>    </div>  </div>  <div class="sl_img" >    <img src="https://cdn.jsdelivr.net/npm/@bootcss/v3.bootcss.com@1.0.10/examples/screenshots/blog.jpg">       <div onclick="window.open('https://v3.bootcss.com/examples/blog/')">      <h4>        博客页面      </h4>      <p>        简单的两列式博客布局，还包含了自定义的导航、页头、分类等元素。      </p>    </div>  </div>  <div class="sl_img" >    <img src="https://cdn.jsdelivr.net/npm/@bootcss/v3.bootcss.com@1.0.10/examples/screenshots/dashboard.jpg">       <div onclick="window.open('https://v3.bootcss.com/examples/dashboard/')">      <h4>        控制台      </h4>      <p>        包含基本结构的后台管理模板，还有固定的侧边栏和导航条。      </p>    </div>  </div>  <div class="sl_img" >    <img src="https://cdn.jsdelivr.net/npm/@bootcss/v3.bootcss.com@1.0.10/examples/screenshots/sign-in.jpg">       <div onclick="window.open('https://v3.bootcss.com/examples/signin/')">      <h4>        登录页      </h4>      <p>       自定义的表单布局以及经过简单设计的登录表单。      </p>    </div>  </div>   <div class="sl_img" >    <img src="https://cdn.jsdelivr.net/npm/@bootcss/v3.bootcss.com@1.0.10/examples/screenshots/justified-nav.jpg">       <div onclick="window.open('https://v3.bootcss.com/examples/justified-nav/')">      <h4>        Justified nav      </h4>      <p>       Create a custom navbar with justified links. Heads up! Not too Safari friendly.      </p>    </div>  </div>   <div class="sl_img" >    <img src="https://cdn.jsdelivr.net/npm/@bootcss/v3.bootcss.com@1.0.10/examples/screenshots/sticky-footer.jpg">       <div onclick="window.open('https://v3.bootcss.com/examples/sticky-footer/')">      <h4>        Sticky footer      </h4>      <p>       Attach a footer to the bottom of the viewport when the content is shorter than it.      </p>    </div>  </div>   <div class="sl_img" >    <img src="https://cdn.jsdelivr.net/npm/@bootcss/v3.bootcss.com@1.0.10/examples/screenshots/sticky-footer-navbar.jpg">       <div onclick="window.open('https://v3.bootcss.com/examples/sticky-footer-navbar/')">      <h4>        Sticky footer with navbar      </h4>      <p>       Attach a footer to the bottom of the viewport with a fixed navbar at the top.      </p>    </div>  </div></div><h3 id="实例性案例"><a href="#实例性案例" class="headerlink" title="实例性案例"></a>实例性案例</h3><div class="sl_jingxuan">  <div class="sl_img divlast" >    <img src="https://cdn.jsdelivr.net/npm/@bootcss/v3.bootcss.com@1.0.10/examples/screenshots/non-responsive.jpg"  >       <div onclick="window.open('https://v3.bootcss.com/examples/non-responsive/')">      <h4>        非响应式 Bootstrap 布局      </h4>      <p>       Easily disable the responsiveness of Bootstrap per our docs.      </p>    </div>  </div>  <div class="sl_img divlast" >    <img src="https://cdn.jsdelivr.net/npm/@bootcss/v3.bootcss.com@1.0.10/examples/screenshots/offcanvas.jpg">       <div onclick="window.open('https://v3.bootcss.com/examples/offcanvas/')">      <h4>        Offcanvas      </h4>      <p>Build a toggleable off-canvas navigation menu for use with Bootstrap.      </p>    </div>  </div>  </div>]]></content>
      
      
      <categories>
          
          <category> Bootstrap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bootstrap入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法</title>
      <link href="2021/05/19/markdown/"/>
      <url>2021/05/19/markdown/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="simple text-center">SimpleLife带你学习，带你飞</div><div class="page-headermd text-center"><h2>MarkDown语法</h2><p>Markdown 指南 是一份免费且开源的 Markdown 参考手册，详细讲解了<br>Markdown 这一简单、易用的文档格式化标记语言的用法。</p><span><a class="btn-beautify button--animated outline blue larger" href="https://www.markdown.xyz"   title="官方文档"><span>官方文档</span></a></span></div> <div class="page-header"><h2>Markdown是什么 </h2><p>一种轻量级的标记语言，可用于在纯文本文档中添加格式化元素。Markdown有John Gruber于2004年创建，如今很受欢迎</p></div>Markdown 语法的首要设计目标是尽可能易读。基于这个目标，Markdown 格式的文档能够以纯文本形式原样发布，而不会看起来像被填满了标签或格式化指令。 <div class="page-header"><h2>为什么要使用Markdown？</h2></div><ol><li>Markdown 处处可用。人们使用它创建 <span class="blue">网站</span>、<span class="blue">文档</span>、<span class="blue">便签</span>、<span class="blue">书籍</span>、<span class="blue">演示文稿</span>、<span class="blue">邮件</span> 和 <span class="blue">技术文档</span></li><li>Markdown 是可移植的。可以将markdown移植到任意平台。你的格式，在其它平台依然生效</li><li>Markdown 是独立于平台的。不受<span class="blue">操作系统</span>的限制</li><li>Markdown 能适应未来的变化。及时你使用你程序不能使用了，你仍然可以使用文本编辑器读取 Markdown 格式的文本。</li><li>Markdown 无处不在。众多平台支持markdown语法，如<span class="blue">Github</span>，<span class="blue">博客园</span></li></ol> <div class="page-header"><h2>工欲善其事，必先利其器</h2><p>Markdown 入门的最佳方式就是多使用它。由于有大量免费工具的存在，这比以前任何时候都更容易开始上手了。</p></div><div class="text-center"><span><a class="btn-beautify button--animated outline blue larger" href="https://dillinger.io"   title="Markdown在线编辑器<small class=huise>不易访问</small>"><i class="far fa-hand-point-right"></i><span>Markdown在线编辑器<small class=huise>不易访问</small></span></a></span><span><a class="btn-beautify button--animated outline blue larger" href="https://www.typora.io"   title="工具Typora"><i class="far fa-hand-point-right"></i><span>工具Typora</span></a></span></div> <div class="page-header"><h2>Markdown基本语法</h2><p>几乎所有 Markdown 应用程序都支持 John Gruber 原始设计文档中列出的 Markdown 基本语法。但是，Markdown 处理程序之间存在着细微的变化和差异，我们都会尽可能标记出来</p></div><span class="blue">创建标题：</span>在标题前面添加井号(#)。个数代表了标题的级别 <table class="table table-bordered table-hover">     <thead class="trta">    <tr class="text-left trta">      <th>Markdown</th>      <th>HTML</th>      <th>渲染效果</th>    </tr>  </thead>  <tbody>    <tr >      <td><samp># Heading level 1</samp></td>      <td><samp class="highlighter-rouge">&lt;h1&gt;Heading level 1&lt;/h1&gt;</samp></td>      <td><h1 class="no-anchor" data-toc-skip="">Heading level 1</h1></td>    </tr>    <tr>      <td><samp class="highlighter-rouge">## Heading level 2</samp></td>      <td><samp class="highlighter-rouge">&lt;h2&gt;Heading level 2&lt;/h2&gt;</samp></td>      <td><h2 class="no-anchor" data-toc-skip="">Heading level 2</h2></td>    </tr>    <tr>      <td><samp class="highlighter-rouge">### Heading level 3</samp></td>      <td><samp class="highlighter-rouge">&lt;h3&gt;Heading level 3&lt;/h3&gt;</samp></td>      <td><h3 class="no-anchor" data-toc-skip="">Heading level 3</h3></td>    </tr>    <tr>      <td><samp class="highlighter-rouge">#### Heading level 4</samp></td>      <td><samp class="highlighter-rouge">&lt;h4&gt;Heading level  4&lt;/h4&gt;</samp></td>      <td><h4 class="no-anchor">Heading level 4</h4></td>    </tr>    <tr>      <td><samp class="highlighter-rouge">##### Heading level 5</samp></td>      <td><samp class="highlighter-rouge">&lt;h5&gt;Heading level 5&lt;/h5&gt;</samp></td>      <td><h5 class="no-anchor">Heading level 5</h5></td>    </tr>    <tr>      <td><samp class="highlighter-rouge">###### Heading level 6</samp></td>      <td><samp class="highlighter-rouge">&lt;h6&gt;Heading level 6&lt;/h6&gt;</samp></td>      <td><h6 class="no-anchor">Heading level 6</h6></td>    </tr>  </tbody> </table> <span class="blue">可选语法：</span>还可以在文本下方添加任意数量的 == 号来标识一级标题，或者 -- 号来标识二级标题。 <table class="table table-bordered">  <thead class="thead-light">    <tr class="text-left">      <th>Markdown</th>      <th>HTML</th>      <th>渲染效果</th>    </tr>  </thead>  <tbody>    <tr>      <td><samp class="highlighter-rouge">Heading level 1<br />===============</samp></td>      <td><samp class="highlighter-rouge">&lt;h1&gt;Heading level 1&lt;/h1&gt;</samp></td>      <td><h1 class="no-anchor" data-toc-skip="">Heading level 1</h1></td>    </tr>    <tr>      <td><samp class="highlighter-rouge">Heading level 2<br />---------------</samp></td>      <td><samp class="highlighter-rouge">&lt;h2&gt;Heading level 2&lt;/h2&gt;</samp></td>      <td><h2 class="no-anchor" data-toc-skip="">Heading level 2</h2></td>    </tr>  </tbody></table> <footer class="blue"> 当井号（#）和标题文本之间<span class="red">没有空格</span>时，各 Markdown 应用程序的处理方式是不一样的。为了兼容考虑，请在井号和标题文本之间<span class="red">添加一个空格</span>。<hr></footer><p><span class="blue" >创建段落：</span>请使用空白行将一行或多行文本进行分隔。</p><table class="table table-bordered" id="csttable"><thead><tr class="text-left"><th>Markdown</th><th>HTML</th><th>渲染效果</th></tr></thead><tbody><tr><td><samp class="highlighter-rouge"> I really like using Markdown.<br /><br />I sampthink I'll use it to format all of my documents from now on.</samp></td><td><samp class="highlighter-rouge">&lt;p&gt;I really like using Markdown.&lt;/p&gt;<br /><br />&lt;p&gt;I think I'll use it to format all of my documents from now on.&lt;/p&gt;</samp></td><td><p>I really like using Markdown.</p><p>I think I'll use it to format all of my documents from now on.</p></td>    </tr>  </tbody></table><p><span class="blue">换行（Line Break）用法的最佳实践</span></p><p>在一行的末尾添加<span class="red">两个或多个空格</span>，然后按回车键（return），即可创建一个换行（line break） (&lt;br&gt;)。<br><br>因为很难在编辑器中直接看到空格，并且很多人在每个句子后面都会有意或无意地添加两个格<br>为了<span class="red">兼容性</span>，请在行尾添加“<span class="red">结尾空格</span>”或 HTML 的 <span class="red">&lt;br&gt;</span>标签来实现换行。</p><p><span class="blue">强调字体：</span>粗体和斜体的使用<br>要<span class="blue">加粗文本</span>，请在单词或短语的前后各添加<span class="red">两个星号或下划线</span>。如需加粗一个单词或短语的中间部分用以表示强调的话，请在要加粗部分的两侧各添加两个星号<br><br>要用<span class="blue">斜体显示文本</span>，请在单词或短语前后添加<span class="red">一个星号或下划线</span>。要斜体突出单词的中间部分，请在字母前后各添加一个星号，中间不要带空格。</p><footer class="red">尽量使用星号*去加粗和斜体，因为Markdown的众多应用程序处理单词中间下划线意见不一致。加粗和斜体同时使用，左右两侧添加三个星号*</footer><hr><div class="page-header"><h2>块引用</h2><p>要创建块引用，请在段落前添加一个 > 符号。</p></div><code>> Dorothy followed her through many of the beautiful rooms in her castle.</code><blockquote><p> Dorothy followed her through many of the beautiful rooms in her castle.</p></blockquote><p>  嵌套块引用效果：通过多个'>' 来达到效果</p><blockquote><blockquote><p>3</p><blockquote><p>2</p><blockquote><p>1</p></blockquote></blockquote></blockquote></blockquote><div>  <h2>    列表  </h2>  <p>        你可以将多个条目组织成有序或无序列表。      </p></div>1. 有序列表：2. 无序列表<hr><div class="page-header">  <h2>    表格  </h2>  <p>    如需添加表格，请使用三个或更多个连字符（---）来为每个列创建表头，并使用管道符（|）来分隔每个列。你还可以     在表格的任意一侧添加管道符。  </p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description |</span><br><span class="line">| ----------- | ----------- |</span><br><span class="line">| Header      | Title       |</span><br><span class="line">| Paragraph   | Text        |</span><br></pre></td></tr></table></figure><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p>通过在标题行中的连字符(–)的左侧或右侧或两侧添加冒号（<code>:</code>），可以将对应列中的文本向左或向右或居中对齐。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description | Test Text     |</span><br><span class="line">| :---        |    :----:   |          ---: |</span><br><span class="line">| Header      | Title       | Here&#x27;s this   |</span><br><span class="line">| Paragraph   | Text        | And more      |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">Syntax</th><th align="center">Description</th><th align="right">Test Text</th></tr></thead><tbody><tr><td align="left">Header</td><td align="center">Title</td><td align="right">Here’s this</td></tr><tr><td align="left">Paragraph</td><td align="center">Text</td><td align="right">And more</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> front-matter </tag>
            
            <tag> 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software Sharing</title>
      <link href="2021/05/19/software/"/>
      <url>2021/05/19/software/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="page-header">    <h2 class="huise">HBuilderX<small>web开发编辑器</small></h2>    <p>HBuilderX，简称HX，是轻如编辑器、强如IDE的合体版本。轻巧、极速 为极客、为懒人、为你</p>        <div class="text-right">    <a class="btn-beautify button--animated outline larger" href="https://www.dcloud.io/hbuilderx.html"   title="HBuilderX"><i class="far fa-hand-point-right"></i><span>HBuilderX</span></a>       </div></div><div class="page-header">    <h2 class="blue">XMind<small>思维导图</small></h2>    <p>XMind 是一个全功能的思维导图和头脑风暴软件，为激发灵感和创意而生。作为一款有效提升工作和生活效率的生产力工具，受到全球百千万用户的青睐。</p>        <div class="text-right">    <a class="btn-beautify button--animated outline blue larger" href="https://www.xmind.cn"   title="XMind"><i class="far fa-hand-point-right"></i><span>XMind</span></a>    <a class="btn-beautify button--animated outline blue larger" href="https://pan.baidu.com/s/10Gy1CvkBP_aR6Yrc_KH6Rw"   title="[百度网盘life(破解)]XMind"><i class="far fa-hand-point-right"></i><span>[百度网盘life(破解)]XMind</span></a>       </div></div><div class="page-header">    <h2 class="pink">VS Code<small>强大的IDE</small></h2>    <p>VS Code，全称Visual Studio Code，是轻量的编辑器，通过下载插件，让VS Code 更加灵活，好用。你想要的功能，插件都能满足你！</p>        <div class="text-right">    <a class="btn-beautify button--animated outline pink larger" href="https://code.visualstudio.com/Download/"   title="VS Code"><i class="far fa-hand-point-right"></i><span>VS Code</span></a>       </div></div>]]></content>
      
      
      <categories>
          
          <category> 仓库 </category>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
            <tag> 神器 </tag>
            
            <tag> 强大好用 </tag>
            
            <tag> Tooltip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tool Sharing</title>
      <link href="2021/05/19/tooltip/"/>
      <url>2021/05/19/tooltip/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="page-header">    <h2 class="huise">PotPlayer<small>万能播放器</small></h2>    <p>是一款绝对轻量级的万能播放器，而且免费，不会有弹窗</p>        <div class="text-right">    <a class="btn-beautify button--animated outline larger" href="https://potplayer.en.softonic.com/download"   title="PotPlayer"><i class="far fa-hand-point-right"></i><span>PotPlayer</span></a>       </div></div><div class="page-header">    <h2 class="blue">ImageGlass<small>图像查看器</small></h2>    <p>一个轻量级、多功能的图像查看器</p>        <div class="text-right">    <a class="btn-beautify button--animated outline blue larger" href="https://imageglass.org"   title="ImageGlass"><i class="far fa-hand-point-right"></i><span>ImageGlass</span></a>       </div></div><div class="page-header">    <h2 class="pink">Snipaste<small>截图工具</small></h2>    <p>Snipaste 是一个简单但强大的截图工具，也可以让你将截图贴回到屏幕上</p>        <div class="text-right">    <a class="btn-beautify button--animated outline pink larger" href="https://zh.snipaste.com/download.html"   title="Snipaste"><i class="far fa-hand-point-right"></i><span>Snipaste</span></a>       </div></div><div class="page-header">    <h2 class="red">Antelope<small>压缩照片</small></h2>    <p>Antelope是快速，批量优化的应用程序，用于JPEG和PNG文件大小，而不会降低质量</p>        <div class="text-right">    <a class="btn-beautify button--animated outline red larger" href="https://boldright.co.jp/products/antelope/"   title="Antelope"><i class="far fa-hand-point-right"></i><span>Antelope</span></a>       </div></div><div class="page-header">    <h2 class="purple">PicGo<small>图床管理</small></h2>    <p>PicGo 是一款开源跨平台的免费图片上传工具以及图床相册管理软件，它能帮你快速地将图片上传到微博、又拍云、阿里云 OSS、腾讯云 COS、七牛、GitHub、sm.ms、Imgur 等常见的免费图床网站</p>        <div class="text-right">    <a class="btn-beautify button--animated outline purple larger" href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.2.2"   title="[Github]PicGo"><i class="far fa-hand-point-right"></i><span>[Github]PicGo</span></a>      <a class="btn-beautify button--animated outline purple larger" href="https://pan.baidu.com/s/1KOtURBzcILC1n3ftIuuheA"   title="[百度网盘life]PicGo"><i class="far fa-hand-point-right"></i><span>[百度网盘life]PicGo</span></a>       </div></div><div class="page-header">    <h2 class="orange">Typora<small>markdown编辑器</small></h2>    <p>一个轻量级的Markdown编辑器，简单而强大，可读可写，开源免费</p>        <div class="text-right">    <a class="btn-beautify button--animated outline orange larger" href="https://www.typora.io/"   title="Typora"><i class="far fa-hand-point-right"></i><span>Typora</span></a>       </div></div><div class="page-header">    <h2 class="green">TEMPMAIL<small>临时邮箱</small></h2>    <p>不用再担心垃圾邮件，广告邮件，黑客和机器人攻击。让您真实的邮箱保持干净和安全。Temp Mail提供临时、安全、匿名、免费的一次性电子邮件地址。</p>        <div class="text-right">    <a class="btn-beautify button--animated outline green larger" href="https://temp-mail.org/zh/"   title="TEMPMAIL"><i class="far fa-hand-point-right"></i><span>TEMPMAIL</span></a>       </div></div><div class="page-header">    <h2 class="huise">IDM<small>资源下载</small></h2>    <p>IDM，全称internetdownloadmanager。开启后，可以下载网页资源，简单快速而强大</p>        <div class="text-right">    <a class="btn-beautify button--animated outline larger" href="https://pan.baidu.com/s/1rSxKxFVuzQl1gwJ-_9iV6g"   title="[百度网盘life]TEMPMAIL"><i class="far fa-hand-point-right"></i><span>[百度网盘life]TEMPMAIL</span></a>       </div></div><div class="page-header">    <h2 class="blue">HUORONG<small>火绒安全</small></h2>    <p>不打扰，是我们的态度；易使用，是我们的温度。火绒安全也绝对轻量级，个人版免费使用，拒绝弹窗，净化一切</p>        <div class="text-right">    <a class="btn-beautify button--animated outline blue larger" href="https://www.huorong.cn"   title="HUORONG"><i class="far fa-hand-point-right"></i><span>HUORONG</span></a>       </div></div>]]></content>
      
      
      <categories>
          
          <category> 仓库 </category>
          
          <category> 工具箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神器 </tag>
            
            <tag> Tooltip </tag>
            
            <tag> 工具箱 </tag>
            
            <tag> 轻量级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Hexo主题</title>
      <link href="2021/05/17/Hexo2/"/>
      <url>2021/05/17/Hexo2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><blockquote><p>什么是<a href="https://git-scm.com/">Git</a>？Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们将本地搭建好的网站，使用Git工具同步到Github上</p></blockquote><p><a href="https://git-scm.com/download/win">Git下载地址</a></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517081113.png"></p><blockquote><p>在window桌面右键菜单栏，点击Git Bash Here，这是接下来需要的工具</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517081245.png"></p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><blockquote><p>Hexo基于Node.js，Node.js下载地址<a href="https://nodejs.org/en/download/%EF%BC%8C%E6%B3%A8%E6%84%8F%E5%AE%89%E8%A3%85Node.js%E4%BC%9A%E5%8C%85%E5%90%AB%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%8F%8Anpm%E7%9A%84%E5%AE%89%E8%A3%85%EF%BC%8C%E5%AE%89%E8%A3%85%E5%90%8E%EF%BC%8C%E5%9C%A8%E5%91%BD%E5%90%8D%E8%A1%8CCMD%E8%BE%93%E5%85%A5node">https://nodejs.org/en/download/，注意安装Node.js会包含环境变量及npm的安装，安装后，在命名行CMD输入node</a> -v，判断是否安装成功</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517081912.png"></p><p>通过两个命令，判断node和npm是否安装成功，安装成功会得到版本号信息</p><h3 id="使用npm命令安装Hexo-Git安装"><a href="#使用npm命令安装Hexo-Git安装" class="headerlink" title="使用npm命令安装Hexo(Git安装)"></a>使用npm命令安装Hexo(Git安装)</h3><p><code>npm install -g hexo-cli </code></p><h3 id="耐心等待安装后，准备初始化博客"><a href="#耐心等待安装后，准备初始化博客" class="headerlink" title="耐心等待安装后，准备初始化博客"></a>耐心等待安装后，准备初始化博客</h3><blockquote><p>选择一个路径，创建博客文件夹，用于存放博客的。进入博客文件夹</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517082803.png"></p><div style=text-align:center;font-size:20px>  我创建了AlovelyYou文件夹，右键打开Git Bash，输入命令<cmd>hexo init</cmd>  <br>使用命令hexo s 本地访问网站，输入临时网站localhost:4000，如下图所示</div><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517083415.png"></p><h3 id="配置username和useremail信息，本地绑定github"><a href="#配置username和useremail信息，本地绑定github" class="headerlink" title="配置username和useremail信息，本地绑定github"></a>配置username和useremail信息，本地绑定github</h3><blockquote><p>git config –global user.name “你的GitHub用户名”<br>git config –global user.email “你的GitHub注册邮箱”</p></blockquote><h3 id="生成ssh密钥文件："><a href="#生成ssh密钥文件：" class="headerlink" title="生成ssh密钥文件："></a>生成ssh密钥文件：</h3><blockquote><p>ssh-keygen -t rsa -C “你的GitHub注册邮箱”</p></blockquote><p>然后直接三个回车即可，默认不需要设置密码。在c盘用户管理员文件夹找到.ssh，打开id_rsa.push密钥，将全部内容复制下来</p><blockquote><p>$ ssh -T <a href="mailto:&#x67;&#105;&#116;&#x40;&#103;&#x69;&#116;&#104;&#x75;&#98;&#46;&#x63;&#111;&#x6d;">&#x67;&#105;&#116;&#x40;&#103;&#x69;&#116;&#104;&#x75;&#98;&#46;&#x63;&#111;&#x6d;</a> # 注意邮箱地址不用改</p></blockquote><p>因为我已经搭建了博客，不演示输入命令的结果了。按照文字说明即可</p><h3 id="进入Github设置ssh密钥"><a href="#进入Github设置ssh密钥" class="headerlink" title="进入Github设置ssh密钥"></a>进入Github设置ssh密钥</h3><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517090803.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517091154.png"></p><p>输入命令ssh <a href="mailto:&#x67;&#105;&#116;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#x67;&#105;&#116;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#x62;&#x2e;&#x63;&#x6f;&#109;</a>，结果所下图所示说明成功啦</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517091358.png"></p><h3 id="配置hexo文件-config-yml"><a href="#配置hexo文件-config-yml" class="headerlink" title="配置hexo文件_config.yml"></a>配置hexo文件_config.yml</h3><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517091801.png"></p><p>我们将本地博客和GitHub关联起来，打开配置文件，在最后一页</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517092021.png"></p><p>如果你的仓库分支是master，在branch填master，我默认是main，如果你的默认是master，请修改</p><p>保存文件配置，现在安装Git部署插件，将本地部署到github</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><code>hexo c</code> &amp;&amp; <code>hexo g</code> &amp;&amp;<code>hexo d</code></p><p>通过这三条命令，你可以将本地博客部署到Github上，在输入命名时，你可以跟我一样通过&amp;&amp;符合连接三个命令，你也可以单独执行</p><div style="text-align:right;"><a class="btn-beautify button--animated outline green larger" href="/2021/05/17/Hexo3/"   title="搭建Hexo博客(三)"><i class="far fa-hand-point-right"></i><span>搭建Hexo博客(三)</span></a></div>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly主题</title>
      <link href="2021/05/17/Hexo3/"/>
      <url>2021/05/17/Hexo3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="搭建Butterfly主题"><a href="#搭建Butterfly主题" class="headerlink" title="搭建Butterfly主题"></a>搭建<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly</a>主题</h3><blockquote><p>我自己搭建博客主题就是butterfly，也遇到了很多困惑。目前基本解决了。如果你不喜欢这个主题可以去百度搜索其他Hexo主题。接下来，我会写一些搭建butterfly主题的教程，搭建者需要配合<a href="https://butterfly.js.org/posts/21cfbf15/">官方文档</a>。单纯依靠官方文档搭建是可以的，我也是如此。</p></blockquote><h3 id="Git安装Butterfly主题"><a href="#Git安装Butterfly主题" class="headerlink" title="Git安装Butterfly主题"></a>Git安装Butterfly主题</h3><p>在你的博客根目录右键打开Git Bash</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> master https://github.com/jerryc127/hexo<span class="literal">-theme</span><span class="literal">-butterfly</span>.git themes/butterfly</span><br></pre></td></tr></table></figure><h3 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h3><p>修改站点配置文件<code>_config.yml</code>，把主题更改<code>butterfly</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>如果你没有pug以及stylus的渲染器，请下载安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-renderer</span><span class="literal">-pug</span> hexo<span class="literal">-renderer</span><span class="literal">-stylus</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><h3 id="主题配置文件复制"><a href="#主题配置文件复制" class="headerlink" title="主题配置文件复制"></a>主题配置文件复制</h3><p>把主题文件夹中的<code>_config.yml</code>复制到Hexo根目录下，听说重新命名<code>_config.butterfly.yml</code></p><p>以后只需要在<code>_config.butterfly.yml</code>进行配置就行</p><p>Hexo会自动合并主题中的<code>_config.yml</code>和<code>_config.butterfly.yml</code>里的配置，如果存在同名配置，会使用</p><p><code>_config.butterfly.yml</code>的配置，其优先度较高。</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517110551.png"></p><h3 id="小结：butterfly主题基本样式ok"><a href="#小结：butterfly主题基本样式ok" class="headerlink" title="小结：butterfly主题基本样式ok"></a>小结：butterfly主题基本样式ok</h3><blockquote><p>以上是一些简单的搭建操作，使用Hexo命令部署到Github上，已经会有一个基本的主题样式，</p></blockquote><blockquote><p>后续我将结合文档，写留言板、说说、在线聊天等功能博客。在此之前请完善butterfly主题基本样式，如果有问题请留言</p></blockquote><div style="text-align:center;">  <a class="btn-beautify button--animated outline green larger" href="/2021/05/17/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2(%E4%B8%89)/"   title="留言板"><i class="far fa-hand-point-right"></i><span>留言板</span></a>  <a class="btn-beautify button--animated outline blue larger" href="/2021/05/17/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2(%E4%B8%89)/"   title="说说"><i class="far fa-hand-point-right"></i><span>说说</span></a>  <a class="btn-beautify button--animated outline red larger" href="/2021/05/17/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2(%E4%B8%89)/"   title="在线聊天"><i class="far fa-hand-point-right"></i><span>在线聊天</span></a></div>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue框架学习之旅</title>
      <link href="2021/05/17/Vue1/"/>
      <url>2021/05/17/Vue1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Vue-js是什么"><a href="#Vue-js是什么" class="headerlink" title="Vue.js是什么"></a>Vue.js是什么</h2><p>Vue（读音/vju:/，类似view）是一套用于构建用户界面的渐进式框架。以前学习JQuery编程叫命令式编程，学习vue编程，叫声明式编程。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用</p><h2 id="前端三大框架之一"><a href="#前端三大框架之一" class="headerlink" title="前端三大框架之一"></a>前端三大框架之一</h2><p>Vue框架：作者<a href="https://www.jianshu.com/p/3092b382ee80">尤雨溪</a>，创建了全世界三大前端框架之一，领先于React和Angular</p><p>2013年，在Google工作的尤雨溪，收到Angular的启发，开发了一款轻量框架，最初命名Seed</p><p>设计思想：是一种“渐进式框架”，淡化框架本省的主张，降低框架作为工具的复杂度，从而降低对使用者的要求</p><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><blockquote><p>官方指南假设你已了解关于 HTML、CSS 和 JavaScript 的中级知识。如果你刚开始学习前端开发，将框架作为你的第一步可能不是最好的主意——掌握好基础知识再来吧！之前有其它框架的使用经验会有帮助，但这不是必需的。</p></blockquote><p>尝试Vue.js最简单的方法是使用hello world例子，引用vue文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告，利于初学者 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Vue.js的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进DOM的系统：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="comment">//存放数据</span></span><br><span class="line">    <span class="attr">message</span>:<span class="string">&#x27;Hello Vue&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//写方法</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">//属性方法，有缓存</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="comment">//声明子组件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>以上一个简单的Vue实例，写了基本的Vue语法，使用的是Mustach语法，用来显示Vue实例的数据，但是容器需要捆绑id，接下来我会一步步记录Vue的学习笔记</p></blockquote><h2 id="学习内容"><a href="#学习内容" class="headerlink" title="学习内容"></a>学习内容</h2><ol><li><a href="http://www.noti.top/2021/05/20/Vue2/">Vue基础知识</a></li><li><a href="http://www.noti.top/2021/05/21/vuevfor/">Vue数组应用</a></li><li><a href="http://www.noti.top/2021/05/21/vuezhiling/">Vue基础指令</a></li><li><a href="http://www.noti.top/2021/05/28/vue-components/">Vue组件化开发</a></li><li><a href="http://www.noti.top/webpack/">学习Webpack打包工具</a></li><li><a href="http://www.noti.top/2021/05/27/vue-cli/">掌握开发项目Vue-CLI脚手架</a></li><li><a href="http://www.noti.top/2021/06/01/Vue-Router%20Content/">掌握Vue路由</a></li></ol><div style="text-align:right;">  <a class="btn-beautify button--animated outline blue larger" href="https://cn.vuejs.org/v2/guide/"   title="Vue2.x官方文档"><i class="far fa-hand-point-right"></i><span>Vue2.x官方文档</span></a>  <a class="btn-beautify button--animated outline blue larger" href="https://v3.cn.vuejs.org/api/"   title="Vue3.x官方文档"><i class="far fa-hand-point-right"></i><span>Vue3.x官方文档</span></a>  <a class="btn-beautify button--animated outline blue larger" href="/vue/"   title="Vue框架学习目录"><i class="far fa-hand-point-right"></i><span>Vue框架学习目录</span></a></div>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Github博客</title>
      <link href="2021/05/16/Hexo1/"/>
      <url>2021/05/16/Hexo1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="搭建github博客"><a href="#搭建github博客" class="headerlink" title="搭建github博客"></a>搭建github博客</h2><ul><li><h3 id="创建Github账号"><a href="#创建Github账号" class="headerlink" title="创建Github账号"></a>创建<a href="https://github.com/join">Github账号</a></h3></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516202937.png" alt="Github注册页面"></p><blockquote><p>选择一个好听、好记的用户名，博客以用户名为域名的，使用字母+数组组合</p></blockquote><blockquote><p>创建好github账号，验证Email，这是重要的</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516204745.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516205631.png"></p><p>进入Your repositiories 创建创库，仓库名字 username.github.io，以后进入博客名字就是这个</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516211900.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516212649.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516213223.png"></p><blockquote><p>这时候你的基本博客搭建好了，接下搭建Hexo博客主题，美化自己的博客</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516215941.png" alt="Butterfly样式"></p><p>**这是我们后续将会搭建的主题</p><div style="text-align:right;">  <a class="btn-beautify button--animated outline green larger" href="/2021/05/17/Hexo2/"   title="搭建Hexo博客(二)"><i class="far fa-hand-point-right"></i><span>搭建Hexo博客(二)</span></a></div>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue插槽Slot</title>
      <link href="2021/05/13/Vue_slot/"/>
      <url>2021/05/13/Vue_slot/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h2><blockquote><p>大纲：了解插槽Slot的基本使用、学习新概念具名，通过给slot添加值name，指定修改内容、理解插槽作用域：父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p></blockquote><h2 id="插槽slot的基本使用"><a href="#插槽slot的基本使用" class="headerlink" title="插槽slot的基本使用"></a>插槽slot的基本使用</h2><p>加强扩展性：在模板添加<code>&lt;slot&gt;&lt;/slot&gt;</code>，当需要给模板新添加内容时，可以在子组件中添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用模板时需要添加button--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">    按钮</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这新增的标签会放到插槽位置上，如果有多个标签同样一起放入--&gt;</span></span><br></pre></td></tr></table></figure><p>添加默认值：如果模板在很多地方都需要这个标签，但是小部分不需要，可以给插槽添加默认值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--默认含有按钮--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--如果不需要按钮，可以新增替换--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><blockquote><p>给<code>slot</code>插槽添加<code>name</code>值，当创建模板的时候，会存在多个插槽，当需要改变特定插槽的值，可以指定它的name</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>不需要指定name，被替换<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--指定了name=&quot;left&quot;，替换默认值为button--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">&quot;left&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--没有指定slot=&quot;name&quot;的都替换--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>使用<code>v-slot</code>绑定name</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--template模板，header和footer指定了name属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用模板--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过template标签 用v-slot绑定特定插槽，能添加很多新标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://cn.vuejs.org/v2/guide/components-slots.html">官方示例</a></p><h2 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h2><blockquote><p>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--使用模板时,模板cpn相当div，使用的数据都是vue实例的，而不是模板组件数据--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-show:</span>&quot;<span class="attr">isShow</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>使用<code>slot</code>作用域插槽</p><blockquote><p>父组件替换插槽的标签，但是内容由子组件提供</p><ul><li>因此我们需要从子组件获取到数据</li><li>但是因为作用域拿到的数据是vue实例data，因此我们需要子组件传过去</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;slot&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;item in slot.aanguage&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">:aanguage</span>=<span class="string">&quot;pLanguage&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in pLanguage&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">message</span>:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">cpn</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">template</span>:<span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">pLanguage</span>:[<span class="string">&#x27;Javascript&#x27;</span>,<span class="string">&#x27;C++&#x27;</span>,<span class="string">&#x27;C#&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;Php&#x27;</span>]</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>PS：绑定子组件数据的名字不能使用大写，因为驼峰标识。无法识别</p><p><code>&lt;slot :aanguage=&quot;pLanguage&quot;&gt;</code></p><p><code>&lt;template slot-scope=&quot;slot&quot;&gt;</code></p><p><code>        &lt;span v-for=&quot;item in slot.aanguage&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue插槽Slot </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
