<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>鼠标右键菜单管理</title>
      <link href="2021/05/31/Right%20click%20menu%20management/"/>
      <url>2021/05/31/Right%20click%20menu%20management/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="桌面右键菜单管理"><a href="#桌面右键菜单管理" class="headerlink" title="桌面右键菜单管理"></a>桌面右键菜单管理</h2><p>路径：<code>计算机\HKEY_CLASSES_ROOT\Directory\Background\shell</code></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210531213137.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210531213333.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210531213421.png"></p><p>在空白处，右键新建 –&gt; 字符串值，命名<code>Icon</code>。这是放图标的。</p><p>双击修改值，将你的文件exe路径填入</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210531213629.png"></p><h2 id="文件夹右键菜单管理"><a href="#文件夹右键菜单管理" class="headerlink" title="文件夹右键菜单管理"></a>文件夹右键菜单管理</h2><p>路径：<code>计算机\HKEY_CLASSES_ROOT\Directory\shell</code></p><p><cst>步骤同上</cst></p><h2 id="文件右键菜单管理"><a href="#文件右键菜单管理" class="headerlink" title="文件右键菜单管理"></a>文件右键菜单管理</h2><p>路径：<code>计算机\HKEY_CLASSES_ROOT\*\shell</code></p><p><cst>步骤同上</cst></p>]]></content>
      
      
      <categories>
          
          <category> Repository </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鼠标右键菜单管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Runtime-Compiler和Runtime-only的区别</title>
      <link href="2021/05/31/compiler-only/"/>
      <url>2021/05/31/compiler-only/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="区别在于main-js"><a href="#区别在于main-js" class="headerlink" title="区别在于main.js"></a>区别在于main.js</h2><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210531161629.png" alt="a"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210531163953.png"></p><p>对比区别在于Vue实例中，<code>render</code>使用了一个箭头函数，原型是createElement()，用于替换<code>&lt;div class=&quot;id&quot;&gt;</code></p><p>内部函数<code>createElement()</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--真实开发不会这么写，但是需要了解原理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">createElement(<span class="string">&#x27;标签&#x27;</span>,&#123;标签属性&#125;,[标签内容])</span></span><br><span class="line"><span class="javascript">createElement(<span class="string">&#x27;h2&#x27;</span>,&#123;<span class="attr">class</span>: <span class="string">&#x27;box&#x27;</span>&#125;,[<span class="string">&#x27;hello world&#x27;</span>])</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 写子标签</span></span></span><br><span class="line"><span class="javascript">  createElement(<span class="string">&#x27;h2&#x27;</span>,&#123;<span class="attr">class</span>: <span class="string">&#x27;box&#x27;</span>&#125;,[<span class="string">&#x27;hello world&#x27;</span>,createElement(<span class="string">&#x27;button&#x27;</span>,[<span class="string">&#x27;按钮&#x27;</span>])])</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">||</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  hello world</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue的编译渲染过程"><a href="#Vue的编译渲染过程" class="headerlink" title="Vue的编译渲染过程"></a>Vue的编译渲染过程</h2><p><code>template</code> –&gt; <code>ast</code>(abstract syntax tree 抽象语法树) –&gt; <code>render函数</code> –&gt; <code>VDOM</code> –&gt; <code>DOM</code></p><ul><li>先将template解析(parse)成抽象语法树(ast)</li><li>将ast编译(compiler)成render函数</li><li>将render函数渲染(render)成虚拟DOM</li><li>最后将<cst>虚拟DOM</cst>渲染成<cst>真实DOM</cst></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//vuerender.png"></p><h3 id="runtime-compiler的步骤"><a href="#runtime-compiler的步骤" class="headerlink" title="runtime-compiler的步骤"></a>runtime-compiler的步骤</h3><p><code>template</code> –&gt; <code>ast</code> –&gt; <code>render函数</code> –&gt; <code>VDOM</code> –&gt; <code>DOM</code></p><h3 id="runtime-only的步骤"><a href="#runtime-only的步骤" class="headerlink" title="runtime-only的步骤"></a>runtime-only的步骤</h3><p><code>render函数</code> –&gt; <code>VDOM</code> –&gt; <code>DOM</code></p><h2 id="对比两者的区别"><a href="#对比两者的区别" class="headerlink" title="对比两者的区别"></a>对比两者的区别</h2><p>(1) 首先从代码的完整性来看，runtime-only版本比runtime-compiler版本少了一个API – <code>Vue.compile</code>，这个API是执行前两步，将一个模板字符串编译成 render 函数。因此，runtime-only是无法使用<code>template</code>选项的。</p><p>(2) 由于runtime-only少了相应的功能，使得该版本的体积更小。</p><table><thead><tr><th align="center"><strong>runtime-compiler</strong></th><th align="center"><strong>runtime-only</strong></th></tr></thead><tbody><tr><td align="center">体积大</td><td align="center">体积小</td></tr><tr><td align="center">有<code>Vue.compile</code> API</td><td align="center">无<code>Vue.compile</code> API</td></tr><tr><td align="center">可以使用<code>template模板</code>、<code>render函数</code>渲染</td><td align="center">只可使用<code>render</code>函数渲染</td></tr></tbody></table><h2 id="开发项目选择哪种呢"><a href="#开发项目选择哪种呢" class="headerlink" title="开发项目选择哪种呢"></a>开发项目选择哪种呢</h2><p>在实际开发项目中，我们偏向使用<code>runtime-only</code>，渲染性能更高，体积小。我们不需要担心template组件无法渲染，因为在开发项目时，我们安装过<code>vue-template-compiler</code>，可以利用它去渲染。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> CLI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>箭头函数的使用和this指向</title>
      <link href="2021/05/31/jiantouhansu/"/>
      <url>2021/05/31/jiantouhansu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions">MDN Web Docs</a></p><blockquote><p><strong>箭头函数表达式</strong>的语法比<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/function">函数表达式</a>更简洁，并且没有自己的<code>this</code>，<code>arguments</code>，<code>super</code>或<code>new.target</code>。箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数。</p></blockquote><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(param1, param2, …, paramN) =&gt; &#123; statements &#125;</span><br><span class="line">(param1, param2, …, paramN) =&gt; expression</span><br><span class="line"><span class="comment">//相当于：(param1, param2, …, paramN) =&gt;&#123; return expression; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当只有一个参数时，圆括号是可选的：</span></span><br><span class="line">(singleParam) =&gt; &#123; statements &#125;</span><br><span class="line">singleParam =&gt; &#123; statements &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有参数的函数应该写成一对圆括号。</span></span><br><span class="line">() =&gt; &#123; statements &#125;</span><br></pre></td></tr></table></figure><h2 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法"></a>高级语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加括号的函数体返回对象字面量表达式：</span></span><br><span class="line">params =&gt; (&#123;<span class="attr">foo</span>: bar&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//支持剩余参数和默认参数</span></span><br><span class="line">(param1, param2, ...rest) =&gt; &#123; statements &#125;</span><br><span class="line">(param1 = defaultValue1, param2, …, paramN = defaultValueN) =&gt; &#123;</span><br><span class="line">statements &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同样支持参数列表解构</span></span><br><span class="line"><span class="keyword">let</span> f = <span class="function">(<span class="params">[a, b] = [<span class="number">1</span>, <span class="number">2</span>], &#123;x: c&#125; = &#123;x: a + b&#125;</span>) =&gt;</span> a + b + c;</span><br><span class="line">f();  <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="没有单独的this"><a href="#没有单独的this" class="headerlink" title="没有单独的this"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions#%E6%B2%A1%E6%9C%89%E5%8D%95%E7%8B%AC%E7%9A%84this">没有单独的<code>this</code></a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 在函数test里面使用普通函数和箭头函数的区别</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">//logs window</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">//logs window</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">this</span>) ) <span class="comment">//logs window</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 在对象中使用箭头函数</span></span><br><span class="line"><span class="keyword">const</span> add = &#123;</span><br><span class="line"><span class="function"><span class="title">adde</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="built_in">this</span>)&#125; ) <span class="comment">//logs adde</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="built_in">this</span>)&#125; ) <span class="comment">//logs window</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">//logs adde</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line">add.adde()</span><br></pre></td></tr></table></figure><blockquote><p>问题：箭头函数的this是如何指向的</p><p>答案：箭头函数this的向外层一层一层查找，直到找到this为止</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 箭头函数 </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-CLI 进阶</title>
      <link href="2021/05/31/vueclicontent/"/>
      <url>2021/05/31/vueclicontent/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="page-header">  <h2 class="huise">Runtime-Compiler和Runtime-only的区别</h2><p>  它们的区别在于渲染步骤,compiler可以渲染template组件，only是不需要渲染的  <div class="text-right">    <a class="btn-beautify button--animated outline huise larger" href="/./2021/05/31/compiler-only/"   title="Runtime-Compiler和Runtime-only的区别"><i class="far fa-hand-point-right"></i><span>Runtime-Compiler和Runtime-only的区别</span></a>  </div></p></div><div class="page-header">  <h2 class="blue">箭头函数的使用和this指向</h2><p>  了解ES6的增强写法，箭头函数，理解this指向  <div class="text-right">    <a class="btn-beautify button--animated outline blue larger" href="/./2021/05/31/jiantouhansu/"   title="箭头函数的使用和this指向"><i class="far fa-hand-point-right"></i><span>箭头函数的使用和this指向</span></a>  </div></p></div>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> CLI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚手架进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue父组件和子组件</title>
      <link href="2021/05/28/childcomponent/"/>
      <url>2021/05/28/childcomponent/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.创建组件构造器对象2</span></span><br><span class="line"><span class="keyword">const</span> cpnConstruct2 = Vue.extend(&#123;</span><br><span class="line"><span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;我是标题&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;我的内容，我是内容&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/!--引用子组件--&gt;</span></span><br><span class="line"><span class="string">&lt;cpn1&gt;&lt;/cpn1&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line"><span class="attr">components</span>:&#123;</span><br><span class="line"><span class="comment">//构造器里面也有components,在该注册的组件，称为子组件</span></span><br><span class="line"><span class="attr">cpn1</span>:cpnConstruct1</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">components</span>: &#123;</span><br><span class="line"><span class="attr">cpn2</span>:cpnConstruct2</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//clipboard.png" alt="Vue官方示例图"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件的基本使用</title>
      <link href="2021/05/28/vue-baseuse/"/>
      <url>2021/05/28/vue-baseuse/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建组件构造器对象</span></span><br><span class="line"><span class="keyword">const</span> cpnConstruct = Vue.extend(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;标题&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;内容&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt; </span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)<span class="comment">//使用的tab健的引号，ES6语法，作用跟双引号单引号一样，但是可以换行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.注册组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;my-cpn&#x27;</span>,cpnConstruct);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.使用组件(在Vue的实例范围内使用组件)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册组件不使用这种方式</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="attr">message</span>:<span class="string">&#x27;你好啊&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line"><span class="function"><span class="title">add</span>(<span class="params">name,event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;打印&#x27;</span>,name,event);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">      mycpn(组件名称): cpnConstruct(组件构造器) </span><br><span class="line">  &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue注册组件语法写法</title>
      <link href="2021/05/28/vue-component(1)/"/>
      <url>2021/05/28/vue-component(1)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基本注册组件的方法"><a href="#基本注册组件的方法" class="headerlink" title="基本注册组件的方法"></a>基本注册组件的方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 创建全局组件方法 --&gt;</span><br><span class="line"><span class="keyword">const</span> cpnConstruct = Vue.extend(&#123;</span><br><span class="line"><span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;this is a title&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt; this is a content&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(<span class="string">&#x27;cpn&#x27;</span>,cpnConstruct);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 创建局部组件方法 --&gt;</span><br><span class="line"><span class="keyword">const</span> cpnConstruct = Vue.extend(&#123;</span><br><span class="line"><span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;this is a title&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt; this is a content&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;cpn&#x27;</span>:cpnConstruct</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="语法糖注册全局组件"><a href="#语法糖注册全局组件" class="headerlink" title="语法糖注册全局组件"></a>语法糖注册全局组件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;cpn&#x27;</span>,&#123;</span><br><span class="line"><span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;this is a title&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt; this is a content&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="语法糖注册局部组件"><a href="#语法糖注册局部组件" class="headerlink" title="语法糖注册局部组件"></a>语法糖注册局部组件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">components</span>: &#123;</span><br><span class="line">       <span class="string">&#x27;cpn&#x27;</span>:&#123;</span><br><span class="line"><span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;this is a title&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt; this is a content&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Components </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注册组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件模板分离的写法</title>
      <link href="2021/05/28/vue-component(2)/"/>
      <url>2021/05/28/vue-component(2)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="使用-lt-script-gt-标签，且type类型text-x-template"><a href="#使用-lt-script-gt-标签，且type类型text-x-template" class="headerlink" title="使用&lt;script&gt;标签，且type类型text/x-template"></a>使用<code>&lt;script&gt;</code>标签，且type类型text/x-template</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/x-template&quot;</span> id=<span class="string">&quot;cpn&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>this is a title<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>this is a content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.component(<span class="string">&#x27;cpn&#x27;</span>,&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">template</span>:<span class="string">&#x27;#cpn&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="使用-lt-template-gt-标签"><a href="#使用-lt-template-gt-标签" class="headerlink" title="使用&lt;template&gt;标签"></a>使用<code>&lt;template&gt;</code>标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>this is a title<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>this is a content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;cpn&#x27;</span>,&#123;</span><br><span class="line"><span class="attr">template</span>:<span class="string">&#x27;#cpn&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Components </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue注册组件数据data</title>
      <link href="2021/05/28/vue-component(3)/"/>
      <url>2021/05/28/vue-component(3)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="props基本用法"><a href="#props基本用法" class="headerlink" title="props基本用法"></a>props基本用法</h2><blockquote><p>在组件中，使用选项props来声明需要从父级接收到的数据</p><p>props的值有两种方式：</p><ul><li>方法一：字符串数组，数组中的字符串就是传递时的名称</li><li>方式二：对象，对象可以设置传递时的类型，也可以设置默认值</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用v-bind绑定vue id=&quot;app&quot;实例的数据data值，存入子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpnn</span> <span class="attr">:cpnmovies</span>=<span class="string">&quot;movies&quot;</span> <span class="attr">:cpnmessage</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpnn</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;cpnmovies&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;cpnmessage&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 父子通信演示</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 以Vue实例为父组件，该注册为子组件</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 父组件传数据给子组件用props获取</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> cpnn = &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">template</span>:<span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">props</span>:[<span class="string">&#x27;cpnmovies&#x27;</span>,<span class="string">&#x27;cpnmessage&#x27;</span>],</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">message</span>:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">movies</span>:[<span class="string">&#x27;海贼王&#x27;</span>,<span class="string">&#x27;西游记&#x27;</span>,<span class="string">&#x27;爱情公寓&#x27;</span>]</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="javascript">cpnn</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>PS：一开始使用模板的无法获取到message数据，不能展现在hmtl中，然后<code>template</code>标签内添加一个容器div，现在可以完全获取数据展现<code>hmtl</code>中</p><h2 id="props数据验证"><a href="#props数据验证" class="headerlink" title="props数据验证"></a>props数据验证</h2><ol><li><code>String</code></li><li><code>Number</code></li><li><code>Boolean</code></li><li><code>Array</code></li><li><code>Object</code></li><li><code>Data</code></li><li><code>Function</code></li><li><code>Sysmbol</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继续上面代码</span></span><br><span class="line"><span class="keyword">const</span> cpnn = &#123;</span><br><span class="line"><span class="attr">template</span>:<span class="string">&#x27;#cpn&#x27;</span>,</span><br><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;cpnmovies&#x27;</span>,<span class="string">&#x27;cpnmessage&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过props数据验证的方式写</span></span><br><span class="line"><span class="keyword">const</span> cpnn1 = &#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;#cpn&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>:&#123;</span><br><span class="line">        <span class="attr">cpnmovies</span>:<span class="built_in">Array</span>,</span><br><span class="line">        <span class="attr">cpnmessage</span>:<span class="built_in">String</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加默认值</span></span><br><span class="line"><span class="attr">cpnmessage</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="built_in">String</span>,</span><br><span class="line"><span class="attr">default</span>:<span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line"><span class="attr">required</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：添加<code>required:true</code>表示必须传入这个数据，不然报错</p><h2 id="数据类型不同默认值写法不同"><a href="#数据类型不同默认值写法不同" class="headerlink" title="数据类型不同默认值写法不同"></a>数据类型不同默认值写法不同</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果数据类型是Object或Array</span></span><br><span class="line"><span class="comment">//default默认值通过函数返回</span></span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">cpnmovies</span>:<span class="built_in">Array</span>,</span><br><span class="line">    <span class="function"><span class="title">defaul</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Components </category>
          
      </categories>
      
      
        <tags>
            
            <tag> props </tag>
            
            <tag> data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue注册组件数据data</title>
      <link href="2021/05/28/vue-component(4)/"/>
      <url>2021/05/28/vue-component(4)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="组件可以访问Vue实例数据吗？"><a href="#组件可以访问Vue实例数据吗？" class="headerlink" title="组件可以访问Vue实例数据吗？"></a>组件可以访问<code>Vue</code>实例数据吗？</h2><blockquote><p>组件是一个单独功能模块的封装，这个模块有属于自己的模板的HTML，也有自己的数据data</p><p>如果将所有的数据都放Vue实例中，Vue实例就会变得非常臃肿，及时可以这样做，也不要做</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;myCpn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        消息：&#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">&#x27;cpn&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">template</span>:<span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">message</span>:<span class="string">&#x27;hello world&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>PS：将数据放在注册组件模板的里面，且data是一个函数</code></p><p><code>hello world</code></p><h2 id="为什么组件data必须是函数"><a href="#为什么组件data必须是函数" class="headerlink" title="为什么组件data必须是函数"></a>为什么组件<code>data</code>必须是函数</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//举例说明一下data是函数</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">age</span>:<span class="number">18</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> obj1 = abc()</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> obj2 = abc()</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> obj3 = abc()</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    obj1.name = <span class="string">&#x27;kobe&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(obj2);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(obj3);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//logs结果均为因为obj1的改变而改变，这就是为什么data是函数的原因</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//让多次使用模板组件，但data数据不会被其他模板改变</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Components </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>父子组件通讯实例</title>
      <link href="2021/05/28/vue-component(5)/"/>
      <url>2021/05/28/vue-component(5)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 父传子通过props获取数据，子传父同过事件传递 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">:childmessage</span>=<span class="string">&quot;message&quot;</span> <span class="attr">:childmovies</span>=<span class="string">&quot;movies&quot;</span> @<span class="attr">itemclick</span>=<span class="string">&quot;fatherbtnclick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模板数据从父组件拿到子组件使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;childmessage&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-for</span>=<span class="string">&quot;item in childmovies&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模板数据子组件事件发送到父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in categories&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;childbtnevent(item)&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//组成子组件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> child = &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">template</span>:<span class="string">&#x27;#child&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">message</span>:<span class="string">&#x27;hello 我是子组件child&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">categories</span>:[</span></span><br><span class="line"><span class="javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;aaa&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;斗罗大陆&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;bbb&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;斗破苍穹&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;ccc&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;夜天子&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;ddd&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;大圣娶亲&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">]</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">childbtnevent</span>(<span class="params">item</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 发送事件方法$event</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//将方法itemclick发送到父组件</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//等待父组件接收</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$emit(<span class="string">&#x27;itemclick&#x27;</span>,item);</span></span><br><span class="line"><span class="javascript"><span class="comment">// console.log(item);</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">props</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取父组件数据</span></span></span><br><span class="line"><span class="javascript"><span class="attr">childmessage</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//三种属性defualt是默认值，当数据类型是Object或Array时，default是一个函数类型，return返回值</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 当required:true时,改数据一定需要传过来，否则报错</span></span></span><br><span class="line"><span class="javascript"><span class="attr">type</span>:<span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">defualt</span>:<span class="string">&#x27;暂无&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">required</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">childmovies</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">type</span>:<span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">default</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> []</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">//将vue的实例为父组件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> father = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">message</span>:<span class="string">&#x27;hello world 我是vue实例父组件&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">movies</span>:[<span class="string">&#x27;斗罗大陆&#x27;</span>,<span class="string">&#x27;斗破苍穹&#x27;</span>,<span class="string">&#x27;夜天子&#x27;</span>,<span class="string">&#x27;大圣娶亲&#x27;</span>,<span class="string">&#x27;我是父组件vue实例数据&#x27;</span>]</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">fatherbtnclick</span>(<span class="params">item</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;我是父组件&#x27;</span>,item)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="javascript">child</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Components </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计数器实例</title>
      <link href="2021/05/28/vue-component(6)/"/>
      <url>2021/05/28/vue-component(6)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h1><blockquote><p>计数器实例：子组件从父组件获取counter数据，子组件有两个button按钮，通过点击事件<code>$emit()</code>向父级传递事件，在父级的emthods写方法，来改变counter值</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子组件有+-按钮，父组件有counter数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">:childcounter</span>=<span class="string">&quot;counter&quot;</span> @<span class="attr">subnumber</span>=<span class="string">&quot;fathersubnumber&quot;</span> @<span class="attr">addnumber</span>=<span class="string">&quot;fatheraddnumber&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数:&#123;&#123;childcounter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;childsubnumber&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;childaddnumber&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> child = &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">template</span>:<span class="string">&#x27;#child&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">message</span>:<span class="string">&#x27;hello child&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">childsubnumber</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$emit(<span class="string">&#x27;subnumber&#x27;</span>);</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">childaddnumber</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$emit(<span class="string">&#x27;addnumber&#x27;</span>);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">props</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">childcounter</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">type</span>:<span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">default</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">required</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">message</span>:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">counter</span>:<span class="number">0</span></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">fathersubnumber</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.counter--;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">fatheraddnumber</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.counter++;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="javascript">child</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Components </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue父子组件访问</title>
      <link href="2021/05/28/vue-component(7)/"/>
      <url>2021/05/28/vue-component(7)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="父子组件访问"><a href="#父子组件访问" class="headerlink" title="父子组件访问"></a>父子组件访问</h1><ul><li><h5 id="父组件访问子组件"><a href="#父组件访问子组件" class="headerlink" title="父组件访问子组件"></a>父组件访问子组件</h5><ul><li><code>$children</code><ul><li><code>console.log(this.$children)</code> 打印的是一个子组件数组</li><li><code>for(let i of this.$children)</code>打印所有的子组件</li><li><code>this.$children[index].function()</code>使用某个子组件的方法</li></ul></li><li><code>$ref</code><ul><li><code>colsole.log(this.$refs)</code> 打印的是对象，默认为空</li></ul></li><li><code>$children &amp;&amp; $refs的使用</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用$children $refs访问子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4. 绑定ref值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;printlog&quot;</span>&gt;</span>PrintLog<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">printlog</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 1. 打印this.$children是什么</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$children);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 打印结果是三个子组件的数组</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 2. 打印子组件的方法</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 遍历数组的子组件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> <span class="built_in">this</span>.$children)&#123;</span></span><br><span class="line"><span class="javascript">i.cpnmessage();</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">//打印了所有子组件的cpnmessage方法</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 3.打印this.$refs</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs)</span></span><br><span class="line"><span class="javascript"><span class="comment">//默认是一个空对象</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//给cpn子组件绑定ref值</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 5.打印绑定的ref值子组件</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.aaa);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 6.绑定ref=&quot;aaa&quot;的子组件调用cpnmessage方法</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$refs.aaa.cpnmessage()</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$children[<span class="number">0</span>].cpnmessage()</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">cpn</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">cpnmessage</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;hello this is a children component&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="子组件访问父组件"><a href="#子组件访问父组件" class="headerlink" title="子组件访问父组件"></a>子组件访问父组件</h5><ul><li>通过<code>$parent</code>去获取父组件的data或methods</li><li>这种访问方式不常用，有很多缺点，真实开发很少使用<ul><li>子组件不够独立</li><li>子组件复用性差：当访问父组件data可能这个父组件用，复用的另一个没有</li><li>子组件和父组件的耦合度太高了</li></ul></li></ul></li><li><h5 id="访问根组件-root"><a href="#访问根组件-root" class="headerlink" title="访问根组件$root"></a>访问根组件<code>$root</code></h5><blockquote><p>子组件可以直接访问到vue实例，但是使用很少，实际上vue实例的数据很少</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Components </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件化开发</title>
      <link href="2021/05/28/vue-components/"/>
      <url>2021/05/28/vue-components/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div><h2 class="huise">Vue组件的基本使用</h2><p>    学习掌握全局组件和局部组件    <a class="btn-beautify button--animated block right larger" href="/2021/05/28/vue-baseuse/"   title="Vue组件的基本使用"><i class="far fa-hand-point-right"></i><span>Vue组件的基本使用</span></a></p></div><div><h2 class="blue">Vue父组件和子组件</h2><p>    学习父组件和子组件的案例    <a class="btn-beautify button--animated block right blue larger" href="/2021/05/28/childcomponent/"   title="Vue父组件和子组件"><i class="far fa-hand-point-right"></i><span>Vue父组件和子组件</span></a></p></div><div><h2 class="pink">vue组件语法写法</h2><p>    注册组件的各种语法    <a class="btn-beautify button--animated block right pink larger" href="/2021/05/28/vue-component(1)/"   title="vue组件语法写法"><i class="far fa-hand-point-right"></i><span>vue组件语法写法</span></a></p></div><div><h2 class="red">组件模板分离的写法</h2><p>    抽离组件模板，将模板放置在其它地方，我们将使用两种方法，来抽离    <a class="btn-beautify button--animated block right red larger" href="/2021/05/28/vue-component(2)/"   title="组件模板分离的写法"><i class="far fa-hand-point-right"></i><span>组件模板分离的写法</span></a></p></div><div><h2 class="purple">通信：父传子</h2><p>    props基本用法、props数据验证和Data中的数据类型    <a class="btn-beautify button--animated block right purple larger" href="/2021/05/28/vue-component(3)/"   title="通信：父传子"><i class="far fa-hand-point-right"></i><span>通信：父传子</span></a></p></div><div><h2 class="orange">Vue注册组件数据data</h2><p>解答两个问题：组件可以访问vue实例数据吗、为什么组件data是函数<a class="btn-beautify button--animated block right orange larger" href="/2021/05/28/vue-component(4)/"   title="Vue注册组件数据data"><i class="far fa-hand-point-right"></i><span>Vue注册组件数据data</span></a></p></div><div><h2 class="green">父子组件通讯实例</h2><p>学习父子组件通讯实例，掌握组件化开发方法<a class="btn-beautify button--animated block right green larger" href="/2021/05/28/vue-component(5)/"   title="父子组件通讯实例"><i class="far fa-hand-point-right"></i><span>父子组件通讯实例</span></a></p></div><div><h2 class="huise">计数器实例</h2><p>子组件从父组件获取counter数据，子组件有两个button按钮，通过点击事件$emit()向父级传递事件，在父级的emthods写方法，来改变counter值<a class="btn-beautify button--animated block right larger" href="/2021/05/28/vue-component(6)/"   title="计数器实例"><i class="far fa-hand-point-right"></i><span>计数器实例</span></a></p></div><div><h2 class="blue">Vue父子组件访问</h2><p>父组件访问子组件和子组件访问父组件，方式不同<a class="btn-beautify button--animated block right blue larger" href="/2021/05/28/vue-component(7)/"   title="Vue父子组件访问"><i class="far fa-hand-point-right"></i><span>Vue父子组件访问</span></a></p></div><div><h2 class="pink">插槽slot</h2><p>了解插槽Slot的基本使用、学习新概念具名，通过给slot添加值name，指定修改内容、理解插槽作用域：父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的<a class="btn-beautify button--animated block right pink larger" href="/2021/05/13/Vue_slot/"   title="插槽slot"><i class="far fa-hand-point-right"></i><span>插槽slot</span></a></p></div>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Components </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-CLI 脚手架</title>
      <link href="2021/05/27/vue-cli/"/>
      <url>2021/05/27/vue-cli/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="page-header">  <h2>介绍</h2>  <p>右方是一个vue官方脚手架链接，写了更为详细的介绍    <a class="btn-beautify button--animated block outline blue right larger" href="https://cli.vuejs.org/zh/guide/"   title="官方文档"><i class="far fa-hand-point-right"></i><span>官方文档</span></a></p></div><p><cst>CLI</cst>：全称Command-Line interface，翻译为命令行界面，但俗称脚手架</p><p>Vue CLI 是一个基于Vue.js 进行快速开发的完整系统，使用vue-cli 可以快速搭建Vue开发环境以及对应的webpack配置</p><p>Vue CLI 致力于将 Vue 生态中的<cst>工具基础标准化</cst>。它确保了各种构建工具能够基于智能的<cst>默认配置</cst>即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去<cst>纠结配置的问题</cst>。与此同时，它也为每个工具提供了调整配置的<cst>灵活性</cst>，无需 eject。</p><h2 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h2><p>CLI (<code>@vue/cli</code>) 是一个全局安装的 npm 包，提供了终端里的 <code>vue</code> 命令。它可以通过 <code>vue create</code> 快速搭建一个新项目，或者直接通过 <code>vue serve</code> 构建新想法的原型。你也可以通过 <code>vue ui</code> 通过一套图形化界面管理你的所有项目。我们会在接下来的指南中逐章节深入介绍。</p><h2 id="CLI-服务"><a href="#CLI-服务" class="headerlink" title="CLI 服务"></a>CLI 服务</h2><p>CLI 服务 (<code>@vue/cli-service</code>) 是一个开发环境依赖。它是一个 npm 包，局部安装在每个 <code>@vue/cli</code> 创建的项目中。</p><p>CLI 服务是构建于 <a href="http://webpack.js.org/">webpack</a> 和 <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> 之上的。它包含了：</p><ul><li>加载其它 CLI 插件的核心服务；</li><li>一个针对绝大部分应用优化过的内部的 webpack 配置；</li><li>项目内部的 <code>vue-cli-service</code> 命令，提供 <code>serve</code>、<code>build</code> 和 <code>inspect</code> 命令。</li></ul><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="关于旧版本"><a href="#关于旧版本" class="headerlink" title="关于旧版本"></a>关于旧版本</h3><p>Vue CLI 的包名称由 <code>vue-cli</code> 改成了 <code>@vue/cli</code>。 如果你已经全局安装了旧版本的 <code>vue-cli</code> (1.x 或 2.x)，你需要先通过 <code>npm uninstall vue-cli -g</code> 或 <code>yarn global remove vue-cli</code> 卸载它。</p><h3 id="Node-版本要求"><a href="#Node-版本要求" class="headerlink" title="Node 版本要求"></a>Node 版本要求</h3><p>Vue CLI 4.x 需要 <a href="https://nodejs.org/">Node.js</a> v8.9 或更高版本 (推荐 v10 以上)。你可以使用 <a href="https://github.com/tj/n">n</a>，<a href="https://github.com/creationix/nvm">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows">nvm-windows</a> 在同一台电脑中管理多个 Node 版本。</p><h3 id="使用npm-或-yarn-安装"><a href="#使用npm-或-yarn-安装" class="headerlink" title="使用npm 或 yarn 安装"></a>使用npm 或 yarn 安装</h3><p><cst>自动安装的是最新版3.0以上，如果需要使用2.0Vue-CLi，那么我们下面将会提到拉取CLI2.0模板</cst></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><h3 id="检查版本"><a href="#检查版本" class="headerlink" title="检查版本"></a>检查版本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">vue -V</span><br></pre></td></tr></table></figure><h3 id="拉取Vue2-x模板-旧版本"><a href="#拉取Vue2-x模板-旧版本" class="headerlink" title="拉取Vue2.x模板(旧版本)"></a>拉取Vue2.x模板(旧版本)</h3><p>Vue CLI &gt;= 3 和旧版使用了相同的 <code>vue</code> 命令，所以 Vue CLI 2 (<code>vue-cli</code>) 被覆盖了。如果你仍然需要使用旧版本的 <code>vue init</code> 功能，你可以全局安装一个桥接工具：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br><span class="line"><span class="comment"># `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同</span></span><br><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure><hr><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h2 id="vue-create"><a href="#vue-create" class="headerlink" title="vue create"></a>vue create</h2><blockquote><p>在终端输入以下命令，我是在CMD运行创建脚手架的。我在IED终端，会报错显示系统禁止脚本，因此转移到命令行创建</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> create hello-vue <span class="comment">#创建3.0脚手架</span></span><br><span class="line"><span class="comment"># hello-vue 是项目名字</span></span><br><span class="line">vue init webpack hello-vue <span class="comment">#创建2.0脚手架</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210527213221.png"></p><blockquote><p> 使用vue create创建vuecli3项目，会弹出默认default和Manually select features(手动选择)</p></blockquote><h3 id="选择-Default"><a href="#选择-Default" class="headerlink" title="选择[Default]"></a>选择[Default]</h3><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210527213642.png" alt="安装中"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210527213849.png"></p><blockquote><p>输入命令后，直接安装好项目了，好像不是自定义设置一些配置。使用命名<code>cd vue-cli</code>进入我的项目，<code>npm run serve</code> 运行本地服务器，脚手架是自动配置了本地服务器。</p></blockquote><h3 id="选择Manually-select-features"><a href="#选择Manually-select-features" class="headerlink" title="选择Manually select features"></a>选择Manually select features</h3><p>自定义选择一些配置，如果你倾向于快速创建，选择默认。<cst>可以通过空格选中/取消，选中你需要的功能回车创建项目</cst></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210531155700.png"></p><h2 id="使用旧版本方式创建Vue2-x项目"><a href="#使用旧版本方式创建Vue2-x项目" class="headerlink" title="使用旧版本方式创建Vue2.x项目"></a>使用旧版本方式创建Vue2.x项目</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> init webpack project</span><br></pre></td></tr></table></figure><h3 id="Project-name-hello-vue-2-x"><a href="#Project-name-hello-vue-2-x" class="headerlink" title="? Project name (hello-vue-2.x)"></a>? Project name (hello-vue-2.x)</h3><p>确认项目名字，如果你需要修改，直接输入名字，不修改就回车</p><h3 id="Project-description-A-Vue-js-project"><a href="#Project-description-A-Vue-js-project" class="headerlink" title="? Project description (A Vue.js project)"></a>? Project description (A Vue.js project)</h3><p>项目描述说明，不更改回车</p><h3 id="Author-alovelyyou-lt-noti163-163-com"><a href="#Author-alovelyyou-lt-noti163-163-com" class="headerlink" title="? Author (alovelyyou&lt;noti163@163.com)"></a>? Author (alovelyyou&lt;noti163@163.com)</h3><p>默认是读取C盘Confjg配置文件的名字&amp;&amp;邮箱</p><h3 id="Runtime-Compiler-amp-amp-Runtime-only"><a href="#Runtime-Compiler-amp-amp-Runtime-only" class="headerlink" title="Runtime Compiler &amp;&amp; Runtime-only"></a>Runtime Compiler &amp;&amp; Runtime-only</h3><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210528082820.png"></p><p>前者能够解析<code>template</code>模板，因为有Compiler。后者无法解析，但是更小，在项目开发时，会使用这个，使用某种方法可以解决无法解析<code>template</code>。目前我们暂时选择前者</p><h3 id="Install-vue-router-Y-n"><a href="#Install-vue-router-Y-n" class="headerlink" title="? Install vue-router? (Y/n)"></a>? Install vue-router? (Y/n)</h3><p>是否下载Vue路由，这是暂时不使用vue路由，因此选择<code>n</code></p><h3 id="Use-ESLint-to-lint-your-code-Y-n"><a href="#Use-ESLint-to-lint-your-code-Y-n" class="headerlink" title="? Use ESLint to lint your code? (Y/n)"></a>? Use ESLint to lint your code? (Y/n)</h3><p>规范代码的，如果你写代码，经常随意空格，没有去规范书写，那么你可以选择<code>Y</code>。这里我选择<code>n</code></p><h3 id="Set-up-unit-tests-Y-n"><a href="#Set-up-unit-tests-Y-n" class="headerlink" title="? Set up unit tests (Y/n)"></a>? Set up unit tests (Y/n)</h3><p>是否设置单元测试，这里我选择<code>n</code></p><h3 id="Setup-e2e-tests-with-Nightwatch-Y-n"><a href="#Setup-e2e-tests-with-Nightwatch-Y-n" class="headerlink" title="? Setup e2e tests with Nightwatch? (Y/n)"></a>? Setup e2e tests with Nightwatch? (Y/n)</h3><p>e2e就是端到端测试，不需要设置n</p><h3 id="选择-NPM-或-Yarn-管理项目"><a href="#选择-NPM-或-Yarn-管理项目" class="headerlink" title="选择 NPM 或 Yarn 管理项目"></a>选择 NPM 或 Yarn 管理项目</h3><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210528083540.png"></p><p>我使用的<code>NPM</code>，因此选择<code>NPM</code></p><h2 id="认识脚手架vue3"><a href="#认识脚手架vue3" class="headerlink" title="认识脚手架vue3"></a>认识脚手架vue3</h2><h3 id="vue-cli-3-与-2-版本有很大的区别"><a href="#vue-cli-3-与-2-版本有很大的区别" class="headerlink" title="vue cli 3 与 2 版本有很大的区别"></a>vue cli 3 与 2 版本有很大的区别</h3><ol><li>vue-cli 3 是基于 webpack 4 打招，vue-cli 2 还是webpack 3</li><li>vue-cli 3 的设计原则 “0配置”，移除的配置文件根目录下的<code>build</code> 和 <code>config</code>等目录</li><li>vue-cli 3 提供了vue ui命令，提供了可视化配置，更加人性化</li><li>提出了static，新增了public文件夹，并且index.html移到了public中</li></ol><h3 id="内置vue-ui命名，修改配置文件"><a href="#内置vue-ui命名，修改配置文件" class="headerlink" title="内置vue ui命名，修改配置文件"></a>内置vue ui命名，修改配置文件</h3><p><code>vue ui </code> 进入ui界面，可以通过导入创建的vue-cli3 项目，然后修改配置文件</p>]]></content>
      
      
      <categories>
          
          <category> Vue-CLI </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚手架 </tag>
            
            <tag> Vue2.x </tag>
            
            <tag> Vue3.x </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建本地服务器</title>
      <link href="2021/05/26/buildserver/"/>
      <url>2021/05/26/buildserver/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="page-header">  <h2>搭建本地服务器</h2>  <p>    webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js,内部使用<cst>express框架</cst>，可以实现我们想要的让浏览器<cst>自动刷新</cst>显示我们的打包结果  </p>  <p>    在开发项目时，经常需要打包项目，瞅一瞅啥样子。但是妮，通过npm打包项目，很费时间，因此我们需要<cst>搭建本地服务器</cst>，让内存缓存项目，通过<cst>localhost的方式</cst>，来打开网页。  </p></div><blockquote><p><cst>总结搭建心得</cst>：学习webpack时，需要安装各种依赖，如果安装的依赖不兼容就无法允许，因此我也遇到了这个问题。在webpack4.0以上，都需要安装webpack-cli，但是安装的webpack-cli可能与webpack-dev-server不兼容，因此我们无法运行本地服务器</p></blockquote><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure><p><b>devserver 也是作为webpack中的一个选项，选项本身可以设置如下属性</b></p><ul><li><code>contentBase</code>：为哪一个文件夹提供本地服务器，默认是根文件夹，我们这里填写<code>./dist</code></li><li><code>port</code>：端口号</li><li><code>inline</code>：页面实时刷新</li><li><code>historyApiFallback</code>：在SPA页面，中依赖HTML5的history模式</li></ul><p><b>webpack.config.js</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">        <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">        <span class="attr">inline</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210526102213.png"></p><p><b>package.json</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server&quot;</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server&quot;</span> <span class="comment">//启动本地服务器</span></span><br><span class="line"><span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --open&quot;</span> <span class="comment">//直接打开浏览器</span></span><br></pre></td></tr></table></figure><blockquote><p>如果我们没有去配置”scripts”，那么我们直接运行<code>webpack-dev-server</code>是运行全局的，但是我们并没有在全局安装</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210526102449.png"></p><p>在<code>node_modules</code>安装了我们的本地服务器，因此在脚本配置<code>webpack-dev-server</code>，通过<code>npm run dev</code>启动服务器。然后它会在本地找这个服务器，如果没有才去全局找</p><p><b class="red">Warning</b></p><p>这时你是无法启动本地服务器的，如果你的是4.0以上的webpack，那么肯定存在依赖不兼容的问题</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p><cst>降级处理</cst>：将4.0以上版本的webpack，降级安装3.6.0。但是新版出来了不使用，还要使用旧版本。4.0以下的版本是不需要安装webpack-cli，因此不会和webpack-dev-server出现不兼容的情况</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p><cst>兼容依赖</cst>：webpack-cli 和 webpack-dev-server 安装的版本是不兼容的，因此我们需要安装它们兼容的版本</p><h2 id="报错截图"><a href="#报错截图" class="headerlink" title="报错截图"></a>报错截图</h2><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//error.png"></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//原因是 less-loader安装的版本过高</span><br><span class="line">//解决方案：卸载之前的less-loader,安装less-loader@5.0.0</span><br><span class="line"><span class="attribute">npm</span> uninstall less-loader</span><br><span class="line">npm install less-loader@<span class="number">5</span>.<span class="number">0</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//code.jpg"></p><p><b>版本修改</b></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 在安装之前，我们需要进行卸载操作</span><br><span class="line"><span class="attribute">npm</span> i webpack@<span class="number">4</span> -D</span><br><span class="line">npm i webpack-cli@<span class="number">3</span> -D</span><br><span class="line">npm i webpack-dev-server@<span class="number">3</span> -D</span><br></pre></td></tr></table></figure><p>待安装好时，我们将<code>node_modules</code>文件夹和 <code>package.json</code>文件删掉，通过<code>npm install</code>重新安装以下这些文件夹，在配置好了的情况下，我们再<code>npm run dev</code> 运行以下本地服务器，没想到就ok了</p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack配置文件分离</title>
      <link href="2021/05/26/webpackconfig/"/>
      <url>2021/05/26/webpackconfig/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装webpack-merge"><a href="#安装webpack-merge" class="headerlink" title="安装webpack-merge"></a>安装webpack-merge</h2><p>用于对文件进行合并，我们将开发版或产品版，让其与共用的<code>base.config.js</code> 进行合并</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> i webpack-merge</span><br></pre></td></tr></table></figure><div class="page-header">  <h2>webpack.config.js</h2>  <p>    对webpack配置文件进行分离，分为共用的<code>base.config.js</code>，开发版<code>dev.config.js</code>，产品版<code>prod.config.js</code>。看似一个文件分成三个文件，更复杂了些。当开发板和产品板相差很多的时候，我们就很有必要分离它们  </p></div>## base.config.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个共用的配置文件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入webpack自带插件</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader/lib/plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">limit</span>: <span class="number">25</span> * <span class="number">1024</span>,</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&#x27;./img/[name].[hash:8].[ext]&#x27;</span>, <span class="comment">//[option] 用中括号，表示参数，hash:8 保留8位哈希值</span></span><br><span class="line">                    &#125;,</span><br><span class="line"></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">presets</span>: [<span class="string">&#x27;es2015&#x27;</span>],</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">&#x27;最终版权归Simplelife所有&#x27;</span>),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.css&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>],</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="prod-config-js"><a href="#prod-config-js" class="headerlink" title="prod.config.js"></a>prod.config.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//丑化压缩代码，开发时不需要</span></span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./base.config&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = webpackMerge.merge(baseConfig, &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> UglifyJsPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="dev-config-js"><a href="#dev-config-js" class="headerlink" title="dev.config.js"></a>dev.config.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./base.config&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = webpackMerge.merge(baseConfig, &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">        <span class="attr">inline</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --config ./build/prod.config.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --open --config ./build/dev.config.js&quot;</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>原先是使用<code>webpack.config.js</code>，现在我们打包使用<code>prod.config.js</code>，本地开发使用<code>dev.config.js</code>，</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>打包文件会自动生成在<code>build/dist</code>文件夹下，因为<code>dist</code>文件是基于配置文件生成的</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210526152538.png"></p><p>我们自己创建的<code>index.html</code>文件是不需要绑定js文件的，当我们打包后，webpack会自动帮我们绑定打包的js文件</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210526152707.png"></p><p>自动生成的<code>index.html</code>如下</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210526152741.png"></p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack.config.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识plugin</title>
      <link href="2021/05/24/plugin/"/>
      <url>2021/05/24/plugin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><h3 id="plugin是什么？"><a href="#plugin是什么？" class="headerlink" title="plugin是什么？"></a>plugin是什么？</h3><p>plugin是插件的意思，通常是用于对某个现有的<cst>架构进行扩展</cst>。webpack中插件，就是对webpack现有功能的各种扩展，比如<cst>打包优化，文件压缩</cst>等</p><h3 id="loader-和-plugin区别"><a href="#loader-和-plugin区别" class="headerlink" title="loader 和 plugin区别"></a>loader 和 plugin区别</h3><ul><li>loader 主要用于转换某些类型的模块，它是一个<cst>转换器</cst></li><li>plugin 是插件，它是对webpack本身的扩展，是一个<cst>扩展器</cst></li></ul><h3 id="plugind-的使用过程"><a href="#plugind-的使用过程" class="headerlink" title="plugind 的使用过程"></a>plugind 的使用过程</h3><ul><li>步骤一：通过npm安装需要使用的plugins（某些webpack已经<cst>内置的插件</cst>不需要安装）</li><li>步骤二：在<code>webpack.config.js</code>中plugins中配置插件</li></ul><h2 id="添加版权的Plugin"><a href="#添加版权的Plugin" class="headerlink" title="添加版权的Plugin"></a>添加版权的Plugin</h2><p>使用一个最简单的插件，为打包的文件添加版权声明。插件名字叫<cst>BannerPlugin</cst>，属于webpack自带的插件 </p><p><b>webpack.config.js</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入webpack自带插件</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">&#x27;最终版权归Simplelife所有&#x27;</span>)</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210525142718.png"></p><h2 id="打包html的plugin"><a href="#打包html的plugin" class="headerlink" title="打包html的plugin"></a>打包html的plugin</h2><p>在真实开发项目时，发布的dist文件夹，但是dist文件夹中如果没有index.html文件，那么打包的js等文件也就没有意义，因此我们需要通过HtmlWebpackPlugin插件，将index.html文件打包到dist文件夹中</p><h3 id="HtmlWebpackPlugin插件的作用："><a href="#HtmlWebpackPlugin插件的作用：" class="headerlink" title="HtmlWebpackPlugin插件的作用："></a>HtmlWebpackPlugin插件的作用：</h3><ul><li>自动生成index.html文件（可以指定模板来生成）</li><li>将打包好的js文件，自动通过script标签插入到body中</li></ul><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><h3 id="使用插件，配置修改"><a href="#使用插件，配置修改" class="headerlink" title="使用插件，配置修改"></a>使用插件，配置修改</h3><p>修改<code>webpack.config.js</code> 文件中plugins部分内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在plugins添加 new HtmlWebpackPlugin()时，会自动添加这个导入，如果你没有，还请手动导入</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line"><span class="attr">template</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>这里的<code>template</code>表示根据什么模板来生成<code>index.html</code>，另外，我们需要删掉之前在<code>output</code>中添加的<code>publicPath</code>属性(好吧我根本没有)，否则会影响插入的script标签中src可能会有问题</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 1. 安装plugins插件</span><br><span class="line">// 2. 配置plugins内容</span><br><span class="line">// 3. 允许<span class="attribute">npm</span> run build</span><br><span class="line">// <span class="number">4</span>. 成功后点开dist文件夹下，会有一个index.html</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><h2 id="JS压缩的plugin"><a href="#JS压缩的plugin" class="headerlink" title="JS压缩的plugin"></a>JS压缩的plugin</h2><p>在项目发布之前，我们必然需要对JS等文件进行压缩处理。这里，我们就对打包的js文件进行压缩，我们使用一个第三方的插件<code>uglifyjs-webpack-plugin</code></p><h3 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install uglifyjs-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p><b>webpack.config.js</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">plugins:[</span><br><span class="line"><span class="keyword">new</span> UglifyJsPlugin()</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210525210649.png"></p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack配置进阶</title>
      <link href="2021/05/23/webpack3/"/>
      <url>2021/05/23/webpack3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="package-json-中定义启动"><a href="#package-json-中定义启动" class="headerlink" title="package.json 中定义启动"></a><code>package.json</code> 中定义启动</h2><p>有时候，我们需要在本地安装webpack服务，来对应项目开发。但是在终端输入的webpack命令都是全局webpack。这是我们通过脚本进入本地webpack</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json 文件</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;mywebpack&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;3.6.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span>: &#123; <span class="comment">//在scripts脚本下面添加build</span></span><br><span class="line">        <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终端执行命令：<code>npm run bulid</code> 会自动搜索本地webpack服务，其次全局</p><p>本地webpack路径寻找：<code>node_modules/.bin</code></p><h2 id="webpack添加mode"><a href="#webpack添加mode" class="headerlink" title="webpack添加mode"></a>webpack添加mode</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mode模式：development 开发者模式，便于查看打包文件内容</span></span><br><span class="line"><span class="comment">//          production 产品模式，不便于查看</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  ……………………………………………………………………</span><br></pre></td></tr></table></figure><div class="page-header">  <h2>Less文件处理</h2>  <p>    webpack工具有很多功能，通过npm安装一些loader，来扩展这些功能。增填打包less、css、img等类型的文件  </p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先在 ./src/css/index.less 创建less文件 </span></span><br><span class="line"><span class="comment">//写一些简单的样式</span></span><br><span class="line">@fontSize:70px;</span><br><span class="line">@fontColor:#<span class="number">000000</span>;</span><br><span class="line"></span><br><span class="line">body&#123;</span><br><span class="line">  font-size: @fontSize;</span><br><span class="line">  color: @fontColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/index.js</span></span><br><span class="line"><span class="comment">// 导入刚才main.js导出的变量函数等</span></span><br><span class="line"><span class="comment">// import &#123; add, mul, name, age, obj &#125; from &#x27;./main.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; add, mul, name, age, obj &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./js/main.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">&#x27;的年龄：&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="built_in">console</span>.log(obj.name + <span class="string">&#x27;的年龄：&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj.age);</span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">&#x27;和&#x27;</span> + obj.name + <span class="string">&#x27;的年纪相加等于&#x27;</span> + <span class="string">&#x27;=&#x27;</span> + add(age, obj.age));</span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">&#x27;和&#x27;</span> + obj.name + <span class="string">&#x27;的年纪相乘等于&#x27;</span> + <span class="string">&#x27;=&#x27;</span> + mul(age, obj.age));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入你需要依赖的css文件</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./css/index.css&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入依赖的less文件</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./css/index.css&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// js 输入文字，显示效果</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;hello world!&#x27;</span>)</span><br></pre></td></tr></table></figure><p><cst>webpack.config.js</cst></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use: [&#123; <span class="attr">loader</span>: <span class="string">&#x27;style-loader&#x27;</span>,<span class="attr">option</span>:&#125;,</span><br><span class="line">                      &#123; <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,<span class="attr">option</span>:&#125;, </span><br><span class="line">                      &#123; <span class="attr">loader</span>: <span class="string">&#x27;less-loader&#x27;</span>,<span class="attr">option</span>:&#125;]</span><br><span class="line">                       <span class="comment">//与上面的方式不同，这种方式可以添加更多的参数</span></span><br><span class="line">                       <span class="comment">//这里用到了less-loader、css-loader、style-loader</span></span><br><span class="line">                       <span class="comment">//从右往左，从下往上解析</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>首先，你需要先安装 <code>less</code> 和 <code>less-loader</code>：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="attribute">npm</span> install less less-loader --save-dev</span><br></pre></td></tr></table></figure><p>配置好文件后，通过命令打包</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="attribute">npm</span> run build</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210523225430.png" alt="运行index.html效果图"></p><p><br><br></p><div class="page-header">  <h2>图片文件的处理</h2>  <p>    通过webpack对图片的打包处理，我们需要提前准备两张背景图，一张24k,另一张64k。我们通过url加载图片，然后需要下载<code>url-loader</code>  </p></div><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>首先，你需要安装<code>url-loader</code>和 <code>file-loader</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install url-loader --save-dev</span><br><span class="line"></span><br><span class="line">npm install file-loader --save-dev</span><br></pre></td></tr></table></figure><p><b>index.js</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> img <span class="keyword">from</span> <span class="string">&#x27;./image.png&#x27;</span>;</span><br></pre></td></tr></table></figure><p><b>index.css</b></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;../img/tangsan.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>url-loader</code> 功能类似于 <a href="https://webpack.docschina.org/loaders/file-loader/"><code>file-loader</code></a>, 但是在文件大小（单位为字节）低于指定的限制时，可以返回一个 DataURL。</p><p><b>webpack.config.js</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>, <span class="comment">//jpeg 和 jpg格式没有很多区别，当初的DOS系统不允许4位后缀名</span></span><br><span class="line">         use: [&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 当加载的图片, 小于limit时，会将图片编译成base64字符串形式 不需要单独的文件存储</span></span><br><span class="line">                    <span class="comment">// 当加载的图片，大于limit时，会使用file-loader模块进行加载</span></span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">limit</span>: <span class="number">25</span> * <span class="number">1024</span>,</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&#x27;./img/[name].[hash:8].[ext]&#x27;</span>, <span class="comment">//[option] 用中括号，表示参数，   //hash:8 保留8位哈希值</span></span><br><span class="line">                        <span class="comment">// [ext] 后缀名</span></span><br><span class="line">                        <span class="comment">// 打包文件自动生成在dist，自动引用dist下文件</span></span><br><span class="line">                        <span class="comment">// 利用这种方式规范命名</span></span><br><span class="line">                    &#125;,</span><br><span class="line"></span><br><span class="line">                &#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a><code>limit</code></h3><p>类型: <code>Boolean|Number|String</code> 默认值: <code>true</code></p><p>该值可以通过 loader 的 options 参数来指定，默认为 <code>undefined</code>。</p><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a><code>Boolean</code></h3><p>开启/关闭将文件转换为 base64。</p><br><div class="page-header">  <h2>ES6语法处理</h2>  <p>    将js文件的ES6语法转换成ES5，因为有些浏览器可能不支持ES6语法。在处理ES6语法时，我们需要学习新的,babel-loader  </p></div><h3 id="快速开始-1"><a href="#快速开始-1" class="headerlink" title="快速开始"></a><a href="https://webpack.docschina.org/loaders/babel-loader/#install">快速开始</a></h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install --save-dev babel-loader@<span class="number">7</span> babel-core babel-preset-es2015</span><br></pre></td></tr></table></figure><p><b>webpack.config.js</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">      <span class="comment">// exclude：表示哪些文件不需要去转换</span></span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">      use: &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">presets</span>: [<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加mode类型，安装命令 || 配置文件，执行打包命令，查看打包后的文件语法，已经是es5语法了</span></span><br></pre></td></tr></table></figure><h2 id="webpack配置vue"><a href="#webpack配置vue" class="headerlink" title="webpack配置vue"></a>webpack配置vue</h2><h3 id="快速开始-2"><a href="#快速开始-2" class="headerlink" title="快速开始"></a>快速开始</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 安装vue, 不使用 --save-dev,这表示开发者依赖，但是vue打包后仍然依赖</span><br><span class="line"><span class="attribute">npm</span> install vue --save</span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p><b>index.js</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用vue实例</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;hello webpack&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><b>index.html</b></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">       &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><cst class="red">Warning<cst>：打开控制台检测错误</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210524103725.png"></p><ul><li><cst>runtime-only</cst>：代码中，不可以有任何的template，对于vue实例用div绑定id的也是template</li><li><cst>runtime-compiler</cst>：与它相反，可以有。因为含有compiler，可以编译template</li></ul><h3 id="如何指定-runtime-compiler"><a href="#如何指定-runtime-compiler" class="headerlink" title="如何指定 runtime-compiler"></a>如何指定 <code>runtime-compiler</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">   <span class="attr">alias</span>: &#123;</span><br><span class="line">       <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210524104227.png"></p><br><h2 id="vue中template和el的关系"><a href="#vue中template和el的关系" class="headerlink" title="vue中template和el的关系"></a>vue中template和el的关系</h2><h3 id="正常运行之后，我们来考虑另外一个问题："><a href="#正常运行之后，我们来考虑另外一个问题：" class="headerlink" title="正常运行之后，我们来考虑另外一个问题："></a>正常运行之后，我们来考虑另外一个问题：</h3><ul><li>如果我们希望将data中的数据显示在界面中，就必须是修改index.html</li><li>如果我们后自定义了组件，也必须修改index.html来使用组件</li><li>但是html模板在之后的开发中，我并不希望手动的来频繁修改，如何做到？</li></ul><h3 id="定义template属性："><a href="#定义template属性：" class="headerlink" title="定义template属性："></a>定义template属性：</h3><ul><li>在前面的Vue实例中，我们定义了el属性，用于和index.html中的#app进行绑定，让Vue实例之后可以管理它其中的内容</li><li>这里，我们可以将div元素中的内容删掉，只保留一个基本的id为div 的元素</li><li>但是如果我依然希望在其中显示的内容，如何操作呢？</li><li>我们可以再定义一个template属性，代码如下</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const app = new Vue(&#123;&#125;) 可以省略前面如下面所示</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123;message&#125;&#125;-&#123;&#123;test&#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;hello webpack&#x27;</span>,</span><br><span class="line">        <span class="attr">test</span>: <span class="string">&#x27;不更改基本模板&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>总结：当template和el同时出现时，template会替换el</p></blockquote><h3 id="将template代码移出vue实例"><a href="#将template代码移出vue实例" class="headerlink" title="将template代码移出vue实例"></a>将template代码移出vue实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123;message&#125;&#125;-&#123;&#123;test&#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;hello webpack&#x27;</span>,</span><br><span class="line">            <span class="attr">test</span>: <span class="string">&#x27;不更改基本模板&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;App/&gt;`</span>,<span class="comment">//使用子组件</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        App  <span class="comment">//注册子组件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="一-使用-js-文件来存放子组件的模板"><a href="#一-使用-js-文件来存放子组件的模板" class="headerlink" title="(一)使用 js 文件来存放子组件的模板"></a>(一)使用 js 文件来存放子组件的模板</h3><p><b>app.js</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123;message&#125;&#125;-&#123;&#123;test&#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;hello webpack&#x27;</span>,</span><br><span class="line">            <span class="attr">test</span>: <span class="string">&#x27;不更改基本模板&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./vue/app.js&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="二-使用-vue-文件存放子组件的模板"><a href="#二-使用-vue-文件存放子组件的模板" class="headerlink" title="(二)使用 .vue 文件存放子组件的模板"></a>(二)使用 .vue 文件存放子组件的模板</h3><p><b>App.js</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 模板</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &lt;p class=&quot;app&quot;&gt;  &#123;&#123;message&#125;&#125;-&#123;&#123;test&#125;&#125; &lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">// 写模板data、mothods等</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default&#123;</span><br><span class="line">    name: &quot;App&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            message: &#x27;hello webpack&#x27;,</span><br><span class="line">            test: &#x27;不更改基本模板&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// 写style样式</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .app&#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./vue/App.vue&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="快速开始-3"><a href="#快速开始-3" class="headerlink" title="快速开始"></a>快速开始</h4><p>使用vue文件，需要安装新的loader来加载，vue-template-compiler 模板编译</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install --save-dev vue-loader vue-template-compiler</span><br></pre></td></tr></table></figure><p><b>webpack.config.js</b></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略了一些其他之前的代码，如果需要运行，需要补齐</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line"><span class="attr">rules</span>: [&#123;</span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">use: &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><b>运行</b></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> run build</span><br></pre></td></tr></table></figure><p><cst class="red">Warning</cst></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210524144747.png"></p><blockquote><p>安装的vue-loader有很多版本，但是从14.0版本开始，vue-loader就需要plugin插件，但是我们，没有</p></blockquote><p><b>package.json</b><br><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210524150912.png"></p><p>更改版本：”13.0.0”，然后在终端输入 npm install，重新安装一下</p><blockquote><p>根据测验，我们直接改版本数据，是不能安装到13.0.0版本的，返回在npm install 时会损坏vue-loader插件，导致无法识别vue文件</p></blockquote><h4 id="解决方案一"><a href="#解决方案一" class="headerlink" title="解决方案一"></a>解决方案一</h4><p>先卸载之前的版本，然后通过添加@+版本号，安装早期版本</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> uninstall vue-loader</span><br><span class="line">npm install vue-leader@<span class="number">14</span>.<span class="number">2</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure><p>这时我们在进行打包操作，能够正常运行了</p><h4 id="解决方案二"><a href="#解决方案二" class="headerlink" title="解决方案二"></a>解决方案二</h4><p>直接按照报错要求，添加依赖的plugin插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader/lib/plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210524152537.png"></p><h4 id="注册子组件"><a href="#注册子组件" class="headerlink" title="注册子组件"></a>注册子组件</h4><p><b>Cpn.vue</b>：这里的命名并不是使用模板的名字，是导入的路径名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;&quot;&gt;我是子组件&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;&quot;&gt;我是子组件&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Cpn&#x27;,</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;&#125;,</span><br><span class="line">  computed: &#123;&#125;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  created() &#123;&#125;,</span><br><span class="line">  mounted() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><b>App.js</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &lt;p class=&quot;app&quot;&gt;  &#123;&#123;message&#125;&#125;-&#123;&#123;test&#125;&#125; &lt;/p&gt;</span><br><span class="line">  &lt;cpn/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //导入Cpn.vue，命名cpn</span><br><span class="line">  import cpn from &#x27;./Cpn.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default&#123;</span><br><span class="line">    name: &quot;App&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            message: &#x27;hello webpack&#x27;,</span><br><span class="line">            test: &#x27;不更改基本模板&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      cpn:cpn // 同样的名字可以写成如下</span><br><span class="line">      //cpn</span><br><span class="line">      //模板名 : 导入名import</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .app&#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这样就可以利用组件化开发，配合webpack操作</p></blockquote><h3 id="路径文件省略后缀名"><a href="#路径文件省略后缀名" class="headerlink" title="路径文件省略后缀名"></a>路径文件省略后缀名</h3><p><b>webpack.config.js</b></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210524170327.png"></p><p>这样配置webpack，可以省略路径后缀名</p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack.config.js </tag>
            
            <tag> package.json </tag>
            
            <tag> loader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建图床</title>
      <link href="2021/05/22/howtopig/"/>
      <url>2021/05/22/howtopig/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="page-header">  <h2>新建Github仓库 获取token</h2>  <p>    如果你不知道如何去创建Github仓库，这里有一个教程链接直达    <a class="btn-beautify button--animated block right blue larger" href="/2021/05/16/Hexo1/"   title="创建Github仓库"><i class="far fa-hand-point-right"></i><span>创建Github仓库</span></a>  </p></div><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210522221243.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210522221815.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210522221912.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210522222115.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210522222257.png"></p><p><cst>滑到最下面，点击Generate token</cst></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210522222627.png"></p><div class="page-header">  <h2>    配置PicGo图床工具  </h2>  <p>    如果你还没下载图床工具，给你一个链接直达吧，省的你再去翻上一个页面啦  </p>  <a class="btn-beautify button--animated block blue right larger" href="/2021/05/19/tooltip/"   title="PicGo图床工具"><i class="far fa-hand-point-right"></i><span>PicGo图床工具</span></a></div><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210522223457.png"></p><p><cst>username</cst> 是创建github的账号用户名</p><p><cst>设定分支名</cst>：我的默认是main，你也有可能是master</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210522223747.png"></p><p><cst class="red">设定自定义域名：这是最重要的，我们会使用一个免费CDN加速访问，让你的照片访问很快</cst></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main/</span><br><span class="line"></span><br><span class="line">https://cdn.jsdelivr.net/gh/username/仓库名@分支/</span><br></pre></td></tr></table></figure><br><blockquote><p>以上就是搭建图床的全部啦，如有错误，请留言改正</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习webpack工具</title>
      <link href="2021/05/22/webpack1/"/>
      <url>2021/05/22/webpack1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>从v4.00开始，webpack可以不用再引入一个配置文件来打包项目，然而，它仍然有着高度可配置性，可以很好满足你的需求</p><p><cst>打包命令<code>npx webpack</code> 前提配置好<code>webpack.config.js</code> 文件，否则默认打包方式</cst></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>文件和文件夹解析：</p><ul><li>dist 文件夹 ：用于存放之后打包的文件，也可不创建，在打包时可以生成</li><li>src 文件夹：用于存放我们写的源文件</li><li><code>package.json</code>: 通过<code>npm init</code> 初始化生成，npm包管理文件</li></ul><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p>入口起点指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack会找出有哪些模块和库是入口起点（直接和间接）依赖的。</p><p>默认值是<code>./src/index.js</code>，但是你可以通过<cst>webpack configuration</cst>中配置<code>entry</code>属性<br><br><strong>webpack.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./path/to/my/entry/file.js&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p><strong>output</strong> 属性告诉 webpack 在哪里输出它所创建的 <em>bundle</em>，以及如何命名这些文件。主要输出文件的默认值是 <code>./dist/main.js</code>，其他生成文件默认放置在 <code>./dist</code> 文件夹中。</p><p>你可以通过在配置中指定一个 <code>output</code> 字段，来配置这些处理过程：</p><p><strong>webpack.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>); <span class="comment">//获取路径</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./path/to/my/entry/file.js&#x27;</span>,  <span class="comment">//入口</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>), <span class="comment">//path是绝对路径，通过path获取</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span>, <span class="comment">//打包bundle.js的命名</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>在上面的示例中，我们通过 <code>output.filename</code> 和 <code>output.path</code> 属性，来告诉 webpack bundle 的名称，以及我们想要 bundle 生成到哪里。可能你想要了解在代码最上面导入的 path 模块是什么，它是一个 <a href="https://nodejs.org/api/modules.html">Node.js 核心模块</a>，用于操作文件路径。</p></blockquote><p>配置好简单的webpack文件，试着打包一下我们的项目</p><div id="projectpackbao">  <p class="text-right">    打包项目示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/main.js</span></span><br><span class="line"><span class="comment">// main.js写了一些变量、函数、对象，进行ES6导出操作</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;小明&#x27;</span></span><br><span class="line"><span class="keyword">let</span> age  = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> obj =&#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;小华&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="string">&#x27;19&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1 * num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span>&#123;</span><br><span class="line">add,</span><br><span class="line">mul,</span><br><span class="line">  name,</span><br><span class="line">  age,</span><br><span class="line">  obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/index.js</span></span><br><span class="line"><span class="comment">// 导入刚才main.js导出的变量函数等</span></span><br><span class="line"><span class="keyword">import</span> &#123;add,mul,name,age,obj&#125; <span class="keyword">from</span> <span class="string">&#x27;./main.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">&#x27;的年龄：&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="built_in">console</span>.log(obj.name + <span class="string">&#x27;的年龄：&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj.age);</span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">&#x27;和&#x27;</span> + obj.name + <span class="string">&#x27;的年纪相加等于&#x27;</span> + <span class="string">&#x27;=&#x27;</span> + add(age, obj.age));</span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">&#x27;和&#x27;</span> + obj.name + <span class="string">&#x27;的年纪相乘等于&#x27;</span> + <span class="string">&#x27;=&#x27;</span> + mul(age, obj.age));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置文件 webpack.config.js，</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// _dirname: 是node里面的webpack.config.js的绝对路径, 然后加一个dist文件</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建一个index.html文件引用打包的js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/my-first-webpack.bundle.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><cst>打包命令<code>npx webpack</code> 前提配置好<code>webpack.config.js</code> 文件，否则默认打包方式</cst></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210522165104.png"></p></div><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a><a href="https://webpack.docschina.org/loaders/#styling">loader</a></h2><p>webpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。<strong>loader</strong> 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 <a href="https://webpack.docschina.org/concepts/modules">模块</a>，以供应用程序使用，以及被添加到依赖图中。</p><blockquote><p>注意，loader 能够 <code>import</code> 导入任何类型的模块（例如 <code>.css</code> 文件），这是 webpack 特有的功能，其他打包程序或任务执行器的可能并不支持。我们认为这种语言扩展是很有必要的，因为这可以使开发人员创建出更准确的依赖关系图。</p></blockquote><p>在更高层面，在 webpack 的配置中，<strong>loader</strong> 有两个属性：</p><ol><li><code>test</code> 属性，识别出哪些文件会被转换。<cst>使用正则表达式匹配后缀名文件</cst></li><li><code>use</code> 属性，定义出在进行转换时，应该使用哪个 loader。</li></ol><p><strong>webpack.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, use: <span class="string">&#x27;raw-loader&#x27;</span> &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//使用多个loader时：use: [&#x27;style-loader,&#x27;css.loader&#x27;]</span></span><br><span class="line">  <span class="comment">//逐渐webpack解析是从右到左的，先加载css.loader,再加载style-loader</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上配置中，对一个单独的 module 对象定义了 <code>rules</code> 属性，里面包含两个必须属性：<code>test</code> 和 <code>use</code>。这告诉 webpack 编译器(compiler) 如下信息： </p><p><em>“嘿，webpack 编译器，当你碰到「在 <code>require()</code>/<code>import</code> 语句中被解析为 ‘.txt’ 的路径」时，在你对它打包之前，先 <strong>use(使用)</strong> <code>raw-loader</code> 转换一下。”</em></p><div class="loadercss">  <div class="text-right">     演示一下  </div><p><cst>请一定要输入正确的配置名，否则报错你都不知道为什么</cst></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/index.js</span></span><br><span class="line"><span class="comment">// 导入刚才main.js导出的变量函数等</span></span><br><span class="line"><span class="comment">// import &#123; add, mul, name, age, obj &#125; from &#x27;./main.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; add, mul, name, age, obj &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./main.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">&#x27;的年龄：&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="built_in">console</span>.log(obj.name + <span class="string">&#x27;的年龄：&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj.age);</span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">&#x27;和&#x27;</span> + obj.name + <span class="string">&#x27;的年纪相加等于&#x27;</span> + <span class="string">&#x27;=&#x27;</span> + add(age, obj.age));</span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">&#x27;和&#x27;</span> + obj.name + <span class="string">&#x27;的年纪相乘等于&#x27;</span> + <span class="string">&#x27;=&#x27;</span> + mul(age, obj.age));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们定义了一个css文件，index.css</span></span><br><span class="line"><span class="comment">// 来让index.js文件 依赖index.css文件</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./css/index.css&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我使用了两个loader，因此我们需要允许之前安装一下loader</p><p><code>npm install --save-dev style-loader</code> </p><p><code>npm install --save-dev css-loader</code></p><p>通过这个两个命令安装<code>style-loader</code> 和 <code>css-loader</code> ，前者负责解析css文件，后者负责打包依赖文件</p><p>使用命令进行打包：<code>npm run build</code> 启动本地webpack</p><br></div><p><label class="red"><strong>Warning</strong></label></p><blockquote><p>重要的是要记住，在 webpack 配置中定义 rules 时，要定义在 <code>module.rules</code> 而不是 <code>rules</code> 中。为了使你便于理解，如果没有按照正确方式去做，webpack 会给出警告。</p></blockquote><blockquote><p>请记住，使用正则表达式匹配文件时，你不要为它添加引号。也就是说，<code>/\.txt$/</code> 与 <code>&#39;/\.txt$/&#39;</code> 或 <code>&quot;/\.txt$/&quot;</code> 不一样。前者指示 webpack 匹配任何以 .txt 结尾的文件，后者指示 webpack 匹配具有绝对路径 ‘.txt’ 的单个文件; 这可能不符合你的意图。</p></blockquote><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。</p><p>想要使用一个插件，你只需要 <code>require()</code> 它，然后把它添加到 <code>plugins</code> 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 <code>new</code> 操作符来创建一个插件实例。</p><p><strong>webpack.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>); <span class="comment">// 通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>); <span class="comment">// 用于访问内置插件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, use: <span class="string">&#x27;raw-loader&#x27;</span> &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> HtmlWebpackPlugin(&#123; <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span> &#125;)],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>html-webpack-plugin</code> 为应用程序生成一个 HTML 文件，并自动注入所有生成的 bundle。</p><p><em>在 webpack 配置中使用插件是简单直接的。然而，也有很多值得我们进一步探讨的用例。<a href="https://webpack.docschina.org/concepts/plugins">查看这里了解更多</a>。</em></p><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><p>通过选择 <code>development</code>, <code>production</code> 或 <code>none</code> 之中的一个，来设置 <code>mode</code> 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 <code>production</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// development 开发者模式，打包后可以清晰看到webpack结构</span></span><br><span class="line"><span class="comment">// production  产品模式，无法看清webpack结构</span></span><br><span class="line"><span class="comment">// 当你需要看webpack打包的内容，请选择开发者模式</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>想要了解更多，请查阅 <a href="https://webpack.docschina.org/configuration/mode">mode 配置</a>，这里有具体每个值相应的优化行为。</p><h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><p>webpack 支持所有符合 <a href="https://kangax.github.io/compat-table/es5/">ES5 标准</a> 的浏览器（不支持 IE8 及以下版本）。webpack 的 <code>import()</code> 和 <code>require.ensure()</code> 需要 <code>Promise</code>。如果你想要支持旧版本浏览器，在使用这些表达式之前，还需要 <a href="https://webpack.docschina.org/guides/shimming/">提前加载 polyfill</a>。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>webpack 5 运行于 Node.js v10.13.0+ 的版本。</p><br> <div class="text-right">   <a class="btn-beautify button--animated outline blue larger" href="/2021/05/21/webpack/"   title="前端模块化 || 安装webpack"><i class="far fa-hand-point-left"></i><span>前端模块化 || 安装webpack</span></a>   <a class="btn-beautify button--animated inline outline blue larger" href="/2021/05/23/webpack3"   title="webpack.config.js || package.json"><i class="far fa-hand-point-right"></i><span>webpack.config.js || package.json</span></a>   </div>   ]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue数组应用</title>
      <link href="2021/05/21/vuevfor/"/>
      <url>2021/05/21/vuevfor/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><blockquote><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：<strong>双花括号插值和 <code>v-bind</code> 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在双花括号中 --&gt;</span></span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在 `v-bind` 中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;rawId | formatId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--通过filters写过滤方法--&gt;</span></span><br><span class="line">filters:&#123;</span><br><span class="line">capitalize(message)&#123;</span><br><span class="line">return message;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!--写函数来修饰message返回--&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义全局过滤器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">&#x27;capitalize&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  value = value.toString()</span><br><span class="line">  <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>PS：当全局过滤器和局部过滤器重名时，会采用局部过滤器。</p><ul><li>过滤器可以串联</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>过滤器是JavaScript函数，因此可以接收参数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA(&#x27;arg1&#x27;, arg2) &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!--这里，filterA 被定义为接收三个参数的过滤器函数。其中 message 的值作为第一个参数，普通字符串 &#x27;arg1&#x27; 作为第二个参数，表达式 arg2 的值作为第三个参数。--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JS高阶函数"><a href="#JS高阶函数" class="headerlink" title="JS高阶函数"></a>JS高阶函数</h2><ul><li><p><code>filtet</code>函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--filter中的回调函数有一个要求：必须返回一个boolean值--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--true：当返回true时，函数内部会自动将这次回调的n加入到新的数组中--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--false:当返回false时，函数内部会过滤掉这次的n--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> nums = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">111</span>,<span class="number">222</span>,<span class="number">444</span>,<span class="number">50</span>,<span class="number">60</span>]</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> newnums = nums.filter(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> n&lt;<span class="number">100</span>;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">  <span class="comment">//返回是小于100的元素</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>map</code>函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">111</span>,<span class="number">222</span>,<span class="number">444</span>,<span class="number">50</span>,<span class="number">60</span>]</span><br><span class="line"><span class="keyword">let</span> newnums = nums.map(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n*<span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//数组有几个元素执行几次，返回的元素，现在返回的两倍的值</span></span><br></pre></td></tr></table></figure></li><li><p><code>reduce</code>函数</p><ul><li>作用：汇总元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> total = newNums.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preValue,n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preValue + n</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数有两个参数值 preValue和n</span></span><br><span class="line"><span class="comment">//元素过程···</span></span><br><span class="line"><span class="comment">//第一次 prevalue n1</span></span><br><span class="line"><span class="comment">//第二次 prevalue+n1 n2</span></span><br><span class="line"><span class="comment">//第三次 prevalue+n1+n2 n3</span></span><br><span class="line"><span class="comment">//第四次 prevalue+n1+n2+n3 n4</span></span><br><span class="line"><span class="comment">//假如只有4个元素，最后返回prevalue+n1+n2+n3+n4</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="检测数据更新，响应式方法"><a href="#检测数据更新，响应式方法" class="headerlink" title="检测数据更新，响应式方法"></a>检测数据更新，响应式方法</h2><ul><li><code>push</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push(<span class="string">&#x27;F&#x27;</span>);<span class="comment">//在数组尾部添加新元素&#x27;F&#x27;，并同时更新网页界面可添加多个元素</span></span><br><span class="line">push(<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;E&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><code>pop</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop();<span class="comment">//删掉数组最后一个元素</span></span><br></pre></td></tr></table></figure><ul><li><code>shift</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shift();<span class="comment">//删掉数组第一元素，与pop方法相反</span></span><br></pre></td></tr></table></figure><ul><li><code>unshift</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unshift(<span class="string">&#x27;F&#x27;</span>);<span class="comment">//在数组最前面添加新元素&#x27;F&#x27;</span></span><br><span class="line">可添加多个元素</span><br><span class="line">unshift(<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;E&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>splice</code></li></ul><blockquote><p>作用：删除元素/插入元素/替换元素<br>删除元素：第一个参数开始后的位置，第二个参数删除的个数，<br>         没有第二个参数，表示某位置后面元素全部删掉<br>         格式：splice(2)/splice(2,2);</p><p>替换元素：splice(start,num,’new1’,’new2’,’new…’);<br>         num为替换元素的个数，后面的元素就改成需要替换的元素<br>         splice(2,3,’a’,’b’,’c’);第二个元素后面替换三个元素<br>         原理：是先将元素删掉，然后再添加元素</p><p>插入元素：splice(start,0,’new1’,’new2’,’new…’);<br>         num改为零了，表示不删掉元素，后面直接追加新元素<br>         strat是值意思都是一样的</p></blockquote><ul><li><code>reverse</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">作用：反转数组</span><br><span class="line">reserve();</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>] ==&gt; [<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;1&#x27;</span>]</span><br></pre></td></tr></table></figure><ul><li><code>sort</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--冒泡排序方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">sortNumber</span>(<span class="params">a,b</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript"></span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> a - b</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">6</span>)</span></span><br><span class="line"><span class="javascript">  arr[<span class="number">0</span>] = <span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="javascript">  arr[<span class="number">1</span>] = <span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="javascript">  arr[<span class="number">2</span>] = <span class="string">&quot;40&quot;</span></span></span><br><span class="line"><span class="javascript">  arr[<span class="number">3</span>] = <span class="string">&quot;25&quot;</span></span></span><br><span class="line"><span class="javascript">  arr[<span class="number">4</span>] = <span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="javascript">  arr[<span class="number">5</span>] = <span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(arr + <span class="string">&quot;&lt;br /&gt;&quot;</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(arr.sort(sortNumber))</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue基础 </tag>
            
            <tag> vue数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础指令</title>
      <link href="2021/05/21/vuezhiling/"/>
      <url>2021/05/21/vuezhiling/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="vue使用Mustache语法"><a href="#vue使用Mustache语法" class="headerlink" title="vue使用Mustache语法"></a>vue使用Mustache语法</h2><p>通过Mustache语法，让vue实例的数据data，显示在页面当中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2><p>组件绑定<code>v-once</code>，该组件只会解析一次mustache语法，之后改变data数据，也不会影响界面数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  /*</span><br><span class="line">  当控制台改变app.message的值，但是html中message值不改变</span><br><span class="line">  因为使用了v-once</span><br><span class="line">  */</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><p>在vue实例中的data直接使用HTML标签，是无法通过mustache语法解析出来，但是给组件绑定<code>v-html</code>让该组件解析html标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-html</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  /*</span><br><span class="line">  当控制台改变app.message的值，但是html中message值不改变</span><br><span class="line">  因为使用了v-once</span><br><span class="line">  */</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">data</span>:[</span></span><br><span class="line"><span class="javascript">          message:<span class="string">&#x27;&lt;a href=&quot;https://www.baidu.com&quot;&gt;百度一下&lt;/a&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">      ]</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><p>不需要使用mustache语法显示数据，直接通过<code>v-text=&quot;message&quot;</code>绑定数据。缺点明显，不灵活</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2><p>原封不动的解析标签内容，不解析mustache语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> <span class="comment">&lt;!--结果： &#123;&#123;message&#125;&#125;--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-bloak"><a href="#v-bloak" class="headerlink" title="v-bloak"></a>v-bloak</h2><p>当vue未解析的时候，htmlDOM提前解析了，展现的内容对用户 不友好，给组件添加v-bloak，当没有解析的时候，不展现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果解析时，先解析的是h2标签，而不是vue实例，那么展现的结果就是 &#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="comment">这样的效果，对用户体验不好 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-bloak</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定v-bloak时，在没有解析vue实例之前，该标签不会展现内容 </span></span><br><span class="line"><span class="comment">避免让用户看到了 &#123;&#123;message&#125;&#125; </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模块化</title>
      <link href="2021/05/21/webpack/"/>
      <url>2021/05/21/webpack/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h2><div class="page-header">  <h3>前言</h3>  <p>    在<cst>JavaScript</cst>发展初期就是为了实现简单的页面交互逻辑，寥寥数语即可；如今CPU、浏览器性能得到了极大的提升，很多页面逻辑迁移到了客户端（表单验证等），随着<cst>web2.0时代</cst>的到来，<cst>Ajax技术</cst>得到广泛应用，<cst>jQuery</cst>等前端库层出不穷，前端代码日益膨胀，此时在JS方面就会考虑使用<cst>模块化规范</cst>去管理。  </p></div><div class="page-header"><h3>理解模块化</h3><p>模块化是一个语言发展的必经之路，其能够帮助开发者拆分和组织代码，随着前端技术的发展，前端编写的代码量也越来越大，就需要对代码有很好的管理，而模块化能够帮助开发者解决命名冲突、管理依赖、提高代码的可读性、代码解耦以及提高代码的复用性。  </p></div><div class="page-header"><h3>描述</h3><p>模块化开发其实就是封装细节，提供使用接口，彼此之间互不影响，每个模块都是实现某一特定的功能，同时也需要避免全局变量的污染，最初通过函数实现模块，实际上是利用了函数的局部作用域来形成模块。</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述的<code>func1</code>与<code>func2</code>函数分别形成了两个模块，需要使用的时候直接调用即可，但是这样无法保证不与其他模块发生变量名冲突，而且模块成员之间看不出直接关系，再之后便有使用对象作为模块，将成员的都放置于对象中。</p><div class="page-header"><h3>模块化规范</h3><p><cst>CommonJs、AMD、CMD、ES6</cst>都是用于模块化定义中使用的规范，其为了规范化模块的引入与处理模块之间的依赖关系以及解决命名冲突问题，并使用模块化方案来使复杂系统分解为代码结构更合理，可维护性更高的可管理的模块。</p></div><div class="page-header"><h3>CommonJS</h3> <p>   <cst>CommonJS</cst>是<cst>NodeJs</cst>服务器端模块的规范，根据这个规范，每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。CommonJS规范规定，每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性是对外的接口。加载某个模块，其实是加载该模块exports属性。总之，<cst>CommonJS规范通过require导入，module.exports与exports进行导出。</cst>  </p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.js，定义变量、函数等</span></span><br><span class="line"><span class="keyword">var</span> a  = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出方法，类似对象定义</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">a</span>: a,</span><br><span class="line">    <span class="attr">b</span>: b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// 当导出的模块名与被导出的成员或方法重名时可以有如下写法</span></span><br><span class="line"><span class="comment">module.exports = &#123;</span></span><br><span class="line"><span class="comment">    a,</span></span><br><span class="line"><span class="comment">    b</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.js  导入方式一</span></span><br><span class="line"><span class="keyword">const</span> m1 = <span class="built_in">require</span>(<span class="string">&quot;./1.js&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(m1.a); <span class="comment">// 1</span></span><br><span class="line">m1.b(); <span class="comment">// 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><cst>require是依赖于node环境的，浏览器无法解析require，所以CommonJS是Node服务端的规范，我们将学一下ES6模块化</cst></p><div class="page-header"><h3>ES6</h3>  <p></p></div><p><code>ES6</code>在语言标准的层面上实现了模块的功能，是为了成为浏览器和服务器通用的模块解决方案，<code>ES6</code>标准使用<code>export</code>与<code>export default</code>来导出模块，使用<code>import</code>导入模块</p><p>导出方式两种<code>export</code> 和 <code>export default</code></p><ul><li><code>export</code> 能按需导入，<code>export default</code> 不行</li><li><code>export</code>  可以有多个，<code>export default</code> 仅有一个</li><li><code>export</code>能直接导出变量表达式，<code>export default</code>不行。</li><li><code>export</code>方式导出，在导入时要加<code>&#123;&#125;</code>，<code>export default</code>则不需要。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出单个特性</span></span><br><span class="line"><span class="comment">// 在js定义变量、</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name1, name2, …, nameN; <span class="comment">// also var, const</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name1 = …, name2 = …, …, nameN; <span class="comment">// also var, const</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">FunctionName</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出列表</span></span><br><span class="line"><span class="keyword">export</span> &#123; name1, name2, …, nameN &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重命名导出，引用的时候是newname1，newname2</span></span><br><span class="line"><span class="keyword">export</span> &#123; name1 <span class="keyword">as</span> newname1, name2 <span class="keyword">as</span> newname2 , …, nameN &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> expression;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">…</span>) </span>&#123; … &#125; <span class="comment">// also class, function*</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">name1</span>(<span class="params">…</span>) </span>&#123; … &#125; <span class="comment">// also class, function*</span></span><br><span class="line"><span class="keyword">export</span> &#123; name1 <span class="keyword">as</span> <span class="keyword">default</span>, … &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出模块合集</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> …; <span class="comment">// does not set the default export</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">as</span> name1 <span class="keyword">from</span> …; <span class="comment">// Draft ECMAScript® 2O21</span></span><br><span class="line"><span class="keyword">export</span> &#123; name1, name2, …, nameN &#125; <span class="keyword">from</span> …;</span><br><span class="line"><span class="keyword">export</span> &#123; import1 <span class="keyword">as</span> name1, import2 <span class="keyword">as</span> name2, …, nameN &#125; <span class="keyword">from</span> …;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> &#125; <span class="keyword">from</span> …;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> defaultMember <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> name <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; member &#125; <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; member <span class="keyword">as</span> alias &#125; <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; member1 , member2 &#125; <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; member1 , member2 <span class="keyword">as</span> alias2 , [...] &#125; <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> defaultMember, &#123; member [ , [...] ] &#125; <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> defaultMember, * <span class="keyword">as</span> name <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;module-name&quot;</span>; <span class="comment">// 将运行模块中的全局代码, 但实际上不导入任何值。</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常用的导出方式</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">a,</span><br><span class="line">  b,</span><br><span class="line">  c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入方式</span></span><br><span class="line"><span class="keyword">import</span> &#123;a,b,c&#125; <span class="keyword">from</span> <span class="string">&#x27;./a.js&#x27;</span></span><br></pre></td></tr></table></figure><div class="page-header"><h3>引用JS文件</h3>  <p class="blue">在引用JS文件时，需要给js添加type类型module，确保它是一个单独的模块</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./a.js&quot;</span> type=<span class="string">&quot;module&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./b.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div class="page-header"><h3>前端模块化雏形</h3>  <p>前端开发，代码逐渐复杂，开发人员越来重视模块化思想，模块化雏形是通过闭包的形式出现的</p></div><h4 id="匿名闭包，解决了命名冲突问题，但是出现了代码不可复用性"><a href="#匿名闭包，解决了命名冲突问题，但是出现了代码不可复用性" class="headerlink" title="匿名闭包，解决了命名冲突问题，但是出现了代码不可复用性"></a>匿名闭包，解决了命名冲突问题，但是出现了代码不可复用性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> name= <span class="string">&#x27;小明&#x27;</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n1,n2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> n1+n2</span><br><span class="line">&#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h4 id="通过obj对象导出"><a href="#通过obj对象导出" class="headerlink" title="通过obj对象导出"></a>通过obj对象导出</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.js文件</span></span><br><span class="line">;<span class="keyword">var</span> <span class="built_in">module</span> = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name= <span class="string">&#x27;小明&#x27;</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n1,n2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> n1+n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.name = name;</span><br><span class="line">obj.age  = age;</span><br><span class="line">obj.sum  = sum;</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.js文件，引用1.js导出的obj</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(moduleA.name) <span class="comment">// logs 小明</span></span><br><span class="line"><span class="built_in">console</span>.log(moduleA.age)  <span class="comment">// logs 18</span></span><br><span class="line"><span class="built_in">console</span>.log(moduleA.sum(<span class="number">150</span>,<span class="number">35</span>)) <span class="comment">//logs 185</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p><cst>早期模块化开发都是通过闭包的方式避免命名冲突，通过对象导出。规模每一个人使用的模块命名</cst></p><div class="page-header"><h2>Webpack安装</h2><p>本质上，webpack 是一个用于现代 JavaScript 应用程序的 静态模块打包工具。当 webpack 处理应用程序时，它会在内部构建一个 依赖图(dependency graph)，此依赖图对应映射到项目所需的每个模块，并生成一个或多个 bundle。</p><div style="text-align:right;"><a class="btn-beautify button--animated outline blue larger" href="https://webpack.docschina.org/concepts/"   title="Webpack官方文档"><i class="far fa-hand-point-right"></i><span>Webpack官方文档</span></a></div></div><h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><p>webpack 用于编译 JavaScript 模块。一旦完成 <a href="https://webpack.docschina.org/guides/installation">安装</a>，你就可以通过 webpack <a href="https://webpack.docschina.org/api/cli">CLI</a> 或 <a href="https://webpack.docschina.org/api/node">API</a> 与其配合交互。如果你还不熟悉 webpack，请阅读 <a href="https://webpack.docschina.org/concepts">核心概念</a> 和 <a href="https://webpack.docschina.org/comparison">对比</a>，了解为什么要使用 webpack，而不是社区中的其他工具。</p><p><label class="red">Warning<label>：运行 webpack 5 的 Node.js 最低版本是 10.13.0 (LTS)。</p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>在开始之前，请确保安装了 <a href="https://nodejs.org/en/">Node.js</a> 的最新版本。使用 Node.js 最新的长期支持版本(LTS - Long Term Support)，是理想的起步。 使用旧版本，你可能遇到各种问题，因为它们可能缺少 webpack 功能， 或者缺少相关 package。</p><div class="page-header"><h3>本地安装</h3><p>最新的 webpack 正式版本是：v5.37.1<br>要安装最新版本或特定版本，请运行以下命令之一：</p></div> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack</span><br><span class="line"># 或指定版本 </span><br><span class="line">npm install --save-dev webpack@&lt;version&gt;</span><br></pre></td></tr></table></figure><blockquote><p>是否使用 <code>--save-dev</code> 取决于你的应用场景。假设你仅使用 webpack 进行构建操作，那么建议你在安装时使用 <code>--save-dev</code> 选项，因为可能你不需要在生产环境上使用 webpack。如果需要应用于生产环境，请忽略 <code>--save-dev</code> 选项。</p></blockquote><div class="page-header"><h3>全局安装</h3><p>通过以下 NPM 安装方式，可以使 webpack 在全局环境下可用：</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global webpack</span><br></pre></td></tr></table></figure><blockquote><p><strong>不推荐</strong> 全局安装 webpack。这会将你项目中的 webpack 锁定到指定版本，并且在使用不同的 webpack 版本的项目中， 可能会导致构建失败。</p></blockquote><p>我在学vue的时候，是先安装全局的webpack，便于我在任何地方使用，也许以后开发项目，不能这样安装</p><br><a class="btn-beautify button--animated outline block right blue larger" href="/2021/05/22/webpack1/"   title="学习webpack工具"><i class="far fa-hand-point-right"></i><span>学习webpack工具</span></a>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack安装 </tag>
            
            <tag> 前端模块化 </tag>
            
            <tag> 打包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5、CSS、Javascript</title>
      <link href="2021/05/20/Html_CSS/"/>
      <url>2021/05/20/Html_CSS/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础知识</title>
      <link href="2021/05/20/Vue2/"/>
      <url>2021/05/20/Vue2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="page-header"><h2>条件渲染</h2><p>控制切换一个元素是否显示。重要代码<code>v-if</code>、<code>v-else</code>、<code>v-else-if</code>、<code>v-show</code>  </p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--v-if=&quot;boolean&quot;是一个布尔值--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--v-show=&quot;boolean&quot;同样是布尔值&gt;</span></span><br><span class="line"><span class="comment">&lt;p v-show=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt;</span></span><br><span class="line"><span class="comment">  &lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;script&gt;</span></span><br><span class="line"><span class="comment">  var app3 = new Vue(&#123;</span></span><br><span class="line"><span class="comment">  el: &#x27;#app-3&#x27;,</span></span><br><span class="line"><span class="comment">  data: &#123;</span></span><br><span class="line"><span class="comment">    seen: true</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p><span class="blue">v-if 和 v-show的区别：</span>v-if 的布尔值是false是不执行该标签的，不会渲染在DOM结构。v-show 是改变display属性，渲染在DOM结构</p><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 <span class="blue">truthy </span>值的时候被渲染。</p><p><code>v-if && v-else</code>联合使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-else</code> 元素必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素的后面，否则它将不会被识别。</p><p><code>v-else-if</code>和 js 里面的<code>else-if</code>是一样的功能，用来连续判断的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以用判断句返回boolean值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span></span><br><span class="line">  A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span></span><br><span class="line">  B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span></span><br><span class="line">  C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Not A/B/C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="用key管理可复用的元素"><a href="#用key管理可复用的元素" class="headerlink" title="用key管理可复用的元素"></a>用<code>key</code>管理可复用的元素</h3><p>Vue 会尽可能<cst>高效地渲染</cst>元素，通常会<cst>复用已有</cst>元素而不是从头开始渲染。这么做除了使 Vue 变得非常快之外，还有其它一些好处。例如，如果你允许用户在不同的登录方式之间切换：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your email address&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="blue text-left" style="width:200px">        效果模拟：      </div><div id="app">        <div id="inputid">            <div v-if="email">              <label>Username</label>              <input placeholder="Enter your username">            </div>            <div v-else>              <label>Email</label>              <input placeholder="Enter your email address">            </div>            <button type="button" class="btn btn-success" @click="qiehuan()">切换登录类型</button>        </div>    </div><script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js" type="text/javascript" charset="utf-8"></script><script type="text/javascript">    const app = new Vue({        el:'#app',        data:{            email: false        },        methods:{            qiehuan(){                this.email=!this.email;            }        }    })</script><p><br><cst class="red">结论：</cst>条件渲染时，会出现<cst>复用组件</cst>情况。这也是<cst>节约DOM性能</cst>。我们在输入值是，切换登录value值依然在，这就是<cst>复用了input</cst>组件。如果不希望出现这个结果，可以给input 添加<cst> key</cst>属性，<cst>不同的key值</cst>，将会重新渲染一个新的组件，而不是复用</p><h3 id="v-if-vs-v-show的区别"><a href="#v-if-vs-v-show的区别" class="headerlink" title="v-if vs v-show的区别"></a><code>v-if</code> vs <code>v-show</code>的区别</h3><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p><hr><div class="page-header"><h2>列表渲染</h2><p>用 v-for 把一个数组对应为一组元素</p></div><p>我们可以用 <code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是<cst>源数据数组</cst>，而 <code>item</code> 则是被迭代的数组元素的<cst>别名</cst>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 渲染数组，在data数据中存放了items数组，每一个li标签绑定了不同的key值，避免复用</span></span><br><span class="line"><span class="comment">item 是别名，可以任意，但最好能表达数组含义。--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> example1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">el</span>: <span class="string">&#x27;#example-1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">items</span>: [</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;</span></span><br><span class="line"><span class="javascript">    ]</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="cstimg"><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210521081004.png"/></div><p>在 <code>v-for</code> 块中，我们可以访问所有父作用域的 property。<code>v-for</code> 还支持一个可选的第二个参数，即当前项的索引。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example-2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> example2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">el</span>: <span class="string">&#x27;#example-2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">parentMessage</span>: <span class="string">&#x27;Parent&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">items</span>: [</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;</span></span><br><span class="line"><span class="javascript">    ]</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="cstimg">  <img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210521082043.png" /></div><p>你也可以用 <code>of</code> 替代 <code>in</code> 作为分隔符，因为它更接近 JavaScript 迭代器的语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item of items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;v-for-object&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;value in object&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">el</span>: <span class="string">&#x27;#v-for-object&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">object</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">title</span>: <span class="string">&#x27;How to do lists in Vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">author</span>: <span class="string">&#x27;Jane Doe&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">publishedAt</span>: <span class="string">&#x27;2016-04-10&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="cstimg">  <img  src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210521082655.png"/></div><p>你也可以提供第二个的参数为 <cst>property </cst>名称 (也就是键名)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, name) in object&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还可以用第三个参数作为索引：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, name, index) in object&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ES6语法遍历数组"><a href="#ES6语法遍历数组" class="headerlink" title="ES6语法遍历数组"></a>ES6语法遍历数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//this.libararys是data数据数组，用in获取的是元素索引</span></span><br><span class="line"><span class="comment">//用of获取的是元素本身，如果是对象的话，直接获取拿到属性值</span></span><br><span class="line"><span class="keyword">let</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> <span class="built_in">this</span>.libararys)&#123;</span><br><span class="line">sum+=<span class="built_in">this</span>.libararys[i].num * <span class="built_in">this</span>.libararys[i].price;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">this</span>.libararys)&#123;</span><br><span class="line">    sum += item.price * item.num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="v-if-与-v-for-一起使用"><a href="#v-if-与-v-for-一起使用" class="headerlink" title="v-if 与 v-for 一起使用"></a><code>v-if</code> 与 <code>v-for</code> 一起使用</h3><p>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。所以不建议同时使用。</p><h2 id="维护状态"><a href="#维护状态" class="headerlink" title="维护状态"></a>维护状态</h2><p>当 Vue 正在更新使用 <code>v-for</code> 渲染的元素列表时，它默认使用“ 就地更新 “的策略。如果数据项的顺序被改变，Vue将不会移动DOM元素来匹配数据项的顺序，而是就地更新每一个元素，并确保它们在每个索引位置正确渲染。</p><p>这个默认的模式是<cst>高效</cst>的，但是<cst>只适用于不依赖子组件状态或临时DOM状态</cst></p><p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 <code>key</code> 值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>建议尽可能在使用 <code>v-for</code> 时提供 <code>key</code> 值，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。</p><p>因为它是 Vue 识别节点的一个通用机制，<code>key</code> 并不仅与 <code>v-for</code> 特别关联。后面我们将在博客中看到，它还具有其它用途。</p><div class="text-right">  <a class="btn-beautify button--animated outline green larger" href="/2021/05/21/vuevfor/"   title="数组应用"><i class="far fa-hand-point-right"></i><span>数组应用</span></a></div>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-matter || button</title>
      <link href="2021/05/20/frontmatter/"/>
      <url>2021/05/20/frontmatter/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="page-header">  <h2 class="blue">    Page Front-matter  </h2></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line"><span class="section">sticky:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标签、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>sticky</td><td>【可选】在需要文章置顶时，填写数字，最大999</td></tr></tbody></table><div class="page-header">  <h2 class="blue">    Post Front-matter<small>新增转载数据参数</small>  </h2></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">copyright:</span><br><span class="line">copyright<span class="emphasis">_author:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href:</span></span><br><span class="line"><span class="emphasis">copyright_</span>url:</span><br><span class="line">copyright<span class="emphasis">_info:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line"><span class="section">aside:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr></tbody></table><h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><blockquote><p>使用参数，版本适用于3.0以上</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br><span class="line"></span><br><span class="line">[url]         : 鏈接</span><br><span class="line">[text]        : 按鈕文字</span><br><span class="line">[icon]        : [可選] 圖標</span><br><span class="line">[color]       : [可選] 按鈕背景顔色(默認style時）</span><br><span class="line"><span class="code">                      按鈕字體和邊框顔色(outline時)</span></span><br><span class="line"><span class="code">                      default/blue/pink/red/purple/orange/green</span></span><br><span class="line"><span class="code">[style]       : [可選] 按鈕樣式 默認實心</span></span><br><span class="line"><span class="code">                      outline/留空</span></span><br><span class="line"><span class="code">[layout]      : [可選] 按鈕佈局 默認為line</span></span><br><span class="line"><span class="code">                      block/留空</span></span><br><span class="line"><span class="code">[position]    : [可選] 按鈕位置 前提是設置了layout為block 默認為左邊</span></span><br><span class="line"><span class="code">                      center/right/留空</span></span><br><span class="line"><span class="code">[size]        : [可選] 按鈕大小</span></span><br><span class="line"><span class="code">                      larger/留空</span></span><br></pre></td></tr></table></figure><blockquote><p>样式</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br></pre></td></tr></table></figure><p>This is my website, click the button <a class="btn-beautify button--animated " href="http://www.noti.top/"   title="SimpleLife"><span>SimpleLife</span></a><br>This is my website, click the button <a class="btn-beautify button--animated " href="http://www.noti.top/"   title="SimpleLife"><i class="far fa-hand-point-right"></i><span>SimpleLife</span></a><br>This is my website, click the button <a class="btn-beautify button--animated outline" href="http://www.noti.top/"   title="SimpleLife"><span>SimpleLife</span></a><br>This is my website, click the button <a class="btn-beautify button--animated outline" href="http://www.noti.top/"   title="SimpleLife"><i class="far fa-hand-point-right"></i><span>SimpleLife</span></a><br>This is my website, click the button <a class="btn-beautify button--animated larger" href="http://www.noti.top/"   title="SimpleLife"><i class="far fa-hand-point-right"></i><span>SimpleLife</span></a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#x27;http://www.noti.top/&#x27;,SimpleLife,far fa-hand-point-right,block %&#125;</span><br><span class="line">&#123;% btn &#x27;http://www.noti.top/&#x27;,SimpleLife,far fa-hand-point-right,block center larger %&#125;</span><br><span class="line">&#123;% btn &#x27;http://www.noti.top/&#x27;,SimpleLife,far fa-hand-point-right,block right outline larger %&#125;</span><br></pre></td></tr></table></figure><a class="btn-beautify button--animated block" href="http://www.noti.top/"   title="SimpleLife"><i class="far fa-hand-point-right"></i><span>SimpleLife</span></a><a class="btn-beautify button--animated block center larger" href="http://www.noti.top/"   title="SimpleLife"><i class="far fa-hand-point-right"></i><span>SimpleLife</span></a><a class="btn-beautify button--animated block right outline larger" href="http://www.noti.top/"   title="SimpleLife"><i class="far fa-hand-point-right"></i><span>SimpleLife</span></a><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,green larger %&#125;</span><br></pre></td></tr></table></figure><a class="btn-beautify button--animated larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated blue larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated pink larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated red larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated purple larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated orange larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated green larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span></span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline green larger %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="text-center"><a class="btn-beautify button--animated outline larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline blue larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline pink larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline red larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline purple larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline orange larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline green larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></div><h2 id="label"><a href="#label" class="headerlink" title="label"></a>label</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>text</td><td>文字</td></tr><tr><td>color</td><td>【可选】背景顏色，默认为 default/blue/pink/red/purple/orange/green</td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">臣亮言：&#123;% label 先帝 %&#125;創業未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此誠&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈於內；&#123;% label 忠志之士 purple %&#125;，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。</span><br><span class="line">宮中、府中，俱為一體；陟罰臧否，不宜異同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。</span><br></pre></td></tr></table></figure><p>臣亮言：<mark class="hl-label blue">先帝</mark> 創業未半，而<mark class="hl-label default">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此誠<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈於內；<mark class="hl-label purple">忠志之士</mark> ，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。<br>宮中、府中，俱為一體；陟罰臧否，不宜異同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。</p>]]></content>
      
      
      <categories>
          
          <category> front_matter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> front-matter </tag>
            
            <tag> butterfly </tag>
            
            <tag> blog </tag>
            
            <tag> button </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap框架学习之旅</title>
      <link href="2021/05/19/Bootstrap1/"/>
      <url>2021/05/19/Bootstrap1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://v3.bootcss.com/">Bootstrap</a>是最受欢迎的HTML、CSS和JS框架，用于响应式布局、移动设备优先的WEB项目</p></blockquote><h3 id="起步Bootstrap"><a href="#起步Bootstrap" class="headerlink" title="起步Bootstrap"></a>起步<a href="https://v3.bootcss.com/getting-started/">Bootstrap</a></h3><p>简要介绍Boostrap，以及如何下载、使用，还有基本模板和案例</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Bootstrap（当前版本v3.4.1）提供一下几种方式帮你快速上手，每一种方式针对具有不用技能等级的开发者和不同的使用场景</p><div style="display: flex;justify-content: center;">          <div style="width:200px;height:200px;">            <h5>用于生产环境的Bootstrap</h5>            <p>编译并压缩后的CSS、JS和字体文件。不包含文档和源码</p>          </div>           <div style="width:200px;margin: auto 50px;height:200px;">            <h5>Bootstrap 源码</h5>            <p>Less、JavaScript 和 字体文件的源码，并且带有文档。需要 Less 编译器和一些设置工作。</p>          </div>           <div style="width:200px;height:200px;">            <h5>Sass</h5>            <p>这是 Bootstrap 从 Less 到 Sass 的源码移植项目，用于快速地在 Rails、Compass 或 只针对 Sass 的项目中引入。</p>          </div>        </div><h3 id="BootstrapCDN"><a href="#BootstrapCDN" class="headerlink" title="BootstrapCDN"></a>BootstrapCDN</h3><p>直接使用Bootstrap的CSS和JavaScript文件的链接，更加方便</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可选的 Bootstrap 主题文件（一般不用引入） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap-theme.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-6pzBo3FDv/PJ8r2KRkGHifhEocL+1X2rVCTTkUfGk7/0pbek5mMa1upzvWbrUbOZ&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入BootstrapJS文件，先引入Jquery文件，因为依赖它--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基本模板"><a href="#基本模板" class="headerlink" title="基本模板"></a>基本模板</h3><p>使用一下给出的这份超级简单的HTML模板，可以根据自己的需求进行修改，而不是简单的复制，粘贴</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap 101 Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- HTML5 shim 和 Respond.js 是为了让 IE8 支持 HTML5 元素和媒体查询（media queries）功能 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 警告：通过 file:// 协议（就是直接将 html 页面拖拽到浏览器中）访问页面时 Respond.js 不起作用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src=&quot;https://cdn.jsdelivr.net/npm/html5shiv@3.7.3/dist/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src=&quot;https://cdn.jsdelivr.net/npm/respond.js@1.4.2/dest/respond.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;![endif]--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Bootstrap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bootstrap入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法</title>
      <link href="2021/05/19/markdown/"/>
      <url>2021/05/19/markdown/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="simple text-center">SimpleLife带你学习，带你飞</div><div class="page-headermd text-center"><h2>MarkDown语法</h2><p>Markdown 指南 是一份免费且开源的 Markdown 参考手册，详细讲解了<br>Markdown 这一简单、易用的文档格式化标记语言的用法。</p><span><a class="btn-beautify button--animated outline blue larger" href="https://www.markdown.xyz"   title="官方文档"><span>官方文档</span></a></span></div> <div class="page-header"><h2>Markdown是什么 </h2><p>一种轻量级的标记语言，可用于在纯文本文档中添加格式化元素。Markdown有John Gruber于2004年创建，如今很受欢迎</p></div>Markdown 语法的首要设计目标是尽可能易读。基于这个目标，Markdown 格式的文档能够以纯文本形式原样发布，而不会看起来像被填满了标签或格式化指令。 <div class="page-header"><h2>为什么要使用Markdown？</h2></div><ol><li>Markdown 处处可用。人们使用它创建 <span class="blue">网站</span>、<span class="blue">文档</span>、<span class="blue">便签</span>、<span class="blue">书籍</span>、<span class="blue">演示文稿</span>、<span class="blue">邮件</span> 和 <span class="blue">技术文档</span></li><li>Markdown 是可移植的。可以将markdown移植到任意平台。你的格式，在其它平台依然生效</li><li>Markdown 是独立于平台的。不受<span class="blue">操作系统</span>的限制</li><li>Markdown 能适应未来的变化。及时你使用你程序不能使用了，你仍然可以使用文本编辑器读取 Markdown 格式的文本。</li><li>Markdown 无处不在。众多平台支持markdown语法，如<span class="blue">Github</span>，<span class="blue">博客园</span></li></ol> <div class="page-header"><h2>工欲善其事，必先利其器</h2><p>Markdown 入门的最佳方式就是多使用它。由于有大量免费工具的存在，这比以前任何时候都更容易开始上手了。</p></div><div class="text-center"><span><a class="btn-beautify button--animated outline blue larger" href="https://dillinger.io"   title="Markdown在线编辑器<small class=huise>不易访问</small>"><i class="far fa-hand-point-right"></i><span>Markdown在线编辑器<small class=huise>不易访问</small></span></a></span><span><a class="btn-beautify button--animated outline blue larger" href="https://www.typora.io"   title="工具Typora"><i class="far fa-hand-point-right"></i><span>工具Typora</span></a></span></div> <div class="page-header"><h2>Markdown基本语法</h2><p>几乎所有 Markdown 应用程序都支持 John Gruber 原始设计文档中列出的 Markdown 基本语法。但是，Markdown 处理程序之间存在着细微的变化和差异，我们都会尽可能标记出来</p></div><span class="blue">创建标题：</span>在标题前面添加井号(#)。个数代表了标题的级别 <table class="table table-bordered table-hover">     <thead class="trta">    <tr class="text-left trta">      <th>Markdown</th>      <th>HTML</th>      <th>渲染效果</th>    </tr>  </thead>  <tbody>    <tr >      <td><samp># Heading level 1</samp></td>      <td><samp class="highlighter-rouge">&lt;h1&gt;Heading level 1&lt;/h1&gt;</samp></td>      <td><h1 class="no-anchor" data-toc-skip="">Heading level 1</h1></td>    </tr>    <tr>      <td><samp class="highlighter-rouge">## Heading level 2</samp></td>      <td><samp class="highlighter-rouge">&lt;h2&gt;Heading level 2&lt;/h2&gt;</samp></td>      <td><h2 class="no-anchor" data-toc-skip="">Heading level 2</h2></td>    </tr>    <tr>      <td><samp class="highlighter-rouge">### Heading level 3</samp></td>      <td><samp class="highlighter-rouge">&lt;h3&gt;Heading level 3&lt;/h3&gt;</samp></td>      <td><h3 class="no-anchor" data-toc-skip="">Heading level 3</h3></td>    </tr>    <tr>      <td><samp class="highlighter-rouge">#### Heading level 4</samp></td>      <td><samp class="highlighter-rouge">&lt;h4&gt;Heading level  4&lt;/h4&gt;</samp></td>      <td><h4 class="no-anchor">Heading level 4</h4></td>    </tr>    <tr>      <td><samp class="highlighter-rouge">##### Heading level 5</samp></td>      <td><samp class="highlighter-rouge">&lt;h5&gt;Heading level 5&lt;/h5&gt;</samp></td>      <td><h5 class="no-anchor">Heading level 5</h5></td>    </tr>    <tr>      <td><samp class="highlighter-rouge">###### Heading level 6</samp></td>      <td><samp class="highlighter-rouge">&lt;h6&gt;Heading level 6&lt;/h6&gt;</samp></td>      <td><h6 class="no-anchor">Heading level 6</h6></td>    </tr>  </tbody> </table> <span class="blue">可选语法：</span>还可以在文本下方添加任意数量的 == 号来标识一级标题，或者 -- 号来标识二级标题。 <table class="table table-bordered">  <thead class="thead-light">    <tr class="text-left">      <th>Markdown</th>      <th>HTML</th>      <th>渲染效果</th>    </tr>  </thead>  <tbody>    <tr>      <td><samp class="highlighter-rouge">Heading level 1<br />===============</samp></td>      <td><samp class="highlighter-rouge">&lt;h1&gt;Heading level 1&lt;/h1&gt;</samp></td>      <td><h1 class="no-anchor" data-toc-skip="">Heading level 1</h1></td>    </tr>    <tr>      <td><samp class="highlighter-rouge">Heading level 2<br />---------------</samp></td>      <td><samp class="highlighter-rouge">&lt;h2&gt;Heading level 2&lt;/h2&gt;</samp></td>      <td><h2 class="no-anchor" data-toc-skip="">Heading level 2</h2></td>    </tr>  </tbody></table> <footer class="blue"> 当井号（#）和标题文本之间<span class="red">没有空格</span>时，各 Markdown 应用程序的处理方式是不一样的。为了兼容考虑，请在井号和标题文本之间<span class="red">添加一个空格</span>。<hr></footer><p><span class="blue" >创建段落：</span>请使用空白行将一行或多行文本进行分隔。</p><table class="table table-bordered" id="csttable"><thead><tr class="text-left"><th>Markdown</th><th>HTML</th><th>渲染效果</th></tr></thead><tbody><tr><td><samp class="highlighter-rouge"> I really like using Markdown.<br /><br />I sampthink I'll use it to format all of my documents from now on.</samp></td><td><samp class="highlighter-rouge">&lt;p&gt;I really like using Markdown.&lt;/p&gt;<br /><br />&lt;p&gt;I think I'll use it to format all of my documents from now on.&lt;/p&gt;</samp></td><td><p>I really like using Markdown.</p><p>I think I'll use it to format all of my documents from now on.</p></td>    </tr>  </tbody></table><p><span class="blue">换行（Line Break）用法的最佳实践</span></p><p>在一行的末尾添加<span class="red">两个或多个空格</span>，然后按回车键（return），即可创建一个换行（line break） (&lt;br&gt;)。<br><br>因为很难在编辑器中直接看到空格，并且很多人在每个句子后面都会有意或无意地添加两个格<br>为了<span class="red">兼容性</span>，请在行尾添加“<span class="red">结尾空格</span>”或 HTML 的 <span class="red">&lt;br&gt;</span>标签来实现换行。</p><p><span class="blue">强调字体：</span>粗体和斜体的使用<br>要<span class="blue">加粗文本</span>，请在单词或短语的前后各添加<span class="red">两个星号或下划线</span>。如需加粗一个单词或短语的中间部分用以表示强调的话，请在要加粗部分的两侧各添加两个星号<br><br>要用<span class="blue">斜体显示文本</span>，请在单词或短语前后添加<span class="red">一个星号或下划线</span>。要斜体突出单词的中间部分，请在字母前后各添加一个星号，中间不要带空格。</p><footer class="red">尽量使用星号*去加粗和斜体，因为Markdown的众多应用程序处理单词中间下划线意见不一致。加粗和斜体同时使用，左右两侧添加三个星号*</footer><hr><div class="page-header"><h2>块引用</h2><p>要创建块引用，请在段落前添加一个 > 符号。</p></div><code>> Dorothy followed her through many of the beautiful rooms in her castle.</code><blockquote><p> Dorothy followed her through many of the beautiful rooms in her castle.</p></blockquote><p>  嵌套块引用效果：通过多个'>' 来达到效果</p><blockquote><blockquote><p>3</p><blockquote><p>2</p><blockquote><p>1</p></blockquote></blockquote></blockquote></blockquote><div>  <h2>    列表  </h2>  <p>        你可以将多个条目组织成有序或无序列表。      </p></div>1. 有序列表：2. 无序列表<hr><div class="page-header">  <h2>    表格  </h2>  <p>    如需添加表格，请使用三个或更多个连字符（---）来为每个列创建表头，并使用管道符（|）来分隔每个列。你还可以     在表格的任意一侧添加管道符。  </p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description |</span><br><span class="line">| ----------- | ----------- |</span><br><span class="line">| Header      | Title       |</span><br><span class="line">| Paragraph   | Text        |</span><br></pre></td></tr></table></figure><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p>通过在标题行中的连字符(–)的左侧或右侧或两侧添加冒号（<code>:</code>），可以将对应列中的文本向左或向右或居中对齐。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description | Test Text     |</span><br><span class="line">| :---        |    :----:   |          ---: |</span><br><span class="line">| Header      | Title       | Here&#x27;s this   |</span><br><span class="line">| Paragraph   | Text        | And more      |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">Syntax</th><th align="center">Description</th><th align="right">Test Text</th></tr></thead><tbody><tr><td align="left">Header</td><td align="center">Title</td><td align="right">Here’s this</td></tr><tr><td align="left">Paragraph</td><td align="center">Text</td><td align="right">And more</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> front-matter </tag>
            
            <tag> 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sofeware Sharing</title>
      <link href="2021/05/19/sofeware/"/>
      <url>2021/05/19/sofeware/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="page-header">    <h2 class="huise">HBuilderX<small>web开发编辑器</small></h2>    <p>HBuilderX，简称HX，是轻如编辑器、强如IDE的合体版本。轻巧、极速 为极客、为懒人、为你</p>        <div class="text-right">    <a class="btn-beautify button--animated outline larger" href="https://www.dcloud.io/hbuilderx.html"   title="HBuilderX"><i class="far fa-hand-point-right"></i><span>HBuilderX</span></a>       </div></div><div class="page-header">    <h2 class="blue">XMind<small>思维导图</small></h2>    <p>XMind 是一个全功能的思维导图和头脑风暴软件，为激发灵感和创意而生。作为一款有效提升工作和生活效率的生产力工具，受到全球百千万用户的青睐。</p>        <div class="text-right">    <a class="btn-beautify button--animated outline blue larger" href="https://www.xmind.cn"   title="XMind"><i class="far fa-hand-point-right"></i><span>XMind</span></a>    <a class="btn-beautify button--animated outline blue larger" href="https://pan.baidu.com/s/10Gy1CvkBP_aR6Yrc_KH6Rw"   title="[百度网盘life(破解)]XMind"><i class="far fa-hand-point-right"></i><span>[百度网盘life(破解)]XMind</span></a>       </div></div><div class="page-header">    <h2 class="pink">VS Code<small>强大的IDE</small></h2>    <p>VS Code，全称Visual Studio Code，是轻量的编辑器，通过下载插件，让VS Code 更加灵活，好用。你想要的功能，插件都能满足你！</p>        <div class="text-right">    <a class="btn-beautify button--animated outline pink larger" href="https://code.visualstudio.com/Download/"   title="VS Code"><i class="far fa-hand-point-right"></i><span>VS Code</span></a>       </div></div>]]></content>
      
      
      <categories>
          
          <category> Sofeware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
            <tag> 神器 </tag>
            
            <tag> 强大好用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tool Sharing</title>
      <link href="2021/05/19/tooltip/"/>
      <url>2021/05/19/tooltip/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="page-header">    <h2 class="huise">PotPlayer<small>万能播放器</small></h2>    <p>是一款绝对轻量级的万能播放器，而且免费，不会有弹窗</p>        <div class="text-right">    <a class="btn-beautify button--animated outline larger" href="https://potplayer.en.softonic.com/download"   title="PotPlayer"><i class="far fa-hand-point-right"></i><span>PotPlayer</span></a>       </div></div><div class="page-header">    <h2 class="blue">ImageGlass<small>图像查看器</small></h2>    <p>一个轻量级、多功能的图像查看器</p>        <div class="text-right">    <a class="btn-beautify button--animated outline blue larger" href="https://imageglass.org"   title="ImageGlass"><i class="far fa-hand-point-right"></i><span>ImageGlass</span></a>       </div></div><div class="page-header">    <h2 class="pink">Snipaste<small>截图工具</small></h2>    <p>Snipaste 是一个简单但强大的截图工具，也可以让你将截图贴回到屏幕上</p>        <div class="text-right">    <a class="btn-beautify button--animated outline pink larger" href="https://zh.snipaste.com/download.html"   title="Snipaste"><i class="far fa-hand-point-right"></i><span>Snipaste</span></a>       </div></div><div class="page-header">    <h2 class="red">Antelope<small>压缩照片</small></h2>    <p>Antelope是快速，批量优化的应用程序，用于JPEG和PNG文件大小，而不会降低质量</p>        <div class="text-right">    <a class="btn-beautify button--animated outline red larger" href="https://boldright.co.jp/products/antelope/"   title="Antelope"><i class="far fa-hand-point-right"></i><span>Antelope</span></a>       </div></div><div class="page-header">    <h2 class="purple">PicGo<small>图床管理</small></h2>    <p>PicGo 是一款开源跨平台的免费图片上传工具以及图床相册管理软件，它能帮你快速地将图片上传到微博、又拍云、阿里云 OSS、腾讯云 COS、七牛、GitHub、sm.ms、Imgur 等常见的免费图床网站</p>        <div class="text-right">    <a class="btn-beautify button--animated outline purple larger" href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.2.2"   title="[Github]PicGo"><i class="far fa-hand-point-right"></i><span>[Github]PicGo</span></a>      <a class="btn-beautify button--animated outline purple larger" href="https://pan.baidu.com/s/1KOtURBzcILC1n3ftIuuheA"   title="[百度网盘life]PicGo"><i class="far fa-hand-point-right"></i><span>[百度网盘life]PicGo</span></a>       </div></div><div class="page-header">    <h2 class="orange">Typora<small>markdown编辑器</small></h2>    <p>一个轻量级的Markdown编辑器，简单而强大，可读可写，开源免费</p>        <div class="text-right">    <a class="btn-beautify button--animated outline orange larger" href="https://www.typora.io/"   title="Typora"><i class="far fa-hand-point-right"></i><span>Typora</span></a>       </div></div><div class="page-header">    <h2 class="green">TEMPMAIL<small>临时邮箱</small></h2>    <p>不用再担心垃圾邮件，广告邮件，黑客和机器人攻击。让您真实的邮箱保持干净和安全。Temp Mail提供临时、安全、匿名、免费的一次性电子邮件地址。</p>        <div class="text-right">    <a class="btn-beautify button--animated outline green larger" href="https://temp-mail.org/zh/"   title="TEMPMAIL"><i class="far fa-hand-point-right"></i><span>TEMPMAIL</span></a>       </div></div><div class="page-header">    <h2 class="huise">IDM<small>资源下载</small></h2>    <p>IDM，全称internetdownloadmanager。开启后，可以下载网页资源，简单快速而强大</p>        <div class="text-right">    <a class="btn-beautify button--animated outline larger" href="https://pan.baidu.com/s/1rSxKxFVuzQl1gwJ-_9iV6g"   title="[百度网盘life]TEMPMAIL"><i class="far fa-hand-point-right"></i><span>[百度网盘life]TEMPMAIL</span></a>       </div></div><div class="page-header">    <h2 class="blue">HUORONG<small>火绒安全</small></h2>    <p>不打扰，是我们的态度；易使用，是我们的温度。火绒安全也绝对轻量级，个人版免费使用，拒绝弹窗，净化一切</p>        <div class="text-right">    <a class="btn-beautify button--animated outline blue larger" href="https://www.huorong.cn"   title="HUORONG"><i class="far fa-hand-point-right"></i><span>HUORONG</span></a>       </div></div>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神器 </tag>
            
            <tag> 工具箱 </tag>
            
            <tag> 轻量级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Hexo主题</title>
      <link href="2021/05/17/Hexo2/"/>
      <url>2021/05/17/Hexo2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><blockquote><p>什么是<a href="https://git-scm.com/">Git</a>？Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们将本地搭建好的网站，使用Git工具同步到Github上</p></blockquote><p><a href="https://git-scm.com/download/win">Git下载地址</a></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517081113.png"></p><blockquote><p>在window桌面右键菜单栏，点击Git Bash Here，这是接下来需要的工具</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517081245.png"></p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><blockquote><p>Hexo基于Node.js，Node.js下载地址<a href="https://nodejs.org/en/download/%EF%BC%8C%E6%B3%A8%E6%84%8F%E5%AE%89%E8%A3%85Node.js%E4%BC%9A%E5%8C%85%E5%90%AB%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%8F%8Anpm%E7%9A%84%E5%AE%89%E8%A3%85%EF%BC%8C%E5%AE%89%E8%A3%85%E5%90%8E%EF%BC%8C%E5%9C%A8%E5%91%BD%E5%90%8D%E8%A1%8CCMD%E8%BE%93%E5%85%A5node">https://nodejs.org/en/download/，注意安装Node.js会包含环境变量及npm的安装，安装后，在命名行CMD输入node</a> -v，判断是否安装成功</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517081912.png"></p><p>通过两个命令，判断node和npm是否安装成功，安装成功会得到版本号信息</p><h3 id="使用npm命令安装Hexo-Git安装"><a href="#使用npm命令安装Hexo-Git安装" class="headerlink" title="使用npm命令安装Hexo(Git安装)"></a>使用npm命令安装Hexo(Git安装)</h3><p><code>npm install -g hexo-cli </code></p><h3 id="耐心等待安装后，准备初始化博客"><a href="#耐心等待安装后，准备初始化博客" class="headerlink" title="耐心等待安装后，准备初始化博客"></a>耐心等待安装后，准备初始化博客</h3><blockquote><p>选择一个路径，创建博客文件夹，用于存放博客的。进入博客文件夹</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517082803.png"></p><div style=text-align:center;font-size:20px>  我创建了AlovelyYou文件夹，右键打开Git Bash，输入命令<cmd>hexo init</cmd>  <br>使用命令hexo s 本地访问网站，输入临时网站localhost:4000，如下图所示</div><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517083415.png"></p><h3 id="配置username和useremail信息，本地绑定github"><a href="#配置username和useremail信息，本地绑定github" class="headerlink" title="配置username和useremail信息，本地绑定github"></a>配置username和useremail信息，本地绑定github</h3><blockquote><p>git config –global user.name “你的GitHub用户名”<br>git config –global user.email “你的GitHub注册邮箱”</p></blockquote><h3 id="生成ssh密钥文件："><a href="#生成ssh密钥文件：" class="headerlink" title="生成ssh密钥文件："></a>生成ssh密钥文件：</h3><blockquote><p>ssh-keygen -t rsa -C “你的GitHub注册邮箱”</p></blockquote><p>然后直接三个回车即可，默认不需要设置密码。在c盘用户管理员文件夹找到.ssh，打开id_rsa.push密钥，将全部内容复制下来</p><blockquote><p>$ ssh -T <a href="mailto:&#x67;&#105;&#x74;&#64;&#103;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#x6d;">&#x67;&#105;&#x74;&#64;&#103;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#x6d;</a> # 注意邮箱地址不用改</p></blockquote><p>因为我已经搭建了博客，不演示输入命令的结果了。按照文字说明即可</p><h3 id="进入Github设置ssh密钥"><a href="#进入Github设置ssh密钥" class="headerlink" title="进入Github设置ssh密钥"></a>进入Github设置ssh密钥</h3><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517090803.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517091154.png"></p><p>输入命令ssh <a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#x63;&#111;&#109;">&#x67;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#x63;&#111;&#109;</a>，结果所下图所示说明成功啦</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517091358.png"></p><h3 id="配置hexo文件-config-yml"><a href="#配置hexo文件-config-yml" class="headerlink" title="配置hexo文件_config.yml"></a>配置hexo文件_config.yml</h3><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517091801.png"></p><p>我们将本地博客和GitHub关联起来，打开配置文件，在最后一页</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517092021.png"></p><p>如果你的仓库分支是master，在branch填master，我默认是main，如果你的默认是master，请修改</p><p>保存文件配置，现在安装Git部署插件，将本地部署到github</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><code>hexo c</code> &amp;&amp; <code>hexo g</code> &amp;&amp;<code>hexo d</code></p><p>通过这三条命令，你可以将本地博客部署到Github上，在输入命名时，你可以跟我一样通过&amp;&amp;符合连接三个命令，你也可以单独执行</p><div style="text-align:right;"><a class="btn-beautify button--animated outline green larger" href="/2021/05/17/Hexo3/"   title="搭建Hexo博客(三)"><i class="far fa-hand-point-right"></i><span>搭建Hexo博客(三)</span></a></div>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly主题</title>
      <link href="2021/05/17/Hexo3/"/>
      <url>2021/05/17/Hexo3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="搭建Butterfly主题"><a href="#搭建Butterfly主题" class="headerlink" title="搭建Butterfly主题"></a>搭建<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly</a>主题</h3><blockquote><p>我自己搭建博客主题就是butterfly，也遇到了很多困惑。目前基本解决了。如果你不喜欢这个主题可以去百度搜索其他Hexo主题。接下来，我会写一些搭建butterfly主题的教程，搭建者需要配合<a href="https://butterfly.js.org/posts/21cfbf15/">官方文档</a>。单纯依靠官方文档搭建是可以的，我也是如此。</p></blockquote><h3 id="Git安装Butterfly主题"><a href="#Git安装Butterfly主题" class="headerlink" title="Git安装Butterfly主题"></a>Git安装Butterfly主题</h3><p>在你的博客根目录右键打开Git Bash</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> master https://github.com/jerryc127/hexo<span class="literal">-theme</span><span class="literal">-butterfly</span>.git themes/butterfly</span><br></pre></td></tr></table></figure><h3 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h3><p>修改站点配置文件<code>_config.yml</code>，把主题更改<code>butterfly</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>如果你没有pug以及stylus的渲染器，请下载安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-renderer</span><span class="literal">-pug</span> hexo<span class="literal">-renderer</span><span class="literal">-stylus</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><h3 id="主题配置文件复制"><a href="#主题配置文件复制" class="headerlink" title="主题配置文件复制"></a>主题配置文件复制</h3><p>把主题文件夹中的<code>_config.yml</code>复制到Hexo根目录下，听说重新命名<code>_config.butterfly.yml</code></p><p>以后只需要在<code>_config.butterfly.yml</code>进行配置就行</p><p>Hexo会自动合并主题中的<code>_config.yml</code>和<code>_config.butterfly.yml</code>里的配置，如果存在同名配置，会使用</p><p><code>_config.butterfly.yml</code>的配置，其优先度较高。</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210517110551.png"></p><h3 id="小结：butterfly主题基本样式ok"><a href="#小结：butterfly主题基本样式ok" class="headerlink" title="小结：butterfly主题基本样式ok"></a>小结：butterfly主题基本样式ok</h3><blockquote><p>以上是一些简单的搭建操作，使用Hexo命令部署到Github上，已经会有一个基本的主题样式，</p></blockquote><blockquote><p>后续我将结合文档，写留言板、说说、在线聊天等功能博客。在此之前请完善butterfly主题基本样式，如果有问题请留言</p></blockquote><div style="text-align:center;">  <a class="btn-beautify button--animated outline green larger" href="/2021/05/17/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2(%E4%B8%89)/"   title="留言板"><i class="far fa-hand-point-right"></i><span>留言板</span></a>  <a class="btn-beautify button--animated outline blue larger" href="/2021/05/17/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2(%E4%B8%89)/"   title="说说"><i class="far fa-hand-point-right"></i><span>说说</span></a>  <a class="btn-beautify button--animated outline red larger" href="/2021/05/17/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2(%E4%B8%89)/"   title="在线聊天"><i class="far fa-hand-point-right"></i><span>在线聊天</span></a></div>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue框架学习之旅</title>
      <link href="2021/05/17/Vue1/"/>
      <url>2021/05/17/Vue1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Vue-js是什么"><a href="#Vue-js是什么" class="headerlink" title="Vue.js是什么"></a>Vue.js是什么</h3><p>Vue（读音/vju:/，类似view）是一套用于构建用户界面的渐进式框架。以前学习JQuery编程叫命令式编程，学习vue编程，叫声明式编程。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用</p><h3 id="前端三大框架之一"><a href="#前端三大框架之一" class="headerlink" title="前端三大框架之一"></a>前端三大框架之一</h3><p>Vue框架：作者<a href="https://www.jianshu.com/p/3092b382ee80">尤雨溪</a>，创建了全世界三大前端框架之一，领先于React和Angular</p><p>2013年，在Google工作的尤雨溪，收到Angular的启发，开发了一款轻量框架，最初命名Seed</p><p>设计思想：是一种“渐进式框架”，淡化框架本省的主张，降低框架作为工具的复杂度，从而降低对使用者的要求</p><h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><blockquote><p>官方指南假设你已了解关于 HTML、CSS 和 JavaScript 的中级知识。如果你刚开始学习前端开发，将框架作为你的第一步可能不是最好的主意——掌握好基础知识再来吧！之前有其它框架的使用经验会有帮助，但这不是必需的。</p></blockquote><p>尝试Vue.js最简单的方法是使用hello world例子，引用vue文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告，利于初学者 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Vue.js的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进DOM的系统：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span></span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">  <span class="comment">//存放数据</span></span><br><span class="line">  <span class="attr">message</span>: <span class="string">&#x27;Hello Vue&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//写方法                </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">//属性方法，有缓存</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="attr">components</span>:&#123;</span><br><span class="line"><span class="comment">//声明子组件</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>以上一个简单的Vue实例，写了基本的Vue语法，使用的是Mustach语法，用来显示Vue实例的数据，但是容器需要捆绑id，接下来我会一步步记录Vue的学习笔记</p></blockquote><div style="text-align:right;">  <a class="btn-beautify button--animated outline green larger" href="/"   title="Vue框架基础"><i class="far fa-hand-point-right"></i><span>Vue框架基础</span></a></div>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Github博客</title>
      <link href="2021/05/16/Hexo1/"/>
      <url>2021/05/16/Hexo1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="搭建github博客"><a href="#搭建github博客" class="headerlink" title="搭建github博客"></a>搭建github博客</h1><ul><li><h3 id="创建Github账号"><a href="#创建Github账号" class="headerlink" title="创建Github账号"></a>创建<a href="https://github.com/join">Github账号</a></h3></li></ul><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516202937.png" alt="Github注册页面"></p><blockquote><p>选择一个好听、好记的用户名，博客以用户名为域名的，使用字母+数组组合</p></blockquote><blockquote><p>创建好github账号，验证Email，这是重要的</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516204745.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516205631.png"></p><p>进入Your repositiories 创建创库，仓库名字 username.github.io，以后进入博客名字就是这个</p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516211900.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516212649.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516213223.png"></p><blockquote><p>这时候你的基本博客搭建好了，接下搭建Hexo博客主题，美化自己的博客</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/SimpleLifecst/simple@main//20210516215941.png" alt="Butterfly样式"></p><h6 id="这是我们后续将会搭建的主题"><a href="#这是我们后续将会搭建的主题" class="headerlink" title="这是我们后续将会搭建的主题"></a>这是我们后续将会搭建的主题</h6><div style="text-align:right;">  <a class="btn-beautify button--animated outline green larger" href="/2021/05/17/Hexo2/"   title="搭建Hexo博客(二)"><i class="far fa-hand-point-right"></i><span>搭建Hexo博客(二)</span></a></div>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue插槽Slot</title>
      <link href="2021/05/13/Vue_slot/"/>
      <url>2021/05/13/Vue_slot/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h2><blockquote><p>大纲：了解插槽Slot的基本使用、学习新概念具名，通过给slot添加值name，指定修改内容、理解插槽作用域：父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p></blockquote><h2 id="插槽slot的基本使用"><a href="#插槽slot的基本使用" class="headerlink" title="插槽slot的基本使用"></a>插槽slot的基本使用</h2><p>加强扩展性：在模板添加<code>&lt;slot&gt;&lt;/slot&gt;</code>，当需要给模板新添加内容时，可以在子组件中添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用模板时需要添加button--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">    按钮</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这新增的标签会放到插槽位置上，如果有多个标签同样一起放入--&gt;</span></span><br></pre></td></tr></table></figure><p>添加默认值：如果模板在很多地方都需要这个标签，但是小部分不需要，可以给插槽添加默认值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--默认含有按钮--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--如果不需要按钮，可以新增替换--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><blockquote><p>给<code>slot</code>插槽添加<code>name</code>值，当创建模板的时候，会存在多个插槽，当需要改变特定插槽的值，可以指定它的name</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>不需要指定name，被替换<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--指定了name=&quot;left&quot;，替换默认值为button--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">&quot;left&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--没有指定slot=&quot;name&quot;的都替换--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>使用<code>v-slot</code>绑定name</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--template模板，header和footer指定了name属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用模板--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过template标签 用v-slot绑定特定插槽，能添加很多新标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://cn.vuejs.org/v2/guide/components-slots.html">官方示例</a></p><h2 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h2><blockquote><p>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--使用模板时,模板cpn相当div，使用的数据都是vue实例的，而不是模板组件数据--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-show:</span>&quot;<span class="attr">isShow</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>使用<code>slot</code>作用域插槽</p><blockquote><p>父组件替换插槽的标签，但是内容由子组件提供</p><ul><li>因此我们需要从子组件获取到数据</li><li>但是因为作用域拿到的数据是vue实例data，因此我们需要子组件传过去</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;slot&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;item in slot.aanguage&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">:aanguage</span>=<span class="string">&quot;pLanguage&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in pLanguage&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">message</span>:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">cpn</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">template</span>:<span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">pLanguage</span>:[<span class="string">&#x27;Javascript&#x27;</span>,<span class="string">&#x27;C++&#x27;</span>,<span class="string">&#x27;C#&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;Php&#x27;</span>]</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>PS：绑定子组件数据的名字不能使用大写，因为驼峰标识。无法识别</p><p><code>&lt;slot :aanguage=&quot;pLanguage&quot;&gt;</code></p><p><code>&lt;template slot-scope=&quot;slot&quot;&gt;</code></p><p><code>        &lt;span v-for=&quot;item in slot.aanguage&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue插槽Slot </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
